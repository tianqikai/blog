2020-11-05 00:40:19.044 INFO  [main]com.tqk.blog.BlogApplication.logStarting:55 -Starting BlogApplication on WIN-LFFH2UEU8RH with PID 9652 (D:\javaweb\blog\target\classes started by Administrator in D:\javaweb\blog)
2020-11-05 00:40:19.054 INFO  [main]com.tqk.blog.BlogApplication.logStartupProfileInfo:655 -The following profiles are active: dev
2020-11-05 00:40:20.463 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-05 00:40:20.614 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'shiroConfig' of type [com.tqk.blog.config.ShiroConfig$$EnhancerBySpringCGLIB$$a3b48d7d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-05 00:40:20.683 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'mybatis-tk.mybatis.mapper.autoconfigure.MybatisProperties' of type [tk.mybatis.mapper.autoconfigure.MybatisProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-05 00:40:20.699 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'tk.mybatis.mapper.autoconfigure.MapperAutoConfiguration' of type [tk.mybatis.mapper.autoconfigure.MapperAutoConfiguration$$EnhancerBySpringCGLIB$$ecb210ab] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-05 00:40:20.705 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure$$EnhancerBySpringCGLIB$$506d5e84] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-05 00:40:20.711 INFO  [main]c.a.d.s.boot.autoconfigure.DruidDataSourceAutoConfigure.dataSource:56 -Init DruidDataSource
2020-11-05 00:40:20.787 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'spring.datasource-org.springframework.boot.autoconfigure.jdbc.DataSourceProperties' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceProperties] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-05 00:40:20.806 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration' of type [com.alibaba.druid.spring.boot.autoconfigure.stat.DruidFilterConfiguration] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-05 00:40:20.829 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'statFilter' of type [com.alibaba.druid.filter.stat.StatFilter] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-05 00:40:24.416 INFO  [main]com.alibaba.druid.pool.DruidDataSource.init:930 -{dataSource-1} inited
2020-11-05 00:40:24.417 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'dataSource' of type [com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceWrapper] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-05 00:40:24.511 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker' of type [org.springframework.boot.autoconfigure.jdbc.DataSourceInitializerInvoker] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-05 00:40:24.863 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sqlSessionFactory' of type [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-05 00:40:24.873 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'sqlSessionTemplate' of type [org.mybatis.spring.SqlSessionTemplate] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-05 00:40:24.961 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'blAdminMapper' of type [tk.mybatis.spring.mapper.MapperFactoryBean] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-05 00:40:24.969 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'blAdminMapper' of type [com.sun.proxy.$Proxy86] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-05 00:40:25.016 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminServiceImpl' of type [com.tqk.blog.service.impl.AdminServiceImpl] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-05 00:40:25.018 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'adminRealm' of type [com.tqk.blog.realm.AdminRealm] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-05 00:40:25.568 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'securityManager' of type [org.apache.shiro.web.mgt.DefaultWebSecurityManager] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-05 00:40:25.605 INFO  [main]o.s.c.s.PostProcessorRegistrationDelegate$BeanPostProcessorChecker.postProcessAfterInitialization:330 -Bean 'authorizationAttributeSourceAdvisor' of type [org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
2020-11-05 00:40:25.962 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.initialize:92 -Tomcat initialized with port(s): 8080 (http)
2020-11-05 00:40:25.974 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Initializing ProtocolHandler ["http-nio-8080"]
2020-11-05 00:40:25.974 INFO  [main]org.apache.catalina.core.StandardService.log:173 -Starting service [Tomcat]
2020-11-05 00:40:25.975 INFO  [main]org.apache.catalina.core.StandardEngine.log:173 -Starting Servlet engine: [Apache Tomcat/9.0.29]
2020-11-05 00:40:26.130 INFO  [main]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring embedded WebApplicationContext
2020-11-05 00:40:26.131 INFO  [main]org.springframework.web.context.ContextLoader.prepareWebApplicationContext:284 -Root WebApplicationContext: initialization completed in 7018 ms
2020-11-05 00:40:27.327 INFO  [main]o.s.scheduling.concurrent.ThreadPoolTaskExecutor.initialize:171 -Initializing ExecutorService 'applicationTaskExecutor'
2020-11-05 00:40:27.794 INFO  [main]org.apache.coyote.http11.Http11NioProtocol.log:173 -Starting ProtocolHandler ["http-nio-8080"]
2020-11-05 00:40:27.829 INFO  [main]o.s.boot.web.embedded.tomcat.TomcatWebServer.start:204 -Tomcat started on port(s): 8080 (http) with context path ''
2020-11-05 00:40:27.835 INFO  [main]com.tqk.blog.BlogApplication.logStarted:61 -Started BlogApplication in 9.473 seconds (JVM running for 10.032)
2020-11-05 00:54:05.555 INFO  [http-nio-8080-exec-2]o.a.catalina.core.ContainerBase.[Tomcat].[localhost].[/].log:173 -Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-11-05 00:54:05.555 INFO  [http-nio-8080-exec-2]org.springframework.web.servlet.DispatcherServlet.initServletBean:525 -Initializing Servlet 'dispatcherServlet'
2020-11-05 00:54:05.571 INFO  [http-nio-8080-exec-2]org.springframework.web.servlet.DispatcherServlet.initServletBean:547 -Completed initialization in 15 ms
2020-11-05 00:54:05.689 INFO  [http-nio-8080-exec-2]com.tqk.blog.aspect.RequestAspect.printRequestLog:115 -请求地址 : /BlAdmin/login
2020-11-05 00:54:05.691 INFO  [http-nio-8080-exec-2]com.tqk.blog.aspect.RequestAspect.printRequestLog:116 -请求方式 : POST
2020-11-05 00:54:05.694 INFO  [http-nio-8080-exec-2]com.tqk.blog.aspect.RequestAspect.printRequestLog:119 -IP : 0:0:0:0:0:0:0:1
2020-11-05 00:54:05.696 INFO  [http-nio-8080-exec-2]com.tqk.blog.aspect.RequestAspect.printRequestLog:121 -方法 : com.tqk.blog.controller.AdminController.login
2020-11-05 00:54:05.697 INFO  [http-nio-8080-exec-2]com.tqk.blog.aspect.RequestAspect.printRequestLog:123 -请求参数：[com.tqk.blog.pojo.BlAdmin@6fbe7958]
2020-11-05 00:54:05.953 INFO  [http-nio-8080-exec-2]com.tqk.blog.aspect.RequestAspect.doAround:67 -耗时 : 264
2020-11-05 00:54:06.042 INFO  [http-nio-8080-exec-2]com.tqk.blog.aspect.RequestAspect.doAfterReturning:81 -返回值：{"code":20000,"data":{"token":"1BC313B3659F717C60D97A6DB33A4348"},"msg":"操作成功！"}
2020-11-05 00:54:45.584 INFO  [http-nio-8080-exec-5]com.tqk.blog.aspect.RequestAspect.printRequestLog:115 -请求地址 : /blog/save
2020-11-05 00:54:45.584 INFO  [http-nio-8080-exec-5]com.tqk.blog.aspect.RequestAspect.printRequestLog:116 -请求方式 : POST
2020-11-05 00:54:45.585 INFO  [http-nio-8080-exec-5]com.tqk.blog.aspect.RequestAspect.printRequestLog:119 -IP : 0:0:0:0:0:0:0:1
2020-11-05 00:54:45.585 INFO  [http-nio-8080-exec-5]com.tqk.blog.aspect.RequestAspect.printRequestLog:121 -方法 : com.tqk.blog.controller.BlogController.save
2020-11-05 00:54:45.586 INFO  [http-nio-8080-exec-5]com.tqk.blog.aspect.RequestAspect.printRequestLog:123 -请求参数：[com.tqk.blog.pojo.BlBlog@12ec4c11]
2020-11-05 00:54:55.277 INFO  [http-nio-8080-exec-7]com.tqk.blog.aspect.RequestAspect.printRequestLog:115 -请求地址 : /blog/save
2020-11-05 00:54:55.279 INFO  [http-nio-8080-exec-7]com.tqk.blog.aspect.RequestAspect.printRequestLog:116 -请求方式 : POST
2020-11-05 00:54:55.279 INFO  [http-nio-8080-exec-7]com.tqk.blog.aspect.RequestAspect.printRequestLog:119 -IP : 0:0:0:0:0:0:0:1
2020-11-05 00:54:55.280 INFO  [http-nio-8080-exec-7]com.tqk.blog.aspect.RequestAspect.printRequestLog:121 -方法 : com.tqk.blog.controller.BlogController.save
2020-11-05 00:54:55.280 INFO  [http-nio-8080-exec-7]com.tqk.blog.aspect.RequestAspect.printRequestLog:123 -请求参数：[com.tqk.blog.pojo.BlBlog@dd52d76]
2020-11-05 00:55:26.887 INFO  [http-nio-8080-exec-9]com.tqk.blog.aspect.RequestAspect.printRequestLog:115 -请求地址 : /blog/save
2020-11-05 00:55:26.888 INFO  [http-nio-8080-exec-9]com.tqk.blog.aspect.RequestAspect.printRequestLog:116 -请求方式 : POST
2020-11-05 00:55:26.888 INFO  [http-nio-8080-exec-9]com.tqk.blog.aspect.RequestAspect.printRequestLog:119 -IP : 0:0:0:0:0:0:0:1
2020-11-05 00:55:26.888 INFO  [http-nio-8080-exec-9]com.tqk.blog.aspect.RequestAspect.printRequestLog:121 -方法 : com.tqk.blog.controller.BlogController.save
2020-11-05 00:55:26.888 INFO  [http-nio-8080-exec-9]com.tqk.blog.aspect.RequestAspect.printRequestLog:123 -请求参数：[com.tqk.blog.pojo.BlBlog@46a08be4]
2020-11-05 00:55:27.483 INFO  [http-nio-8080-exec-9]com.tqk.blog.aspect.RequestAspect.doAround:67 -耗时 : 596
2020-11-05 00:55:27.484 INFO  [http-nio-8080-exec-9]com.tqk.blog.aspect.RequestAspect.doAfterReturning:81 -返回值：{"code":20000,"msg":"添加成功！"}
2020-11-05 01:01:03.033 INFO  [http-nio-8080-exec-2]com.tqk.blog.aspect.RequestAspect.printRequestLog:115 -请求地址 : /blog/get/1324032521322803200
2020-11-05 01:01:03.034 INFO  [http-nio-8080-exec-2]com.tqk.blog.aspect.RequestAspect.printRequestLog:116 -请求方式 : GET
2020-11-05 01:01:03.034 INFO  [http-nio-8080-exec-2]com.tqk.blog.aspect.RequestAspect.printRequestLog:119 -IP : 0:0:0:0:0:0:0:1
2020-11-05 01:01:03.035 INFO  [http-nio-8080-exec-2]com.tqk.blog.aspect.RequestAspect.printRequestLog:121 -方法 : com.tqk.blog.controller.BlogController.get
2020-11-05 01:01:03.035 INFO  [http-nio-8080-exec-2]com.tqk.blog.aspect.RequestAspect.printRequestLog:123 -请求参数：[1324032521322803200]
2020-11-05 01:01:03.181 INFO  [http-nio-8080-exec-2]com.tqk.blog.aspect.RequestAspect.doAround:67 -耗时 : 148
2020-11-05 01:01:03.199 INFO  [http-nio-8080-exec-2]com.tqk.blog.aspect.RequestAspect.doAfterReturning:81 -返回值：{"code":20000,"data":{"blogCollection":0,"blogComment":0,"blogContent":"在项目中，@Transactional(rollbackFor=Exception.class)，如果类加了这个注解，那么这个类里面的方法抛出异常，就会回滚，数据库里面的数据也会回滚。在@Transactional注解中如果不配置rollbackFor属性,那么事物只会在遇到RuntimeException的时候才会回滚,加上rollbackFor=Exception.class,可以让事物在遇到非运行时异常时也回滚","blogGoods":0,"blogId":"1324032521322803200","blogImage":"Java","blogRead":0,"blogRemark":"Spring中的@Transactional(rollbackFor = Exception.class)属性详解","blogSource":"百度","blogTitle":"Spring中的@Transactional(rollbackFor = Exception.class)属性详解","blogType":1,"createdTime":1604480124000,"version":1},"msg":"操作成功！"}
2020-11-05 01:04:43.012 INFO  [http-nio-8080-exec-7]com.tqk.blog.aspect.RequestAspect.printRequestLog:115 -请求地址 : /blog/update
2020-11-05 01:04:43.012 INFO  [http-nio-8080-exec-7]com.tqk.blog.aspect.RequestAspect.printRequestLog:116 -请求方式 : PUT
2020-11-05 01:04:43.013 INFO  [http-nio-8080-exec-7]com.tqk.blog.aspect.RequestAspect.printRequestLog:119 -IP : 0:0:0:0:0:0:0:1
2020-11-05 01:04:43.013 INFO  [http-nio-8080-exec-7]com.tqk.blog.aspect.RequestAspect.printRequestLog:121 -方法 : com.tqk.blog.controller.BlogController.update
2020-11-05 01:04:43.013 INFO  [http-nio-8080-exec-7]com.tqk.blog.aspect.RequestAspect.printRequestLog:123 -请求参数：[com.tqk.blog.pojo.BlBlog@73a75a61]
2020-11-05 01:05:24.601 INFO  [http-nio-8080-exec-9]com.tqk.blog.aspect.RequestAspect.printRequestLog:115 -请求地址 : /blog/update
2020-11-05 01:05:24.603 INFO  [http-nio-8080-exec-9]com.tqk.blog.aspect.RequestAspect.printRequestLog:116 -请求方式 : PUT
2020-11-05 01:05:24.604 INFO  [http-nio-8080-exec-9]com.tqk.blog.aspect.RequestAspect.printRequestLog:119 -IP : 0:0:0:0:0:0:0:1
2020-11-05 01:05:24.605 INFO  [http-nio-8080-exec-9]com.tqk.blog.aspect.RequestAspect.printRequestLog:121 -方法 : com.tqk.blog.controller.BlogController.update
2020-11-05 01:05:24.605 INFO  [http-nio-8080-exec-9]com.tqk.blog.aspect.RequestAspect.printRequestLog:123 -请求参数：[com.tqk.blog.pojo.BlBlog@69414344]
2020-11-05 01:05:24.937 INFO  [http-nio-8080-exec-9]com.tqk.blog.aspect.RequestAspect.doAround:67 -耗时 : 336
2020-11-05 01:05:24.938 INFO  [http-nio-8080-exec-9]com.tqk.blog.aspect.RequestAspect.doAfterReturning:81 -返回值：{"code":20000,"msg":"更新成功！"}
2020-11-05 01:15:29.363 INFO  [http-nio-8080-exec-2]com.tqk.blog.aspect.RequestAspect.printRequestLog:115 -请求地址 : /blog/read/1324032521322803200
2020-11-05 01:15:29.364 INFO  [http-nio-8080-exec-2]com.tqk.blog.aspect.RequestAspect.printRequestLog:116 -请求方式 : GET
2020-11-05 01:15:29.366 INFO  [http-nio-8080-exec-2]com.tqk.blog.aspect.RequestAspect.printRequestLog:119 -IP : 0:0:0:0:0:0:0:1
2020-11-05 01:15:29.367 INFO  [http-nio-8080-exec-2]com.tqk.blog.aspect.RequestAspect.printRequestLog:121 -方法 : com.tqk.blog.controller.BlogController.read
2020-11-05 01:15:29.367 INFO  [http-nio-8080-exec-2]com.tqk.blog.aspect.RequestAspect.printRequestLog:123 -请求参数：[1324032521322803200]
2020-11-05 01:15:29.696 INFO  [http-nio-8080-exec-2]com.tqk.blog.aspect.RequestAspect.doAround:67 -耗时 : 333
2020-11-05 01:15:29.704 INFO  [http-nio-8080-exec-2]com.tqk.blog.aspect.RequestAspect.doAfterReturning:81 -返回值：{"code":20000,"data":{"blogCollection":0,"blogComment":0,"blogContent":"在项目中，@Transactional(rollbackFor=Exception.class)，如果类加了这个注解，那么这个类里面的方法抛出异常，就会回滚，数据库里面的数据也会回滚。在@Transactional注解中如果不配置rollbackFor属性,那么事物只会在遇到RuntimeException的时候才会回滚,加上rollbackFor=Exception.class,可以让事物在遇到非运行时异常时也回滚","blogGoods":0,"blogId":"1324032521322803200","blogImage":"Java","blogRead":1,"blogRemark":"Spring中的@Transactional(rollbackFor = Exception.class)属性详解","blogSource":"百度","blogTitle":"Spring中的@Transactional(rollbackFor = Exception.class)属性详解","typeName":"Java"},"msg":"操作成功！"}
2020-11-05 01:16:21.608 INFO  [http-nio-8080-exec-3]com.tqk.blog.aspect.RequestAspect.printRequestLog:115 -请求地址 : /blog/delete/1324032521322803200
2020-11-05 01:16:21.609 INFO  [http-nio-8080-exec-3]com.tqk.blog.aspect.RequestAspect.printRequestLog:116 -请求方式 : DELETE
2020-11-05 01:16:21.610 INFO  [http-nio-8080-exec-3]com.tqk.blog.aspect.RequestAspect.printRequestLog:119 -IP : 0:0:0:0:0:0:0:1
2020-11-05 01:16:21.611 INFO  [http-nio-8080-exec-3]com.tqk.blog.aspect.RequestAspect.printRequestLog:121 -方法 : com.tqk.blog.controller.BlogController.delete
2020-11-05 01:16:21.612 INFO  [http-nio-8080-exec-3]com.tqk.blog.aspect.RequestAspect.printRequestLog:123 -请求参数：[1324032521322803200]
2020-11-05 01:16:22.062 INFO  [http-nio-8080-exec-3]com.tqk.blog.aspect.RequestAspect.doAround:67 -耗时 : 454
2020-11-05 01:16:22.063 INFO  [http-nio-8080-exec-3]com.tqk.blog.aspect.RequestAspect.doAfterReturning:81 -返回值：{"code":20000,"msg":"删除成功！"}
2020-11-05 01:17:36.378 INFO  [http-nio-8080-exec-6]com.tqk.blog.aspect.RequestAspect.printRequestLog:115 -请求地址 : /blog/save
2020-11-05 01:17:36.380 INFO  [http-nio-8080-exec-6]com.tqk.blog.aspect.RequestAspect.printRequestLog:116 -请求方式 : POST
2020-11-05 01:17:36.381 INFO  [http-nio-8080-exec-6]com.tqk.blog.aspect.RequestAspect.printRequestLog:119 -IP : 0:0:0:0:0:0:0:1
2020-11-05 01:17:36.381 INFO  [http-nio-8080-exec-6]com.tqk.blog.aspect.RequestAspect.printRequestLog:121 -方法 : com.tqk.blog.controller.BlogController.save
2020-11-05 01:17:36.382 INFO  [http-nio-8080-exec-6]com.tqk.blog.aspect.RequestAspect.printRequestLog:123 -请求参数：[com.tqk.blog.pojo.BlBlog@795e0a3b]
2020-11-05 01:17:36.737 INFO  [http-nio-8080-exec-6]com.tqk.blog.aspect.RequestAspect.doAround:67 -耗时 : 359
2020-11-05 01:17:36.738 INFO  [http-nio-8080-exec-6]com.tqk.blog.aspect.RequestAspect.doAfterReturning:81 -返回值：{"code":20000,"msg":"添加成功！"}
2020-11-05 01:18:28.872 INFO  [http-nio-8080-exec-7]com.tqk.blog.aspect.RequestAspect.printRequestLog:115 -请求地址 : /blog/getTimeLine
2020-11-05 01:18:28.873 INFO  [http-nio-8080-exec-7]com.tqk.blog.aspect.RequestAspect.printRequestLog:116 -请求方式 : GET
2020-11-05 01:18:28.874 INFO  [http-nio-8080-exec-7]com.tqk.blog.aspect.RequestAspect.printRequestLog:119 -IP : 0:0:0:0:0:0:0:1
2020-11-05 01:18:28.874 INFO  [http-nio-8080-exec-7]com.tqk.blog.aspect.RequestAspect.printRequestLog:121 -方法 : com.tqk.blog.controller.BlogController.getTimeLine
2020-11-05 01:18:28.875 INFO  [http-nio-8080-exec-7]com.tqk.blog.aspect.RequestAspect.printRequestLog:123 -请求参数：[]
2020-11-05 01:18:28.959 INFO  [http-nio-8080-exec-7]com.tqk.blog.aspect.RequestAspect.doAround:67 -耗时 : 87
2020-11-05 01:18:28.964 INFO  [http-nio-8080-exec-7]com.tqk.blog.aspect.RequestAspect.doAfterReturning:81 -返回值：{"code":20000,"data":[{"list":[{"blogId":"1324038097171820544","blogMonth":"2020-11","blogTitle":"BeanUtils.copyProperties的用法","createdTime":"2020-11-04 17:17:33"},{"blogId":"1324032521322803200","blogMonth":"2020-11","blogTitle":"Spring中的@Transactional(rollbackFor = Exception.class)属性详解","createdTime":"2020-11-04 16:55:24"}],"month":"2020-11"}],"msg":"操作成功！"}
2020-11-05 01:20:14.414 INFO  [http-nio-8080-exec-1]com.tqk.blog.aspect.RequestAspect.printRequestLog:115 -请求地址 : /blog/recomRead
2020-11-05 01:20:14.415 INFO  [http-nio-8080-exec-1]com.tqk.blog.aspect.RequestAspect.printRequestLog:116 -请求方式 : GET
2020-11-05 01:20:14.415 INFO  [http-nio-8080-exec-1]com.tqk.blog.aspect.RequestAspect.printRequestLog:119 -IP : 0:0:0:0:0:0:0:1
2020-11-05 01:20:14.415 INFO  [http-nio-8080-exec-1]com.tqk.blog.aspect.RequestAspect.printRequestLog:121 -方法 : com.tqk.blog.controller.BlogController.recomRead
2020-11-05 01:20:14.416 INFO  [http-nio-8080-exec-1]com.tqk.blog.aspect.RequestAspect.printRequestLog:123 -请求参数：[]
2020-11-05 01:20:14.561 INFO  [http-nio-8080-exec-1]com.tqk.blog.aspect.RequestAspect.doAround:67 -耗时 : 147
2020-11-05 01:20:14.562 INFO  [http-nio-8080-exec-1]com.tqk.blog.aspect.RequestAspect.doAfterReturning:81 -返回值：{"code":20000,"data":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1324038097171820544","blogRead":0,"blogTitle":"BeanUtils.copyProperties的用法","createdTime":"2020-11-04 17:17:33","typeName":"Java"}],"msg":"操作成功！"}
2020-11-05 01:24:05.464 INFO  [http-nio-8080-exec-7]com.tqk.blog.aspect.RequestAspect.printRequestLog:115 -请求地址 : /blog/getByPage
2020-11-05 01:24:05.465 INFO  [http-nio-8080-exec-7]com.tqk.blog.aspect.RequestAspect.printRequestLog:116 -请求方式 : POST
2020-11-05 01:24:05.465 INFO  [http-nio-8080-exec-7]com.tqk.blog.aspect.RequestAspect.printRequestLog:119 -IP : 0:0:0:0:0:0:0:1
2020-11-05 01:24:05.466 INFO  [http-nio-8080-exec-7]com.tqk.blog.aspect.RequestAspect.printRequestLog:121 -方法 : com.tqk.blog.controller.BlogController.getByPage
2020-11-05 01:24:05.466 INFO  [http-nio-8080-exec-7]com.tqk.blog.aspect.RequestAspect.printRequestLog:123 -请求参数：[Page(currentPage=1, pageSize=20, totalPage=0, totalCount=0, list=null, params={}, sortColumn=null, sortMethod=asc)]
2020-11-05 01:24:05.710 INFO  [http-nio-8080-exec-7]com.tqk.blog.aspect.RequestAspect.doAround:67 -耗时 : 246
2020-11-05 01:24:05.721 INFO  [http-nio-8080-exec-7]com.tqk.blog.aspect.RequestAspect.doAfterReturning:81 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1324038097171820544","blogImage":"Java","blogRead":0,"blogRemark":"BeanUtils它提供了对java反射和自省API的包装。它里面还有很多工具类，这里我们介绍一下copyProperties。","blogSource":"百度","blogTitle":"BeanUtils.copyProperties的用法","createdTime":"2020-11-04 17:17:33","typeName":"Java","updateTime":"2020-11-04 17:17:33"}],"pageSize":20,"params":{},"sortMethod":"asc","totalCount":1,"totalPage":1},"msg":"操作成功！"}
