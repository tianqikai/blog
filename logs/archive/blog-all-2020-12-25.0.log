2020-12-25 00:01:03.445 INFO  [http-nio-8899-exec-2]com.tqk.blog.aspect.RequestAspect.printRequestLog:115 -请求地址 : /BlAdmin/info
2020-12-25 00:01:03.453 INFO  [http-nio-8899-exec-2]com.tqk.blog.aspect.RequestAspect.printRequestLog:116 -请求方式 : GET
2020-12-25 00:01:03.454 INFO  [http-nio-8899-exec-2]com.tqk.blog.aspect.RequestAspect.printRequestLog:119 -IP : 192.168.101.29
2020-12-25 00:01:03.454 INFO  [http-nio-8899-exec-2]com.tqk.blog.aspect.RequestAspect.printRequestLog:121 -方法 : com.tqk.blog.controller.AdminController.getLoginInfo
2020-12-25 00:01:03.455 INFO  [http-nio-8899-exec-2]com.tqk.blog.aspect.RequestAspect.printRequestLog:123 -请求参数：[]
2020-12-25 00:01:03.455 INFO  [http-nio-8899-exec-2]com.tqk.blog.aspect.RequestAspect.doAround:67 -耗时 : 11
2020-12-25 00:01:03.456 INFO  [http-nio-8899-exec-2]com.tqk.blog.aspect.RequestAspect.doAfterReturning:81 -返回值：{"code":20000,"data":{"name":"田起凯","password":"","signature":"hold on","username":"admin"},"msg":"操作成功！"}
2020-12-25 00:01:03.494 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-12-25 00:01:03.496 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /BlAdmin/info(String), [](String), 1(Integer), null, GET(String), 11(Long), {"code":20000,"data":{"name":"田起凯","password":"","signature":"hold on","username":"admin"},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-12-25 00:01:03.685 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-12-25 00:01:03.910 INFO  [http-nio-8899-exec-4]com.tqk.blog.aspect.RequestAspect.printRequestLog:115 -请求地址 : /type/getList
2020-12-25 00:01:03.911 INFO  [http-nio-8899-exec-4]com.tqk.blog.aspect.RequestAspect.printRequestLog:116 -请求方式 : GET
2020-12-25 00:01:03.911 INFO  [http-nio-8899-exec-4]com.tqk.blog.aspect.RequestAspect.printRequestLog:119 -IP : 192.168.101.29
2020-12-25 00:01:03.911 INFO  [http-nio-8899-exec-4]com.tqk.blog.aspect.RequestAspect.printRequestLog:121 -方法 : com.tqk.blog.controller.TypeController.getList
2020-12-25 00:01:03.911 INFO  [http-nio-8899-exec-4]com.tqk.blog.aspect.RequestAspect.printRequestLog:123 -请求参数：[]
2020-12-25 00:01:03.951 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -==>  Preparing: SELECT type_id,type_name,type_blog_count,enable,deleted FROM bl_type WHERE ( enable = ? and deleted = ? ) 
2020-12-25 00:01:03.953 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -==> Parameters: 1(Integer), 0(Integer)
2020-12-25 00:01:03.989 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -<==      Total: 7
2020-12-25 00:01:03.990 INFO  [http-nio-8899-exec-4]com.tqk.blog.aspect.RequestAspect.doAround:67 -耗时 : 80
2020-12-25 00:01:03.991 INFO  [http-nio-8899-exec-4]com.tqk.blog.aspect.RequestAspect.doAfterReturning:81 -返回值：{"code":20000,"data":[{"deleted":0,"enable":1,"typeBlogCount":105,"typeId":1,"typeName":"Java"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"Python"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"going"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"Spring"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"nginx"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":9,"typeName":"Redis"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":10,"typeName":"Docker"}],"msg":"操作成功！"}
2020-12-25 00:01:04.027 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-12-25 00:01:04.028 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 80(Long), {"code":20000,"data":[{"deleted":0,"enable":1,"typeBlogCount":105,"typeId":1,"typeName":"Java"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"Python"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"going"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"Spring"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"nginx"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":9,"typeName":"Redis"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":10,"typeName":"Docker"}],"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-12-25 00:01:04.120 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-12-25 00:01:04.213 INFO  [http-nio-8899-exec-5]com.tqk.blog.aspect.RequestAspect.printRequestLog:115 -请求地址 : /blog/getByPage
2020-12-25 00:01:04.214 INFO  [http-nio-8899-exec-5]com.tqk.blog.aspect.RequestAspect.printRequestLog:116 -请求方式 : POST
2020-12-25 00:01:04.214 INFO  [http-nio-8899-exec-5]com.tqk.blog.aspect.RequestAspect.printRequestLog:119 -IP : 192.168.101.29
2020-12-25 00:01:04.214 INFO  [http-nio-8899-exec-5]com.tqk.blog.aspect.RequestAspect.printRequestLog:121 -方法 : com.tqk.blog.controller.BlogController.getByPage
2020-12-25 00:01:04.215 INFO  [http-nio-8899-exec-5]com.tqk.blog.aspect.RequestAspect.printRequestLog:123 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-12-25 00:01:04.286 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image, blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-12-25 00:01:04.286 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-12-25 00:01:04.322 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -<==      Total: 3
2020-12-25 00:01:04.324 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-12-25 00:01:04.324 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-12-25 00:01:04.360 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-12-25 00:01:04.440 INFO  [http-nio-8899-exec-5]com.tqk.blog.aspect.RequestAspect.doAround:67 -耗时 : 227
2020-12-25 00:01:04.440 INFO  [http-nio-8899-exec-5]com.tqk.blog.aspect.RequestAspect.doAfterReturning:81 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1324038097171820544","blogImage":"Java","blogRead":0,"blogRemark":"BeanUtils它提供了对java反射和自省API的包装。它里面还有很多工具类，这里我们介绍一下copyProperties。","blogSource":"百度","blogTitle":"BeanUtils.copyProperties的用法","createdTime":"2020-11-04 17:17:33","typeName":"Java","updateTime":"2020-11-22 13:04:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1330877080455553024","blogRead":0,"blogRemark":"MySQL","blogTitle":"面试官不讲武德问我：为什么MySQL不建议使用delete删除数据？","createdTime":"2020-11-23 14:13:16","typeName":"Java","updateTime":"2020-11-23 14:23:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1330879440221315072","blogRead":0,"blogRemark":"面试必备","blogTitle":"Java岗四面字节跳动成功之前，我都刷了那些面试题以及做了那些准备！","createdTime":"2020-11-23 14:22:39","typeName":"Java","updateTime":"2020-11-23 14:22:39"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":3,"totalPage":1},"msg":"操作成功！"}
2020-12-25 00:01:04.478 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-12-25 00:01:04.479 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 227(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1324038097171820544","blogImage":"Java","blogRead":0,"blogRemark":"BeanUtils它提供了对java反射和自省API的包装。它里面还有很多工具类，这里我们介绍一下copyProperties。","blogSource":"百度","blogTitle":"BeanUtils.copyProperties的用法","createdTime":"2020-11-04 17:17:33","typeName":"Java","updateTime":"2020-11-22 13:04:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1330877080455553024","blogRead":0,"blogRemark":"MySQL","blogTitle":"面试官不讲武德问我：为什么MySQL不建议使用delete删除数据？","createdTime":"2020-11-23 14:13:16","typeName":"Java","updateTime":"2020-11-23 14:23:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1330879440221315072","blogRead":0,"blogRemark":"面试必备","blogTitle":"Java岗四面字节跳动成功之前，我都刷了那些面试题以及做了那些准备！","createdTime":"2020-11-23 14:22:39","typeName":"Java","updateTime":"2020-11-23 14:22:39"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":3,"totalPage":1},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-12-25 00:01:04.563 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-12-25 00:01:10.030 INFO  [http-nio-8899-exec-6]com.tqk.blog.aspect.RequestAspect.printRequestLog:115 -请求地址 : /blog/get/1324038097171820544
2020-12-25 00:01:10.031 INFO  [http-nio-8899-exec-6]com.tqk.blog.aspect.RequestAspect.printRequestLog:116 -请求方式 : GET
2020-12-25 00:01:10.032 INFO  [http-nio-8899-exec-6]com.tqk.blog.aspect.RequestAspect.printRequestLog:119 -IP : 192.168.101.29
2020-12-25 00:01:10.033 INFO  [http-nio-8899-exec-6]com.tqk.blog.aspect.RequestAspect.printRequestLog:121 -方法 : com.tqk.blog.controller.BlogController.get
2020-12-25 00:01:10.034 INFO  [http-nio-8899-exec-6]com.tqk.blog.aspect.RequestAspect.printRequestLog:123 -请求参数：[1324038097171820544]
2020-12-25 00:01:10.073 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlBlogMapper.getById.debug:159 -==>  Preparing: select blog_id, blog_title, blog_content, blog_goods, blog_image, blog_read, blog_collection, blog_type, blog_remark, blog_comment, blog_source, created_time, version from bl_blog where blog_id = ? and deleted = 0 
2020-12-25 00:01:10.075 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlBlogMapper.getById.debug:159 -==> Parameters: 1324038097171820544(String)
2020-12-25 00:01:10.111 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlBlogMapper.getById.debug:159 -<==      Total: 1
2020-12-25 00:01:10.112 INFO  [http-nio-8899-exec-6]com.tqk.blog.aspect.RequestAspect.doAround:67 -耗时 : 82
2020-12-25 00:01:10.113 INFO  [http-nio-8899-exec-6]com.tqk.blog.aspect.RequestAspect.doAfterReturning:81 -返回值：{"code":20000,"data":{"blogCollection":0,"blogComment":0,"blogContent":"BeanUtils.copyProperties(a, b);b中的存在的属性，a中一定要有，但是a中可以有多余的属性；a中与b中相同的属性都会被替换，不管是否有值；a、 b中的属性要名字相同，才能被赋值，不然的话需要手动赋值；Spring的BeanUtils的CopyProperties方法需要对应的属性有getter和setter方法；如果存在属性完全相同的内部类，但是不是同一个内部类，即分别属于各自的内部类，则spring会认为属性不同，不会copy；spring和apache的copy属性的方法源和目的参数的位置正好相反，所以导包和调用的时候都要注意一下。","blogGoods":0,"blogId":"1324038097171820544","blogImage":"Java","blogRead":0,"blogRemark":"BeanUtils它提供了对java反射和自省API的包装。它里面还有很多工具类，这里我们介绍一下copyProperties。","blogSource":"百度","blogTitle":"BeanUtils.copyProperties的用法","blogType":1,"createdTime":1604481453000,"version":2},"msg":"操作成功！"}
2020-12-25 00:01:10.160 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-12-25 00:01:10.162 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/get/1324038097171820544(String), [1324038097171820544](String), 1(Integer), org.springframework.dao.DataIntegrityViolationException: 
### Error updating database.  Cause: java.sql.SQLIntegrityConstraintViolationException: Column 'blog_content' cannot be null
### The error may involve com.tqk.blog.mapper.BlBlogMapper.save-Inline
### Cause: java.sql.SQLIntegrityConstraintViolationException: Column 'blog_content' cannot be null
; Column 'blog_content' cannot be null; nested exception is java.sql.SQLIntegrityConstraintViolationException: Column 'blog_content' cannot be null
	at com.tqk.blog.service.impl.BlogServiceImpl.save(BlogServiceImpl.java:52)
	at com.tqk.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$c89e2edd.invoke(<generated>)
	at com.tqk.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$e40d0c11.save(<generated>)
	at com.tqk.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$c89e2edd.invoke(<generated>)
	at com.tqk.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$7c340e8d.save(<generated>)
	at com.tqk.blog.controller.BlogController.save(BlogController.java:39)
	at com.tqk.blog.controller.BlogController$$FastClassBySpringCGLIB$$a4fc5e31.invoke(<generated>)
	at com.tqk.blog.aspect.RequestAspect.doAround(RequestAspect.java:65)
	at com.tqk.blog.controller.BlogController$$EnhancerBySpringCGLIB$$7e46265a.save(<generated>)
Caused by: java.sql.SQLIntegrityConstraintViolationException: Column 'blog_content' cannot be null
(String), GET(String), 82(Long), {"code":20000,"data":{"blogCollection":0,"blogComment":0,"blogContent":"BeanUtils.copyProperties(a, b);b中的存在的属性，a中一定要有，但是a中可以有多余的属性；a中与b中相同的属性都会被替换，不管是否有值；a、 b中的属性要名字相同，才能被赋值，不然的话需要手动赋值；Spring的BeanUtils的CopyProperties方法需要对应的属性有getter和setter方法；如果存在属性完全相同的内部类，但是不是同一个内部类，即分别属于各自的内部类，则spring会认为属性不同，不会copy；spring和apache的copy属性的方法源和目的参数的位置正好相反，所以导包和调用的时候都要注意一下。","blogGoods":0,"blogId":"1324038097171820544","blogImage":"Java","blogRead":0,"blogRemark":"BeanUtils它提供了对java反射和自省API的包装。它里面还有很多工具类，这里我们介绍一下copyProperties。","blogSource":"百度","blogTitle":"BeanUtils.copyProperties的用法","blogType":1,"createdTime":1604481453000,"version":2},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-12-25 00:01:10.245 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-12-25 00:03:21.147 INFO  [http-nio-8899-exec-7]com.tqk.blog.aspect.RequestAspect.printRequestLog:115 -请求地址 : /blog/getByPage
2020-12-25 00:03:21.148 INFO  [http-nio-8899-exec-7]com.tqk.blog.aspect.RequestAspect.printRequestLog:116 -请求方式 : POST
2020-12-25 00:03:21.149 INFO  [http-nio-8899-exec-7]com.tqk.blog.aspect.RequestAspect.printRequestLog:119 -IP : 192.168.101.29
2020-12-25 00:03:21.149 INFO  [http-nio-8899-exec-7]com.tqk.blog.aspect.RequestAspect.printRequestLog:121 -方法 : com.tqk.blog.controller.BlogController.getByPage
2020-12-25 00:03:21.149 INFO  [http-nio-8899-exec-7]com.tqk.blog.aspect.RequestAspect.printRequestLog:123 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-12-25 00:03:21.223 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image, blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-12-25 00:03:21.224 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-12-25 00:03:21.262 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -<==      Total: 3
2020-12-25 00:03:21.263 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-12-25 00:03:21.264 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-12-25 00:03:21.301 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-12-25 00:03:21.375 INFO  [http-nio-8899-exec-7]com.tqk.blog.aspect.RequestAspect.doAround:67 -耗时 : 228
2020-12-25 00:03:21.376 INFO  [http-nio-8899-exec-7]com.tqk.blog.aspect.RequestAspect.doAfterReturning:81 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1324038097171820544","blogImage":"Java","blogRead":0,"blogRemark":"BeanUtils它提供了对java反射和自省API的包装。它里面还有很多工具类，这里我们介绍一下copyProperties。","blogSource":"百度","blogTitle":"BeanUtils.copyProperties的用法","createdTime":"2020-11-04 17:17:33","typeName":"Java","updateTime":"2020-11-22 13:04:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1330877080455553024","blogRead":0,"blogRemark":"MySQL","blogTitle":"面试官不讲武德问我：为什么MySQL不建议使用delete删除数据？","createdTime":"2020-11-23 14:13:16","typeName":"Java","updateTime":"2020-11-23 14:23:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1330879440221315072","blogRead":0,"blogRemark":"面试必备","blogTitle":"Java岗四面字节跳动成功之前，我都刷了那些面试题以及做了那些准备！","createdTime":"2020-11-23 14:22:39","typeName":"Java","updateTime":"2020-11-23 14:22:39"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":3,"totalPage":1},"msg":"操作成功！"}
2020-12-25 00:03:21.414 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-12-25 00:03:21.415 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 228(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1324038097171820544","blogImage":"Java","blogRead":0,"blogRemark":"BeanUtils它提供了对java反射和自省API的包装。它里面还有很多工具类，这里我们介绍一下copyProperties。","blogSource":"百度","blogTitle":"BeanUtils.copyProperties的用法","createdTime":"2020-11-04 17:17:33","typeName":"Java","updateTime":"2020-11-22 13:04:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1330877080455553024","blogRead":0,"blogRemark":"MySQL","blogTitle":"面试官不讲武德问我：为什么MySQL不建议使用delete删除数据？","createdTime":"2020-11-23 14:13:16","typeName":"Java","updateTime":"2020-11-23 14:23:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1330879440221315072","blogRead":0,"blogRemark":"面试必备","blogTitle":"Java岗四面字节跳动成功之前，我都刷了那些面试题以及做了那些准备！","createdTime":"2020-11-23 14:22:39","typeName":"Java","updateTime":"2020-11-23 14:22:39"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":3,"totalPage":1},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-12-25 00:03:21.497 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-12-25 00:03:30.980 INFO  [http-nio-8899-exec-8]com.tqk.blog.aspect.RequestAspect.printRequestLog:115 -请求地址 : /BlAdmin/info
2020-12-25 00:03:30.981 INFO  [http-nio-8899-exec-8]com.tqk.blog.aspect.RequestAspect.printRequestLog:116 -请求方式 : GET
2020-12-25 00:03:30.981 INFO  [http-nio-8899-exec-8]com.tqk.blog.aspect.RequestAspect.printRequestLog:119 -IP : 192.168.101.29
2020-12-25 00:03:30.981 INFO  [http-nio-8899-exec-8]com.tqk.blog.aspect.RequestAspect.printRequestLog:121 -方法 : com.tqk.blog.controller.AdminController.getLoginInfo
2020-12-25 00:03:30.981 INFO  [http-nio-8899-exec-8]com.tqk.blog.aspect.RequestAspect.printRequestLog:123 -请求参数：[]
2020-12-25 00:03:30.982 INFO  [http-nio-8899-exec-8]com.tqk.blog.aspect.RequestAspect.doAround:67 -耗时 : 2
2020-12-25 00:03:30.982 INFO  [http-nio-8899-exec-8]com.tqk.blog.aspect.RequestAspect.doAfterReturning:81 -返回值：{"code":20000,"data":{"name":"田起凯","password":"","signature":"hold on","username":"admin"},"msg":"操作成功！"}
2020-12-25 00:03:31.019 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-12-25 00:03:31.019 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /BlAdmin/info(String), [](String), 1(Integer), null, GET(String), 2(Long), {"code":20000,"data":{"name":"田起凯","password":"","signature":"hold on","username":"admin"},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-12-25 00:03:31.106 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-12-25 00:03:31.346 INFO  [http-nio-8899-exec-9]com.tqk.blog.aspect.RequestAspect.printRequestLog:115 -请求地址 : /type/getList
2020-12-25 00:03:31.346 INFO  [http-nio-8899-exec-10]com.tqk.blog.aspect.RequestAspect.printRequestLog:115 -请求地址 : /blog/getByPage
2020-12-25 00:03:31.346 INFO  [http-nio-8899-exec-9]com.tqk.blog.aspect.RequestAspect.printRequestLog:116 -请求方式 : GET
2020-12-25 00:03:31.347 INFO  [http-nio-8899-exec-9]com.tqk.blog.aspect.RequestAspect.printRequestLog:119 -IP : 192.168.101.29
2020-12-25 00:03:31.347 INFO  [http-nio-8899-exec-9]com.tqk.blog.aspect.RequestAspect.printRequestLog:121 -方法 : com.tqk.blog.controller.TypeController.getList
2020-12-25 00:03:31.347 INFO  [http-nio-8899-exec-10]com.tqk.blog.aspect.RequestAspect.printRequestLog:116 -请求方式 : POST
2020-12-25 00:03:31.347 INFO  [http-nio-8899-exec-9]com.tqk.blog.aspect.RequestAspect.printRequestLog:123 -请求参数：[]
2020-12-25 00:03:31.347 INFO  [http-nio-8899-exec-10]com.tqk.blog.aspect.RequestAspect.printRequestLog:119 -IP : 192.168.101.29
2020-12-25 00:03:31.347 INFO  [http-nio-8899-exec-10]com.tqk.blog.aspect.RequestAspect.printRequestLog:121 -方法 : com.tqk.blog.controller.BlogController.getByPage
2020-12-25 00:03:31.348 INFO  [http-nio-8899-exec-10]com.tqk.blog.aspect.RequestAspect.printRequestLog:123 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-12-25 00:03:31.384 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -==>  Preparing: SELECT type_id,type_name,type_blog_count,enable,deleted FROM bl_type WHERE ( enable = ? and deleted = ? ) 
2020-12-25 00:03:31.384 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -==> Parameters: 1(Integer), 0(Integer)
2020-12-25 00:03:31.424 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image, blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-12-25 00:03:31.424 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -<==      Total: 7
2020-12-25 00:03:31.424 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-12-25 00:03:31.425 INFO  [http-nio-8899-exec-9]com.tqk.blog.aspect.RequestAspect.doAround:67 -耗时 : 79
2020-12-25 00:03:31.425 INFO  [http-nio-8899-exec-9]com.tqk.blog.aspect.RequestAspect.doAfterReturning:81 -返回值：{"code":20000,"data":[{"deleted":0,"enable":1,"typeBlogCount":105,"typeId":1,"typeName":"Java"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"Python"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"going"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"Spring"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"nginx"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":9,"typeName":"Redis"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":10,"typeName":"Docker"}],"msg":"操作成功！"}
2020-12-25 00:03:31.469 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -<==      Total: 3
2020-12-25 00:03:31.470 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-12-25 00:03:31.470 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-12-25 00:03:31.470 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-12-25 00:03:31.470 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 79(Long), {"code":20000,"data":[{"deleted":0,"enable":1,"typeBlogCount":105,"typeId":1,"typeName":"Java"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"Python"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"going"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"Spring"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"nginx"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":9,"typeName":"Redis"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":10,"typeName":"Docker"}],"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-12-25 00:03:32.066 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-12-25 00:03:32.116 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-12-25 00:03:32.137 INFO  [http-nio-8899-exec-10]com.tqk.blog.aspect.RequestAspect.doAround:67 -耗时 : 791
2020-12-25 00:03:32.138 INFO  [http-nio-8899-exec-10]com.tqk.blog.aspect.RequestAspect.doAfterReturning:81 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1324038097171820544","blogImage":"Java","blogRead":0,"blogRemark":"BeanUtils它提供了对java反射和自省API的包装。它里面还有很多工具类，这里我们介绍一下copyProperties。","blogSource":"百度","blogTitle":"BeanUtils.copyProperties的用法","createdTime":"2020-11-04 17:17:33","typeName":"Java","updateTime":"2020-11-22 13:04:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1330877080455553024","blogRead":0,"blogRemark":"MySQL","blogTitle":"面试官不讲武德问我：为什么MySQL不建议使用delete删除数据？","createdTime":"2020-11-23 14:13:16","typeName":"Java","updateTime":"2020-11-23 14:23:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1330879440221315072","blogRead":0,"blogRemark":"面试必备","blogTitle":"Java岗四面字节跳动成功之前，我都刷了那些面试题以及做了那些准备！","createdTime":"2020-11-23 14:22:39","typeName":"Java","updateTime":"2020-11-23 14:22:39"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":3,"totalPage":1},"msg":"操作成功！"}
2020-12-25 00:03:32.180 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-12-25 00:03:32.182 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 791(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1324038097171820544","blogImage":"Java","blogRead":0,"blogRemark":"BeanUtils它提供了对java反射和自省API的包装。它里面还有很多工具类，这里我们介绍一下copyProperties。","blogSource":"百度","blogTitle":"BeanUtils.copyProperties的用法","createdTime":"2020-11-04 17:17:33","typeName":"Java","updateTime":"2020-11-22 13:04:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1330877080455553024","blogRead":0,"blogRemark":"MySQL","blogTitle":"面试官不讲武德问我：为什么MySQL不建议使用delete删除数据？","createdTime":"2020-11-23 14:13:16","typeName":"Java","updateTime":"2020-11-23 14:23:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1330879440221315072","blogRead":0,"blogRemark":"面试必备","blogTitle":"Java岗四面字节跳动成功之前，我都刷了那些面试题以及做了那些准备！","createdTime":"2020-11-23 14:22:39","typeName":"Java","updateTime":"2020-11-23 14:22:39"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":3,"totalPage":1},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-12-25 00:03:32.261 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-12-25 00:03:34.128 INFO  [http-nio-8899-exec-1]com.tqk.blog.aspect.RequestAspect.printRequestLog:115 -请求地址 : /blog/get/1324038097171820544
2020-12-25 00:03:34.129 INFO  [http-nio-8899-exec-1]com.tqk.blog.aspect.RequestAspect.printRequestLog:116 -请求方式 : GET
2020-12-25 00:03:34.130 INFO  [http-nio-8899-exec-1]com.tqk.blog.aspect.RequestAspect.printRequestLog:119 -IP : 192.168.101.29
2020-12-25 00:03:34.131 INFO  [http-nio-8899-exec-1]com.tqk.blog.aspect.RequestAspect.printRequestLog:121 -方法 : com.tqk.blog.controller.BlogController.get
2020-12-25 00:03:34.131 INFO  [http-nio-8899-exec-1]com.tqk.blog.aspect.RequestAspect.printRequestLog:123 -请求参数：[1324038097171820544]
2020-12-25 00:03:34.169 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlBlogMapper.getById.debug:159 -==>  Preparing: select blog_id, blog_title, blog_content, blog_goods, blog_image, blog_read, blog_collection, blog_type, blog_remark, blog_comment, blog_source, created_time, version from bl_blog where blog_id = ? and deleted = 0 
2020-12-25 00:03:34.169 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlBlogMapper.getById.debug:159 -==> Parameters: 1324038097171820544(String)
2020-12-25 00:03:34.223 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlBlogMapper.getById.debug:159 -<==      Total: 1
2020-12-25 00:03:34.224 INFO  [http-nio-8899-exec-1]com.tqk.blog.aspect.RequestAspect.doAround:67 -耗时 : 96
2020-12-25 00:03:34.224 INFO  [http-nio-8899-exec-1]com.tqk.blog.aspect.RequestAspect.doAfterReturning:81 -返回值：{"code":20000,"data":{"blogCollection":0,"blogComment":0,"blogContent":"BeanUtils.copyProperties(a, b);b中的存在的属性，a中一定要有，但是a中可以有多余的属性；a中与b中相同的属性都会被替换，不管是否有值；a、 b中的属性要名字相同，才能被赋值，不然的话需要手动赋值；Spring的BeanUtils的CopyProperties方法需要对应的属性有getter和setter方法；如果存在属性完全相同的内部类，但是不是同一个内部类，即分别属于各自的内部类，则spring会认为属性不同，不会copy；spring和apache的copy属性的方法源和目的参数的位置正好相反，所以导包和调用的时候都要注意一下。","blogGoods":0,"blogId":"1324038097171820544","blogImage":"Java","blogRead":0,"blogRemark":"BeanUtils它提供了对java反射和自省API的包装。它里面还有很多工具类，这里我们介绍一下copyProperties。","blogSource":"百度","blogTitle":"BeanUtils.copyProperties的用法","blogType":1,"createdTime":1604481453000,"version":2},"msg":"操作成功！"}
2020-12-25 00:03:34.262 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-12-25 00:03:34.263 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/get/1324038097171820544(String), [1324038097171820544](String), 1(Integer), null, GET(String), 96(Long), {"code":20000,"data":{"blogCollection":0,"blogComment":0,"blogContent":"BeanUtils.copyProperties(a, b);b中的存在的属性，a中一定要有，但是a中可以有多余的属性；a中与b中相同的属性都会被替换，不管是否有值；a、 b中的属性要名字相同，才能被赋值，不然的话需要手动赋值；Spring的BeanUtils的CopyProperties方法需要对应的属性有getter和setter方法；如果存在属性完全相同的内部类，但是不是同一个内部类，即分别属于各自的内部类，则spring会认为属性不同，不会copy；spring和apache的copy属性的方法源和目的参数的位置正好相反，所以导包和调用的时候都要注意一下。","blogGoods":0,"blogId":"1324038097171820544","blogImage":"Java","blogRead":0,"blogRemark":"BeanUtils它提供了对java反射和自省API的包装。它里面还有很多工具类，这里我们介绍一下copyProperties。","blogSource":"百度","blogTitle":"BeanUtils.copyProperties的用法","blogType":1,"createdTime":1604481453000,"version":2},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-12-25 00:03:34.352 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-12-25 00:04:48.085 INFO  [http-nio-8899-exec-3]com.tqk.blog.aspect.RequestAspect.printRequestLog:115 -请求地址 : /BlAdmin/info
2020-12-25 00:04:48.085 INFO  [http-nio-8899-exec-3]com.tqk.blog.aspect.RequestAspect.printRequestLog:116 -请求方式 : GET
2020-12-25 00:04:48.086 INFO  [http-nio-8899-exec-3]com.tqk.blog.aspect.RequestAspect.printRequestLog:119 -IP : 192.168.101.29
2020-12-25 00:04:48.086 INFO  [http-nio-8899-exec-3]com.tqk.blog.aspect.RequestAspect.printRequestLog:121 -方法 : com.tqk.blog.controller.AdminController.getLoginInfo
2020-12-25 00:04:48.086 INFO  [http-nio-8899-exec-3]com.tqk.blog.aspect.RequestAspect.printRequestLog:123 -请求参数：[]
2020-12-25 00:04:48.087 INFO  [http-nio-8899-exec-3]com.tqk.blog.aspect.RequestAspect.doAround:67 -耗时 : 2
2020-12-25 00:04:48.087 INFO  [http-nio-8899-exec-3]com.tqk.blog.aspect.RequestAspect.doAfterReturning:81 -返回值：{"code":20000,"data":{"name":"田起凯","password":"","signature":"hold on","username":"admin"},"msg":"操作成功！"}
2020-12-25 00:04:48.129 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-12-25 00:04:48.130 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /BlAdmin/info(String), [](String), 1(Integer), null, GET(String), 2(Long), {"code":20000,"data":{"name":"田起凯","password":"","signature":"hold on","username":"admin"},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-12-25 00:04:48.214 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-12-25 00:04:48.461 INFO  [http-nio-8899-exec-4]com.tqk.blog.aspect.RequestAspect.printRequestLog:115 -请求地址 : /blog/getByPage
2020-12-25 00:04:48.462 INFO  [http-nio-8899-exec-4]com.tqk.blog.aspect.RequestAspect.printRequestLog:116 -请求方式 : POST
2020-12-25 00:04:48.463 INFO  [http-nio-8899-exec-4]com.tqk.blog.aspect.RequestAspect.printRequestLog:119 -IP : 192.168.101.29
2020-12-25 00:04:48.463 INFO  [http-nio-8899-exec-4]com.tqk.blog.aspect.RequestAspect.printRequestLog:121 -方法 : com.tqk.blog.controller.BlogController.getByPage
2020-12-25 00:04:48.463 INFO  [http-nio-8899-exec-2]com.tqk.blog.aspect.RequestAspect.printRequestLog:115 -请求地址 : /type/getList
2020-12-25 00:04:48.463 INFO  [http-nio-8899-exec-4]com.tqk.blog.aspect.RequestAspect.printRequestLog:123 -请求参数：[Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)]
2020-12-25 00:04:48.464 INFO  [http-nio-8899-exec-2]com.tqk.blog.aspect.RequestAspect.printRequestLog:116 -请求方式 : GET
2020-12-25 00:04:48.464 INFO  [http-nio-8899-exec-2]com.tqk.blog.aspect.RequestAspect.printRequestLog:119 -IP : 192.168.101.29
2020-12-25 00:04:48.464 INFO  [http-nio-8899-exec-2]com.tqk.blog.aspect.RequestAspect.printRequestLog:121 -方法 : com.tqk.blog.controller.TypeController.getList
2020-12-25 00:04:48.464 INFO  [http-nio-8899-exec-2]com.tqk.blog.aspect.RequestAspect.printRequestLog:123 -请求参数：[]
2020-12-25 00:04:48.502 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -==>  Preparing: SELECT type_id,type_name,type_blog_count,enable,deleted FROM bl_type WHERE ( enable = ? and deleted = ? ) 
2020-12-25 00:04:48.503 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -==> Parameters: 1(Integer), 0(Integer)
2020-12-25 00:04:48.534 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image, blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-12-25 00:04:48.535 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-12-25 00:04:48.587 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -<==      Total: 7
2020-12-25 00:04:48.588 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -<==      Total: 3
2020-12-25 00:04:48.588 INFO  [http-nio-8899-exec-2]com.tqk.blog.aspect.RequestAspect.doAround:67 -耗时 : 125
2020-12-25 00:04:48.588 INFO  [http-nio-8899-exec-2]com.tqk.blog.aspect.RequestAspect.doAfterReturning:81 -返回值：{"code":20000,"data":[{"deleted":0,"enable":1,"typeBlogCount":105,"typeId":1,"typeName":"Java"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"Python"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"going"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"Spring"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"nginx"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":9,"typeName":"Redis"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":10,"typeName":"Docker"}],"msg":"操作成功！"}
2020-12-25 00:04:48.588 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-12-25 00:04:48.589 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-12-25 00:04:48.623 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-12-25 00:04:48.627 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-12-25 00:04:48.628 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 125(Long), {"code":20000,"data":[{"deleted":0,"enable":1,"typeBlogCount":105,"typeId":1,"typeName":"Java"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"Python"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"going"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"Spring"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":8,"typeName":"nginx"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":9,"typeName":"Redis"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":10,"typeName":"Docker"}],"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-12-25 00:04:48.694 INFO  [http-nio-8899-exec-4]com.tqk.blog.aspect.RequestAspect.doAround:67 -耗时 : 233
2020-12-25 00:04:48.695 INFO  [http-nio-8899-exec-4]com.tqk.blog.aspect.RequestAspect.doAfterReturning:81 -返回值：{"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1324038097171820544","blogImage":"Java","blogRead":0,"blogRemark":"BeanUtils它提供了对java反射和自省API的包装。它里面还有很多工具类，这里我们介绍一下copyProperties。","blogSource":"百度","blogTitle":"BeanUtils.copyProperties的用法","createdTime":"2020-11-04 17:17:33","typeName":"Java","updateTime":"2020-11-22 13:04:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1330877080455553024","blogRead":0,"blogRemark":"MySQL","blogTitle":"面试官不讲武德问我：为什么MySQL不建议使用delete删除数据？","createdTime":"2020-11-23 14:13:16","typeName":"Java","updateTime":"2020-11-23 14:23:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1330879440221315072","blogRead":0,"blogRemark":"面试必备","blogTitle":"Java岗四面字节跳动成功之前，我都刷了那些面试题以及做了那些准备！","createdTime":"2020-11-23 14:22:39","typeName":"Java","updateTime":"2020-11-23 14:22:39"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":3,"totalPage":1},"msg":"操作成功！"}
2020-12-25 00:04:48.719 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-12-25 00:04:48.734 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-12-25 00:04:48.736 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 233(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1324038097171820544","blogImage":"Java","blogRead":0,"blogRemark":"BeanUtils它提供了对java反射和自省API的包装。它里面还有很多工具类，这里我们介绍一下copyProperties。","blogSource":"百度","blogTitle":"BeanUtils.copyProperties的用法","createdTime":"2020-11-04 17:17:33","typeName":"Java","updateTime":"2020-11-22 13:04:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1330877080455553024","blogRead":0,"blogRemark":"MySQL","blogTitle":"面试官不讲武德问我：为什么MySQL不建议使用delete删除数据？","createdTime":"2020-11-23 14:13:16","typeName":"Java","updateTime":"2020-11-23 14:23:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1330879440221315072","blogRead":0,"blogRemark":"面试必备","blogTitle":"Java岗四面字节跳动成功之前，我都刷了那些面试题以及做了那些准备！","createdTime":"2020-11-23 14:22:39","typeName":"Java","updateTime":"2020-11-23 14:22:39"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":3,"totalPage":1},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-12-25 00:04:48.826 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-12-25 00:04:50.622 INFO  [http-nio-8899-exec-5]com.tqk.blog.aspect.RequestAspect.printRequestLog:115 -请求地址 : /blog/get/1324038097171820544
2020-12-25 00:04:50.623 INFO  [http-nio-8899-exec-5]com.tqk.blog.aspect.RequestAspect.printRequestLog:116 -请求方式 : GET
2020-12-25 00:04:50.623 INFO  [http-nio-8899-exec-5]com.tqk.blog.aspect.RequestAspect.printRequestLog:119 -IP : 192.168.101.29
2020-12-25 00:04:50.624 INFO  [http-nio-8899-exec-5]com.tqk.blog.aspect.RequestAspect.printRequestLog:121 -方法 : com.tqk.blog.controller.BlogController.get
2020-12-25 00:04:50.625 INFO  [http-nio-8899-exec-5]com.tqk.blog.aspect.RequestAspect.printRequestLog:123 -请求参数：[1324038097171820544]
2020-12-25 00:04:50.661 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlBlogMapper.getById.debug:159 -==>  Preparing: select blog_id, blog_title, blog_content, blog_goods, blog_image, blog_read, blog_collection, blog_type, blog_remark, blog_comment, blog_source, created_time, version from bl_blog where blog_id = ? and deleted = 0 
2020-12-25 00:04:50.662 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlBlogMapper.getById.debug:159 -==> Parameters: 1324038097171820544(String)
2020-12-25 00:04:50.700 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlBlogMapper.getById.debug:159 -<==      Total: 1
2020-12-25 00:04:50.702 INFO  [http-nio-8899-exec-5]com.tqk.blog.aspect.RequestAspect.doAround:67 -耗时 : 80
2020-12-25 00:04:50.702 INFO  [http-nio-8899-exec-5]com.tqk.blog.aspect.RequestAspect.doAfterReturning:81 -返回值：{"code":20000,"data":{"blogCollection":0,"blogComment":0,"blogContent":"BeanUtils.copyProperties(a, b);b中的存在的属性，a中一定要有，但是a中可以有多余的属性；a中与b中相同的属性都会被替换，不管是否有值；a、 b中的属性要名字相同，才能被赋值，不然的话需要手动赋值；Spring的BeanUtils的CopyProperties方法需要对应的属性有getter和setter方法；如果存在属性完全相同的内部类，但是不是同一个内部类，即分别属于各自的内部类，则spring会认为属性不同，不会copy；spring和apache的copy属性的方法源和目的参数的位置正好相反，所以导包和调用的时候都要注意一下。","blogGoods":0,"blogId":"1324038097171820544","blogImage":"Java","blogRead":0,"blogRemark":"BeanUtils它提供了对java反射和自省API的包装。它里面还有很多工具类，这里我们介绍一下copyProperties。","blogSource":"百度","blogTitle":"BeanUtils.copyProperties的用法","blogType":1,"createdTime":1604481453000,"version":2},"msg":"操作成功！"}
2020-12-25 00:04:50.742 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-12-25 00:04:50.744 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/get/1324038097171820544(String), [1324038097171820544](String), 1(Integer), null, GET(String), 80(Long), {"code":20000,"data":{"blogCollection":0,"blogComment":0,"blogContent":"BeanUtils.copyProperties(a, b);b中的存在的属性，a中一定要有，但是a中可以有多余的属性；a中与b中相同的属性都会被替换，不管是否有值；a、 b中的属性要名字相同，才能被赋值，不然的话需要手动赋值；Spring的BeanUtils的CopyProperties方法需要对应的属性有getter和setter方法；如果存在属性完全相同的内部类，但是不是同一个内部类，即分别属于各自的内部类，则spring会认为属性不同，不会copy；spring和apache的copy属性的方法源和目的参数的位置正好相反，所以导包和调用的时候都要注意一下。","blogGoods":0,"blogId":"1324038097171820544","blogImage":"Java","blogRead":0,"blogRemark":"BeanUtils它提供了对java反射和自省API的包装。它里面还有很多工具类，这里我们介绍一下copyProperties。","blogSource":"百度","blogTitle":"BeanUtils.copyProperties的用法","blogType":1,"createdTime":1604481453000,"version":2},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-12-25 00:04:50.828 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-12-25 00:04:54.950 INFO  [http-nio-8899-exec-6]com.tqk.blog.aspect.RequestAspect.printRequestLog:115 -请求地址 : /blog/get/1330877080455553024
2020-12-25 00:04:54.951 INFO  [http-nio-8899-exec-6]com.tqk.blog.aspect.RequestAspect.printRequestLog:116 -请求方式 : GET
2020-12-25 00:04:54.952 INFO  [http-nio-8899-exec-6]com.tqk.blog.aspect.RequestAspect.printRequestLog:119 -IP : 192.168.101.29
2020-12-25 00:04:54.952 INFO  [http-nio-8899-exec-6]com.tqk.blog.aspect.RequestAspect.printRequestLog:121 -方法 : com.tqk.blog.controller.BlogController.get
2020-12-25 00:04:54.953 INFO  [http-nio-8899-exec-6]com.tqk.blog.aspect.RequestAspect.printRequestLog:123 -请求参数：[1330877080455553024]
2020-12-25 00:04:54.992 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlBlogMapper.getById.debug:159 -==>  Preparing: select blog_id, blog_title, blog_content, blog_goods, blog_image, blog_read, blog_collection, blog_type, blog_remark, blog_comment, blog_source, created_time, version from bl_blog where blog_id = ? and deleted = 0 
2020-12-25 00:04:54.993 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlBlogMapper.getById.debug:159 -==> Parameters: 1330877080455553024(String)
2020-12-25 00:04:55.137 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlBlogMapper.getById.debug:159 -<==      Total: 1
2020-12-25 00:04:55.138 INFO  [http-nio-8899-exec-6]com.tqk.blog.aspect.RequestAspect.doAround:67 -耗时 : 188
2020-12-25 00:04:55.140 INFO  [http-nio-8899-exec-6]com.tqk.blog.aspect.RequestAspect.doAfterReturning:81 -返回值：{"code":20000,"data":{"blogCollection":0,"blogComment":0,"blogContent":"<h2>前言</h2>\n<p>我负责的有几个系统随着业务量的增长，存储在MySQL中的数据日益剧增，我当时就想现在的业务方不讲武德，搞偷袭，趁我没反应过来把很多表，很快，很快啊都打到了亿级别，我大意了，没有闪，这就导致跟其Join的表的SQL变得很慢，对的应用接口的response time也变长了，影响了用户体验。</p>\n<p>事后我找到业务方，我批评了他们跟他们说要讲武德，连忙跟我道歉，这个事情才就此作罢，走的时候我对他们说下次不要这样了，耗子尾汁，好好反思。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/3c93aececcb9e763f5476362c4e88710.png\" alt=\"\" /></p>\n<p>骂归骂，事情还是得解决，时候我分析原因发现，发现有些表的数据量增长很快，对应SQL扫描了很多无效数据，导致SQL慢了下来，通过确认之后，这些大表都是一些流水、记录、日志类型数据，只需要保留1到3个月，此时需要对表做数据清理实现瘦身，一般都会想到用insert + delete的方式去清理。</p>\n<p>这篇文章我会从InnoDB存储空间分布，delete对性能的影响，以及优化建议方面解释为什么不建议delete删除数据。</p>\n<h2><a name=\"t1\"></a><a name=\"t1\"></a><a id=\"InnoDB_16\"></a>InnoDB存储架构</h2>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/5c66ffe9749c58e1613d2519f7ea7211.png\" alt=\"\" /></p>\n<p>从这张图可以看到，InnoDB存储结构主要包括两部分：逻辑存储结构和物理存储结构。</p>\n<p>逻辑上是由表空间tablespace &mdash;&gt; 段segment或者inode &mdash;&gt; 区Extent &mdash;&mdash;&gt;数据页Page构成，Innodb逻辑管理单位是segment，空间分配的最小单位是extent，每个segment都会从表空间FREE_PAGE中分配32个page，当这32个page不够用时，会按照以下原则进行扩展：如果当前小于1个extent，则扩展到1个extent；当表空间小于32MB时，每次扩展一个extent；表空间大于32MB，每次扩展4个extent。</p>\n<p>物理上主要由系统用户数据文件，日志文件组成，数据文件主要存储MySQL字典数据和用户数据，日志文件记录的是data page的变更记录，用于MySQL Crash时的恢复。</p>\n<h2><a name=\"t2\"></a><a name=\"t2\"></a><a id=\"Innodb_26\"></a>Innodb表空间</h2>\n<p>InnoDB存储包括三类表空间：系统表空间，用户表空间，Undo表空间。</p>\n<p><strong>系统表空间：</strong>&nbsp;主要存储MySQL内部的数据字典数据，如information_schema下的数据。</p>\n<p><strong>用户表空间：</strong>&nbsp;当开启innodb_file_per_table=1时，数据表从系统表空间独立出来存储在以table_name.ibd命令的数据文件中，结构信息存储在table_name.frm文件中。</p>\n<p><strong>Undo表空间：</strong>&nbsp;存储Undo信息，如快照一致读和flashback都是利用undo信息。</p>\n<p>从MySQL 8.0开始允许用户自定义表空间，具体语法如下：</p>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">CREATE TABLESPACE tablespace_name\n    ADD DATAFILE 'file_name'               #数据文件名\n    USE LOGFILE GROUP logfile_group        #自定义日志文件组，一般每组2个logfile。\n    [EXTENT_SIZE [=] extent_size]          #区大小\n    [INITIAL_SIZE [=] initial_size]        #初始化大小 \n    [AUTOEXTEND_SIZE [=] autoextend_size]  #自动扩宽尺寸\n    [MAX_SIZE [=] max_size]                #单个文件最大size，最大是32G。\n    [NODEGROUP [=] nodegroup_id]           #节点组\n    [WAIT]\n    [COMMENT [=] comment_text]\n    ENGINE [=] engine_name\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n</ul>\n<p>这样的好处是可以做到数据的冷热分离，分别用HDD和SSD来存储，既能实现数据的高效访问，又能节约成本，比如可以添加两块500G硬盘，经过创建卷组vg，划分逻辑卷lv，创建数据目录并mount相应的lv，假设划分的两个目录分别是/hot_data 和 /cold_data。</p>\n<p>这样就可以将核心的业务表如用户表，订单表存储在高性能SSD盘上，一些日志，流水表存储在普通的HDD上，主要的操作步骤如下：</p>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">#创建热数据表空间\ncreate tablespace tbs_data_hot add datafile '/hot_data/tbs_data_hot01.dbf' max_size 20G;\n#创建核心业务表存储在热数据表空间\ncreate table booking(id bigint not null primary key auto_increment, &hellip;&hellip; ) tablespace tbs_data_hot;\n#创建冷数据表空间\ncreate tablespace tbs_data_cold add datafile '/hot_data/tbs_data_cold01.dbf' max_size 20G;\n#创建日志，流水，备份类的表存储在冷数据表空间\ncreate table payment_log(id bigint not null primary key auto_increment, &hellip;&hellip; ) tablespace tbs_data_cold;\n#可以移动表到另一个表空间\nalter table payment_log tablespace tbs_data_hot;\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n</ul>\n<h2><a name=\"t3\"></a><a name=\"t3\"></a><a id=\"Inndob_69\"></a>Inndob存储分布</h2>\n<h3><a name=\"t4\"></a><a name=\"t4\"></a><a id=\"_71\"></a>创建空表查看空间变化</h3>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">mysql&gt; create table user(id bigint not null primary key auto_increment, \n    -&gt; name varchar(20) not null default '' comment '姓名', \n    -&gt; age tinyint not null default 0 comment 'age', \n    -&gt; gender char(1) not null default 'M'  comment '性别',\n    -&gt; phone varchar(16) not null default '' comment '手机号',\n    -&gt; create_time datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',\n    -&gt; update_time datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间'\n    -&gt; ) engine = InnoDB DEFAULT CHARSET=utf8mb4 COMMENT '用户信息表';\nQuery OK, 0 rows affected (0.26 sec)\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n</ul>\n<pre class=\"prettyprint\"><code class=\"prism language-bash has-numbering\"><span class=\"token comment\"># ls -lh user1.ibd </span>\n-rw-r----- 1 mysql mysql 96K Nov  6 12:48 user.ibd\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n</ul>\n<p>设置参数innodb_file_per_table=1时，创建表时会自动创建一个segment，同时分配一个extent，包含32个data page的来存储数据，这样创建的空表默认大小就是96KB，extent使用完之后会申请64个连接页，这样对于一些小表，或者undo segment，可以在开始时申请较少的空间，节省磁盘容量的开销。</p>\n<pre class=\"prettyprint\"><code class=\"prism language-shell has-numbering\"><span class=\"token comment\"># python2 py_innodb_page_info.py -v /data2/mysql/test/user.ibd</span>\npage offset 00000000, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>File Space Header<span class=\"token operator\">&gt;</span>\npage offset 00000001, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>Insert Buffer Bitmap<span class=\"token operator\">&gt;</span>\npage offset 00000002, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>File Segment inode<span class=\"token operator\">&gt;</span>\npage offset 00000003, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>B-tree Node<span class=\"token operator\">&gt;</span>, page level <span class=\"token operator\">&lt;</span>0000<span class=\"token operator\">&gt;</span>\npage offset 00000000, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>Freshly Allocated Page<span class=\"token operator\">&gt;</span>\npage offset 00000000, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>Freshly Allocated Page<span class=\"token operator\">&gt;</span>\nTotal number of page: 6:      <span class=\"token comment\">#总共分配的页数</span>\nFreshly Allocated Page: 2     <span class=\"token comment\">#可用的数据页</span>\nInsert Buffer Bitmap: 1       <span class=\"token comment\">#插入缓冲页</span>\nFile Space Header: 1          <span class=\"token comment\">#文件空间头</span>\nB-tree Node: 1                <span class=\"token comment\">#数据页</span>\nFile Segment inode: 1         <span class=\"token comment\">#文件端inonde，如果是在ibdata1.ibd上会有多个inode。</span>\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n</ul>\n<h3><a name=\"t5\"></a><a name=\"t5\"></a><a id=\"_108\"></a>插入数据后的空间变化</h3>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">mysql&gt; DELIMITER $$\nmysql&gt; CREATE PROCEDURE insert_user_data(num INTEGER) \n    -&gt; BEGIN\n    -&gt;     DECLARE v_i int unsigned DEFAULT 0;\n    -&gt; set autocommit= 0;\n    -&gt; WHILE v_i &lt; num DO\n    -&gt;    insert into user(`name`, age, gender, phone) values (CONCAT('lyn',v_i), mod(v_i,120), 'M', CONCAT('152',ROUND(RAND(1)*100000000)));\n    -&gt;  SET v_i = v_i+1;\n    -&gt; END WHILE;\n    -&gt; commit;\n    -&gt; END $$\nQuery OK, 0 rows affected (0.01 sec)\nmysql&gt; DELIMITER ;\n\n#插入10w数据\nmysql&gt; call insert_user_data(100000);\nQuery OK, 0 rows affected (6.69 sec)\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n<li>17</li>\n</ul>\n<pre class=\"prettyprint\"><code class=\"prism language-shell has-numbering\"><span class=\"token comment\"># ls -lh user.ibd</span>\n-rw-r----- 1 mysql mysql 14M Nov 6 10:58 /data2/mysql/test/user.ibd\n\n<span class=\"token comment\"># python2 py_innodb_page_info.py -v /data2/mysql/test/user.ibd</span>\npage offset 00000000, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>File Space Header<span class=\"token operator\">&gt;</span>\npage offset 00000001, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>Insert Buffer Bitmap<span class=\"token operator\">&gt;</span>\npage offset 00000002, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>File Segment inode<span class=\"token operator\">&gt;</span>\npage offset 00000003, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>B-tree Node<span class=\"token operator\">&gt;</span>, page level <span class=\"token operator\">&lt;</span>0001<span class=\"token operator\">&gt;</span>   <span class=\"token comment\">#增加了一个非叶子节点，树的高度从1变为2.</span>\n<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>\npage offset 00000000, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>Freshly Allocated Page<span class=\"token operator\">&gt;</span>\nTotal number of page: 896:\nFreshly Allocated Page: 493\nInsert Buffer Bitmap: 1\nFile Space Header: 1\nB-tree Node: 400\nFile Segment inode: 1\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n</ul>\n<h3><a name=\"t6\"></a><a name=\"t6\"></a><a id=\"delete_149\"></a>delete数据后的空间变化</h3>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">mysql&gt; select min(id),max(id),count(*) from user;\n+---------+---------+----------+\n| min(id) | max(id) | count(*) |\n+---------+---------+----------+\n|       1 |  100000 |   100000 |\n+---------+---------+----------+\n1 row in set (0.05 sec)\n#删除50000条数据，理论上空间应该从14MB变长7MB左右。\nmysql&gt; delete from user limit 50000;\nQuery OK, 50000 rows affected (0.25 sec)\n\n#数据文件大小依然是14MB，没有缩小。\n# ls -lh /data2/mysql/test/user1.ibd \n-rw-r----- 1 mysql mysql 14M Nov  6 13:22 /data2/mysql/test/user.ibd\n\n#数据页没有被回收。\n# python2 py_innodb_page_info.py -v /data2/mysql/test/user.ibd\npage offset 00000000, page type &lt;File Space Header&gt;\npage offset 00000001, page type &lt;Insert Buffer Bitmap&gt;\npage offset 00000002, page type &lt;File Segment inode&gt;\npage offset 00000003, page type &lt;B-tree Node&gt;, page level &lt;0001&gt;\n........................................................\npage offset 00000000, page type &lt;Freshly Allocated Page&gt;\nTotal number of page: 896:\nFreshly Allocated Page: 493\nInsert Buffer Bitmap: 1\nFile Space Header: 1\nB-tree Node: 400\nFile Segment inode: 1\n#在MySQL内部是标记删除，\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n<li>17</li>\n<li>18</li>\n<li>19</li>\n<li>20</li>\n<li>21</li>\n<li>22</li>\n<li>23</li>\n<li>24</li>\n<li>25</li>\n<li>26</li>\n<li>27</li>\n<li>28</li>\n<li>29</li>\n<li>30</li>\n</ul>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">mysql&gt; use information_schema;\n\nDatabase changed\nmysql&gt; SELECT A.SPACE AS TBL_SPACEID, A.TABLE_ID, A.NAME AS TABLE_NAME, FILE_FORMAT, ROW_FORMAT, SPACE_TYPE,  B.INDEX_ID , B.NAME AS INDEX_NAME, PAGE_NO, B.TYPE AS INDEX_TYPE FROM INNODB_SYS_TABLES A LEFT JOIN INNODB_SYS_INDEXES B ON A.TABLE_ID =B.TABLE_ID WHERE A.NAME = 'test/user1';\n+-------------+----------+------------+-------------+------------+------------+----------+------------+---------+------------+\n| TBL_SPACEID | TABLE_ID | TABLE_NAME | FILE_FORMAT | ROW_FORMAT | SPACE_TYPE | INDEX_ID | INDEX_NAME | PAGE_NO | INDEX_TYPE |\n+-------------+----------+------------+-------------+------------+------------+----------+------------+---------+------------+\n|        1283 |     1207 | test/user | Barracuda   | Dynamic    | Single     |     2236 | PRIMARY    |       3 |          3 |\n+-------------+----------+------------+-------------+------------+------------+----------+------------+---------+------------+\n1 row in set (0.01 sec)\n\nPAGE_NO = 3 标识B-tree的root page是3号页，INDEX_TYPE = 3是聚集索引。 INDEX_TYPE取值如下：\n0 = nonunique secondary index; \n1 = automatically generated clustered index (GEN_CLUST_INDEX); \n2 = unique nonclustered index; \n3 = clustered index; \n32 = full-text index;\n#收缩空间再后进行观察\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n<li>17</li>\n<li>18</li>\n</ul>\n<p>MySQL内部不会真正删除空间，而且做标记删除，即将delflag:N修改为delflag:Y，commit之后会会被purge进入删除链表，如果下一次insert更大的记录，delete之后的空间不会被重用，如果插入的记录小于等于delete的记录空会被重用，这块内容可以通过知数堂的innblock工具进行分析。</p>\n<h2><a name=\"t7\"></a><a name=\"t7\"></a><a id=\"Innodb_207\"></a>Innodb中的碎片</h2>\n<h3><a name=\"t8\"></a><a name=\"t8\"></a><a id=\"_209\"></a>碎片的产生</h3>\n<p>我们知道数据存储在文件系统上的，总是不能100%利用分配给它的物理空间，删除数据会在页面上留下一些&rdquo;空洞&rdquo;，或者随机写入（聚集索引非线性增加）会导致页分裂，页分裂导致页面的利用空间少于50%，另外对表进行增删改会引起对应的二级索引值的随机的增删改，也会导致索引结构中的数据页面上留下一些\"空洞\"，虽然这些空洞有可能会被重复利用，但终究会导致部分物理空间未被使用，也就是碎片。</p>\n<p>同时，即便是设置了填充因子为100%，Innodb也会主动留下page页面1/16的空间作为预留使用（An innodb_fill_factor setting of 100 leaves 1/16 of the space in clustered index pages free for future index growth）防止update带来的行溢出。</p>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">mysql&gt; select table_schema,\n    -&gt;        table_name,ENGINE,\n    -&gt;        round(DATA_LENGTH/1024/1024+ INDEX_LENGTH/1024/1024) total_mb,TABLE_ROWS,\n    -&gt;        round(DATA_LENGTH/1024/1024) data_mb, round(INDEX_LENGTH/1024/1024) index_mb, round(DATA_FREE/1024/1024) free_mb, round(DATA_FREE/DATA_LENGTH*100,2) free_ratio\n    -&gt; from information_schema.TABLES where  TABLE_SCHEMA= 'test'\n    -&gt; and TABLE_NAME= 'user';\n+--------------+------------+--------+----------+------------+---------+----------+---------+------------+\n| table_schema | table_name | ENGINE | total_mb | TABLE_ROWS | data_mb | index_mb | free_mb | free_ratio |\n+--------------+------------+--------+----------+------------+---------+----------+---------+------------+\n| test         | user      | InnoDB |        4 |      50000 |       4 |        0 |       6 |     149.42 |\n+--------------+------------+--------+----------+------------+---------+----------+---------+------------+\n1 row in set (0.00 sec)\n\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n</ul>\n<p>其中data_free是分配了未使用的字节数，并不能说明完全是碎片空间。</p>\n<h3><a name=\"t9\"></a><a name=\"t9\"></a><a id=\"_233\"></a>碎片的回收</h3>\n<p>对于InnoDB的表，可以通过以下命令来回收碎片，释放空间，这个是随机读IO操作，会比较耗时，也会阻塞表上正常的DML运行，同时需要占用额外更多的磁盘空间，对于RDS来说，可能会导致磁盘空间瞬间爆满，实例瞬间被锁定，应用无法做DML操作，所以禁止在线上环境去执行。</p>\n<pre class=\"prettyprint\"><code class=\"prism language-shell has-numbering\"><span class=\"token comment\">#执行InnoDB的碎片回收</span>\nmysql<span class=\"token operator\">&gt;</span> alter table user engine<span class=\"token operator\">=</span>InnoDB<span class=\"token punctuation\">;</span>\nQuery OK, 0 rows affected <span class=\"token punctuation\">(</span>9.00 sec<span class=\"token punctuation\">)</span>\nRecords: 0  Duplicates: 0  Warnings: 0\n\n<span class=\"token comment\">##执行完之后，数据文件大小从14MB降低到10M。</span>\n<span class=\"token comment\"># ls -lh /data2/mysql/test/user1.ibd </span>\n-rw-r----- 1 mysql mysql 10M Nov 6 16:18 /data2/mysql/test/user.ibd\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n</ul>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">mysql&gt; select table_schema,        table_name,ENGINE,        round(DATA_LENGTH/1024/1024+ INDEX_LENGTH/1024/1024) total_mb,TABLE_ROWS,        round(DATA_LENGTH/1024/1024) data_mb, round(INDEX_LENGTH/1024/1024) index_mb, round(DATA_FREE/1024/1024) free_mb, round(DATA_FREE/DATA_LENGTH*100,2) free_ratio from information_schema.TABLES where  TABLE_SCHEMA= 'test' and TABLE_NAME= 'user';\n+--------------+------------+--------+----------+------------+---------+----------+---------+------------+\n| table_schema | table_name | ENGINE | total_mb | TABLE_ROWS | data_mb | index_mb | free_mb | free_ratio |\n+--------------+------------+--------+----------+------------+---------+----------+---------+------------+\n| test         | user      | InnoDB |        5 |      50000 |       5 |        0 |       2 |      44.29 |\n+--------------+------------+--------+----------+------------+---------+----------+---------+------------+\n1 row in set (0.00 sec)\n\n\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n</ul>\n<h2><a name=\"t10\"></a><a name=\"t10\"></a><a id=\"deleteSQL_260\"></a>delete对SQL的影响</h2>\n<h3><a name=\"t11\"></a><a name=\"t11\"></a><a id=\"SQL_262\"></a>未删除前的SQL执行情况</h3>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">#插入100W数据\nmysql&gt; call insert_user_data(1000000);\nQuery OK, 0 rows affected (35.99 sec)\n\n#添加相关索引\nmysql&gt; alter table user add index idx_name(name), add index idx_phone(phone);\nQuery OK, 0 rows affected (6.00 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\n#表上索引统计信息\nmysql&gt; show index from user;\n+-------+------------+-----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+\n| Table | Non_unique | Key_name  | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment |\n+-------+------------+-----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+\n| user  |          0 | PRIMARY   |            1 | id          | A         |      996757 |     NULL | NULL   |      | BTREE      |         |               |\n| user  |          1 | idx_name  |            1 | name        | A         |      996757 |     NULL | NULL   |      | BTREE      |         |               |\n| user  |          1 | idx_phone |            1 | phone       | A         |           2 |     NULL | NULL   |      | BTREE      |         |               |\n+-------+------------+-----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+\n3 rows in set (0.00 sec)\n\n#重置状态变量计数\nmysql&gt; flush status;\nQuery OK, 0 rows affected (0.00 sec)\n\n#执行SQL语句\nmysql&gt; select id, age ,phone from user where name like 'lyn12%';\n+--------+-----+-------------+\n| id     | age | phone       |\n+--------+-----+-------------+\n|    124 |   3 | 15240540354 |\n|   1231 |  30 | 15240540354 |\n|  12301 |  60 | 15240540354 |\n.............................\n| 129998 |  37 | 15240540354 |\n| 129999 |  38 | 15240540354 |\n| 130000 |  39 | 15240540354 |\n+--------+-----+-------------+\n11111 rows in set (0.03 sec)\n\nmysql&gt; explain select id, age ,phone from user where name like 'lyn12%';\n+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+\n| id | select_type | table | type  | possible_keys | key      | key_len | ref  | rows  | Extra                 |\n+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+\n|  1 | SIMPLE      | user  | range | idx_name      | idx_name | 82      | NULL | 22226 | Using index condition |\n+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+\n1 row in set (0.00 sec)\n\n#查看相关状态呢变量\nmysql&gt; select * from information_schema.session_status where variable_name in('Last_query_cost','Handler_read_next','Innodb_pages_read','Innodb_data_reads','Innodb_pages_read');\n+-------------------+----------------+\n| VARIABLE_NAME     | VARIABLE_VALUE |\n+-------------------+----------------+\n| HANDLER_READ_NEXT | 11111          |    #请求读的行数\n| INNODB_DATA_READS | 7868409        |    #数据物理读的总数\n| INNODB_PAGES_READ | 7855239        |    #逻辑读的总数\n| LAST_QUERY_COST   | 10.499000      |    #SQL语句的成本COST，主要包括IO_COST和CPU_COST。\n+-------------------+----------------+\n4 rows in set (0.00 sec)\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n<li>17</li>\n<li>18</li>\n<li>19</li>\n<li>20</li>\n<li>21</li>\n<li>22</li>\n<li>23</li>\n<li>24</li>\n<li>25</li>\n<li>26</li>\n<li>27</li>\n<li>28</li>\n<li>29</li>\n<li>30</li>\n<li>31</li>\n<li>32</li>\n<li>33</li>\n<li>34</li>\n<li>35</li>\n<li>36</li>\n<li>37</li>\n<li>38</li>\n<li>39</li>\n<li>40</li>\n<li>41</li>\n<li>42</li>\n<li>43</li>\n<li>44</li>\n<li>45</li>\n<li>46</li>\n<li>47</li>\n<li>48</li>\n<li>49</li>\n<li>50</li>\n<li>51</li>\n<li>52</li>\n<li>53</li>\n<li>54</li>\n<li>55</li>\n<li>56</li>\n<li>57</li>\n<li>58</li>\n</ul>\n<h3><a name=\"t12\"></a><a name=\"t12\"></a><a id=\"SQL_325\"></a>删除后的SQL执行情况</h3>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">#删除50w数据\nmysql&gt; delete from user limit 500000;\nQuery OK, 500000 rows affected (3.70 sec)\n\n#分析表统计信息\nmysql&gt; analyze table user;\n+-----------+---------+----------+----------+\n| Table     | Op      | Msg_type | Msg_text |\n+-----------+---------+----------+----------+\n| test.user | analyze | status   | OK       |\n+-----------+---------+----------+----------+\n1 row in set (0.01 sec)\n\n#重置状态变量计数\nmysql&gt; flush status;\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql&gt; select id, age ,phone from user where name like 'lyn12%';\nEmpty set (0.05 sec)\n\nmysql&gt; explain select id, age ,phone from user where name like 'lyn12%';\n+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+\n| id | select_type | table | type  | possible_keys | key      | key_len | ref  | rows  | Extra                 |\n+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+\n|  1 | SIMPLE      | user  | range | idx_name      | idx_name | 82      | NULL | 22226 | Using index condition |\n+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+\n1 row in set (0.00 sec)\n\nmysql&gt; select * from information_schema.session_status where variable_name in('Last_query_cost','Handler_read_next','Innodb_pages_read','Innodb_data_reads','Innodb_pages_read');\n+-------------------+----------------+\n| VARIABLE_NAME     | VARIABLE_VALUE |\n+-------------------+----------------+\n| HANDLER_READ_NEXT | 0              |\n| INNODB_DATA_READS | 7868409        |\n| INNODB_PAGES_READ | 7855239        |\n| LAST_QUERY_COST   | 10.499000      |\n+-------------------+----------------+\n4 rows in set (0.00 sec)\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n<li>17</li>\n<li>18</li>\n<li>19</li>\n<li>20</li>\n<li>21</li>\n<li>22</li>\n<li>23</li>\n<li>24</li>\n<li>25</li>\n<li>26</li>\n<li>27</li>\n<li>28</li>\n<li>29</li>\n<li>30</li>\n<li>31</li>\n<li>32</li>\n<li>33</li>\n<li>34</li>\n<li>35</li>\n<li>36</li>\n<li>37</li>\n<li>38</li>\n</ul>\n<h3><a name=\"t13\"></a><a name=\"t13\"></a><a id=\"_368\"></a>结果统计分析</h3>\n<div class=\"table-box\">\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>COST</th>\n<th>物理读次数</th>\n<th>逻辑读次数</th>\n<th>扫描行数</th>\n<th>返回行数</th>\n<th>执行时间</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>初始化插入100W</td>\n<td>10.499000</td>\n<td>7868409</td>\n<td>7855239</td>\n<td>22226</td>\n<td>11111</td>\n<td>30ms</td>\n</tr>\n<tr>\n<td>100W随机删除50W</td>\n<td>10.499000</td>\n<td>7868409</td>\n<td>7855239</td>\n<td>22226</td>\n<td>0</td>\n<td>50ms</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>这也说明对普通的大表，想要通过delete数据来对表进行瘦身是不现实的，所以在任何时候不要用delete去删除数据，应该使用优雅的标记删除。</p>\n<h2><a name=\"t14\"></a><a name=\"t14\"></a><a id=\"delete_377\"></a>delete优化建议</h2>\n<h3><a name=\"t15\"></a><a name=\"t15\"></a><a id=\"_379\"></a>控制业务账号权限</h3>\n<p>对于一个大的系统来说，需要根据业务特点去拆分子系统，每个子系统可以看做是一个service，例如美团APP，上面有很多服务，核心的服务有用户服务user-service，搜索服务search-service，商品product-service，位置服务location-service，价格服务price-service等。每个服务对应一个数据库，为该数据库创建单独账号，同时只授予DML权限且没有delete权限，同时禁止跨库访问。</p>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">#创建用户数据库并授权\ncreate database mt_user charset utf8mb4;\ngrant USAGE, SELECT, INSERT, UPDATE ON mt_user.*  to 'w_user'@'%' identified by 't$W*g@gaHTGi123456';\nflush privileges;\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n</ul>\n<h3><a name=\"t16\"></a><a name=\"t16\"></a><a id=\"delete_390\"></a>delete改为标记删除</h3>\n<p>在MySQL数据库建模规范中有4个公共字段，基本上每个表必须有的，同时在create_time列要创建索引，有两方面的好处：</p>\n<ol>\n<li>一些查询业务场景都会有一个默认的时间段，比如7天或者一个月，都是通过create_time去过滤，走索引扫描更快。</li>\n<li>一些核心的业务表需要以T +1的方式抽取数据仓库中，比如每天晚上00:30抽取前一天的数据，都是通过create_time过滤的。</li>\n</ol>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">`id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '主键id',\n`is_deleted` tinyint(4) NOT NULL DEFAULT '0' COMMENT '是否逻辑删除：0：未删除，1：已删除',\n`create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',\n`update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间'\n\n#有了删除标记，业务接口的delete操作就可以转换为update\nupdate user set is_deleted = 1 where user_id = 1213;\n\n#查询的时候需要带上is_deleted过滤\nselect id, age ,phone from user where is_deleted = 0 and name like 'lyn12%';\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n</ul>\n<h2><a name=\"t17\"></a><a name=\"t17\"></a><a id=\"_410\"></a>数据归档方式</h2>\n<h3><a name=\"t18\"></a><a name=\"t18\"></a><a id=\"_412\"></a>通用数据归档方法</h3>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">#1. 创建归档表，一般在原表名后面添加_bak。\nCREATE TABLE `ota_order_bak` (\n  `id` bigint(11) NOT NULL AUTO_INCREMENT COMMENT '主键',\n  `order_id` varchar(255) DEFAULT NULL COMMENT '订单id',\n  `ota_id` varchar(255) DEFAULT NULL COMMENT 'ota',\n  `check_in_date` varchar(255) DEFAULT NULL COMMENT '入住日期',\n  `check_out_date` varchar(255) DEFAULT NULL COMMENT '离店日期',\n  `hotel_id` varchar(255) DEFAULT NULL COMMENT '酒店ID',\n  `guest_name` varchar(255) DEFAULT NULL COMMENT '顾客',\n  `purcharse_time` timestamp NULL DEFAULT NULL COMMENT '购买时间',\n  `create_time` datetime DEFAULT NULL,\n  `update_time` datetime DEFAULT NULL,\n  `create_user` varchar(255) DEFAULT NULL,\n  `update_user` varchar(255) DEFAULT NULL,\n  `status` int(4) DEFAULT '1' COMMENT '状态 ： 1 正常 ， 0 删除',\n  `hotel_name` varchar(255) DEFAULT NULL,\n  `price` decimal(10,0) DEFAULT NULL,\n  `remark` longtext,\n  PRIMARY KEY (`id`),\n  KEY `IDX_order_id` (`order_id`) USING BTREE,\n  KEY `hotel_name` (`hotel_name`) USING BTREE,\n  KEY `ota_id` (`ota_id`) USING BTREE,\n  KEY `IDX_purcharse_time` (`purcharse_time`) USING BTREE,\n  KEY `IDX_create_time` (`create_time`) USING BTREE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\nPARTITION BY RANGE (to_days(create_time)) ( \nPARTITION p201808 VALUES LESS THAN (to_days('2018-09-01')), \nPARTITION p201809 VALUES LESS THAN (to_days('2018-10-01')), \nPARTITION p201810 VALUES LESS THAN (to_days('2018-11-01')), \nPARTITION p201811 VALUES LESS THAN (to_days('2018-12-01')), \nPARTITION p201812 VALUES LESS THAN (to_days('2019-01-01')), \nPARTITION p201901 VALUES LESS THAN (to_days('2019-02-01')), \nPARTITION p201902 VALUES LESS THAN (to_days('2019-03-01')), \nPARTITION p201903 VALUES LESS THAN (to_days('2019-04-01')), \nPARTITION p201904 VALUES LESS THAN (to_days('2019-05-01')), \nPARTITION p201905 VALUES LESS THAN (to_days('2019-06-01')), \nPARTITION p201906 VALUES LESS THAN (to_days('2019-07-01')), \nPARTITION p201907 VALUES LESS THAN (to_days('2019-08-01')), \nPARTITION p201908 VALUES LESS THAN (to_days('2019-09-01')), \nPARTITION p201909 VALUES LESS THAN (to_days('2019-10-01')), \nPARTITION p201910 VALUES LESS THAN (to_days('2019-11-01')), \nPARTITION p201911 VALUES LESS THAN (to_days('2019-12-01')), \nPARTITION p201912 VALUES LESS THAN (to_days('2020-01-01')));\n\n#2. 插入原表中无效的数据（需要跟开发同学确认数据保留范围）\ncreate table tbl_p201808 as select * from ota_order where create_time between '2018-08-01 00:00:00' and '2018-08-31 23:59:59';\n\n#3. 跟归档表分区做分区交换\nalter table ota_order_bak exchange partition p201808 with table tbl_p201808; \n\n#4. 删除原表中已经规范的数据\ndelete from ota_order where create_time between '2018-08-01 00:00:00' and '2018-08-31 23:59:59' limit 3000;\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n<li>17</li>\n<li>18</li>\n<li>19</li>\n<li>20</li>\n<li>21</li>\n<li>22</li>\n<li>23</li>\n<li>24</li>\n<li>25</li>\n<li>26</li>\n<li>27</li>\n<li>28</li>\n<li>29</li>\n<li>30</li>\n<li>31</li>\n<li>32</li>\n<li>33</li>\n<li>34</li>\n<li>35</li>\n<li>36</li>\n<li>37</li>\n<li>38</li>\n<li>39</li>\n<li>40</li>\n<li>41</li>\n<li>42</li>\n<li>43</li>\n<li>44</li>\n<li>45</li>\n<li>46</li>\n<li>47</li>\n<li>48</li>\n<li>49</li>\n<li>50</li>\n<li>51</li>\n<li>52</li>\n</ul>\n<h3><a name=\"t19\"></a><a name=\"t19\"></a><a id=\"_469\"></a>优化后的归档方式</h3>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">#1. 创建中间表\nCREATE TABLE `ota_order_2020` (........) ENGINE=InnoDB DEFAULT CHARSET=utf8\nPARTITION BY RANGE (to_days(create_time)) ( \nPARTITION p201808 VALUES LESS THAN (to_days('2018-09-01')), \nPARTITION p201809 VALUES LESS THAN (to_days('2018-10-01')), \nPARTITION p201810 VALUES LESS THAN (to_days('2018-11-01')), \nPARTITION p201811 VALUES LESS THAN (to_days('2018-12-01')), \nPARTITION p201812 VALUES LESS THAN (to_days('2019-01-01')), \nPARTITION p201901 VALUES LESS THAN (to_days('2019-02-01')), \nPARTITION p201902 VALUES LESS THAN (to_days('2019-03-01')), \nPARTITION p201903 VALUES LESS THAN (to_days('2019-04-01')), \nPARTITION p201904 VALUES LESS THAN (to_days('2019-05-01')), \nPARTITION p201905 VALUES LESS THAN (to_days('2019-06-01')), \nPARTITION p201906 VALUES LESS THAN (to_days('2019-07-01')), \nPARTITION p201907 VALUES LESS THAN (to_days('2019-08-01')), \nPARTITION p201908 VALUES LESS THAN (to_days('2019-09-01')), \nPARTITION p201909 VALUES LESS THAN (to_days('2019-10-01')), \nPARTITION p201910 VALUES LESS THAN (to_days('2019-11-01')), \nPARTITION p201911 VALUES LESS THAN (to_days('2019-12-01')), \nPARTITION p201912 VALUES LESS THAN (to_days('2020-01-01')));\n\n#2. 插入原表中有效的数据，如果数据量在100W左右可以在业务低峰期直接插入，如果比较大，建议采用dataX来做，可以控制频率和大小，之前我这边用Go封装了dataX可以实现自动生成json文件，自定义大小去执行。\ninsert into ota_order_2020 select * from ota_order where create_time between '2020-08-01 00:00:00' and '2020-08-31 23:59:59';\n\n#3. 表重命名\nalter table ota_order rename to ota_order_bak;  \nalter table ota_order_2020 rename to ota_order;\n#4. 插入差异数据\ninsert into ota_order select * from ota_order_bak a where not exists (select 1 from ota_order b where a.id = b.id);\n#5. ota_order_bak改造成分区表，如果表比较大不建议直接改造，可以先创建好分区表，通过dataX把导入进去即可。\n\n#6. 后续的归档方法\n#创建中间普遍表\ncreate table ota_order_mid like ota_order;\n#交换原表无效数据分区到普通表\nalter table ota_order exchange partition p201808 with table ota_order_mid; \n##交换普通表数据到归档表的相应分区\nalter table ota_order_bak exchange partition p201808 with table ota_order_mid; \n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n<li>17</li>\n<li>18</li>\n<li>19</li>\n<li>20</li>\n<li>21</li>\n<li>22</li>\n<li>23</li>\n<li>24</li>\n<li>25</li>\n<li>26</li>\n<li>27</li>\n<li>28</li>\n<li>29</li>\n<li>30</li>\n<li>31</li>\n<li>32</li>\n<li>33</li>\n<li>34</li>\n<li>35</li>\n<li>36</li>\n<li>37</li>\n<li>38</li>\n</ul>\n<p>这样原表和归档表都是按月的分区表，只需要创建一个中间普通表，在业务低峰期做两次分区交换，既可以删除无效数据，又能回收空，而且没有空间碎片，不会影响表上的索引及SQL的执行计划。</p>\n<h2><a name=\"t20\"></a><a name=\"t20\"></a><a id=\"_514\"></a>总结</h2>\n<p>通过从InnoDB存储空间分布，delete对性能的影响可以看到，delete物理删除既不能释放磁盘空间，而且会产生大量的碎片，导致索引频繁分裂，影响SQL执行计划的稳定性；</p>\n<p>同时在碎片回收时，会耗用大量的CPU，磁盘空间，影响表上正常的DML操作。</p>\n<p>在业务代码层面，应该做逻辑标记删除，避免物理删除；为了实现数据归档需求，可以用采用MySQL分区表特性来实现，都是DDL操作，没有碎片产生。</p>\n<p>另外一个比较好的方案采用Clickhouse，对有生命周期的数据表可以使用Clickhouse存储，利用其TTL特性实现无效数据自动清理。</p>\n<p>&nbsp;</p>","blogGoods":0,"blogId":"1330877080455553024","blogRead":0,"blogRemark":"MySQL","blogTitle":"面试官不讲武德问我：为什么MySQL不建议使用delete删除数据？","blogType":1,"createdTime":1606111996000,"version":3},"msg":"操作成功！"}
2020-12-25 00:04:55.181 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-12-25 00:04:55.184 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/get/1330877080455553024(String), [1330877080455553024](String), 1(Integer), org.springframework.dao.DataIntegrityViolationException: 
### Error updating database.  Cause: java.sql.SQLIntegrityConstraintViolationException: Column 'blog_content' cannot be null
### The error may involve com.tqk.blog.mapper.BlBlogMapper.save-Inline
### Cause: java.sql.SQLIntegrityConstraintViolationException: Column 'blog_content' cannot be null
; Column 'blog_content' cannot be null; nested exception is java.sql.SQLIntegrityConstraintViolationException: Column 'blog_content' cannot be null
	at com.tqk.blog.service.impl.BlogServiceImpl.save(BlogServiceImpl.java:52)
	at com.tqk.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$c89e2edd.invoke(<generated>)
	at com.tqk.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$e40d0c11.save(<generated>)
	at com.tqk.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$c89e2edd.invoke(<generated>)
	at com.tqk.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$7c340e8d.save(<generated>)
	at com.tqk.blog.controller.BlogController.save(BlogController.java:39)
	at com.tqk.blog.controller.BlogController$$FastClassBySpringCGLIB$$a4fc5e31.invoke(<generated>)
	at com.tqk.blog.aspect.RequestAspect.doAround(RequestAspect.java:65)
	at com.tqk.blog.controller.BlogController$$EnhancerBySpringCGLIB$$7e46265a.save(<generated>)
Caused by: java.sql.SQLIntegrityConstraintViolationException: Column 'blog_content' cannot be null
(String), GET(String), 188(Long), {"code":20000,"data":{"blogCollection":0,"blogComment":0,"blogContent":"<h2>前言</h2>\n<p>我负责的有几个系统随着业务量的增长，存储在MySQL中的数据日益剧增，我当时就想现在的业务方不讲武德，搞偷袭，趁我没反应过来把很多表，很快，很快啊都打到了亿级别，我大意了，没有闪，这就导致跟其Join的表的SQL变得很慢，对的应用接口的response time也变长了，影响了用户体验。</p>\n<p>事后我找到业务方，我批评了他们跟他们说要讲武德，连忙跟我道歉，这个事情才就此作罢，走的时候我对他们说下次不要这样了，耗子尾汁，好好反思。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/3c93aececcb9e763f5476362c4e88710.png\" alt=\"\" /></p>\n<p>骂归骂，事情还是得解决，时候我分析原因发现，发现有些表的数据量增长很快，对应SQL扫描了很多无效数据，导致SQL慢了下来，通过确认之后，这些大表都是一些流水、记录、日志类型数据，只需要保留1到3个月，此时需要对表做数据清理实现瘦身，一般都会想到用insert + delete的方式去清理。</p>\n<p>这篇文章我会从InnoDB存储空间分布，delete对性能的影响，以及优化建议方面解释为什么不建议delete删除数据。</p>\n<h2><a name=\"t1\"></a><a name=\"t1\"></a><a id=\"InnoDB_16\"></a>InnoDB存储架构</h2>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/5c66ffe9749c58e1613d2519f7ea7211.png\" alt=\"\" /></p>\n<p>从这张图可以看到，InnoDB存储结构主要包括两部分：逻辑存储结构和物理存储结构。</p>\n<p>逻辑上是由表空间tablespace &mdash;&gt; 段segment或者inode &mdash;&gt; 区Extent &mdash;&mdash;&gt;数据页Page构成，Innodb逻辑管理单位是segment，空间分配的最小单位是extent，每个segment都会从表空间FREE_PAGE中分配32个page，当这32个page不够用时，会按照以下原则进行扩展：如果当前小于1个extent，则扩展到1个extent；当表空间小于32MB时，每次扩展一个extent；表空间大于32MB，每次扩展4个extent。</p>\n<p>物理上主要由系统用户数据文件，日志文件组成，数据文件主要存储MySQL字典数据和用户数据，日志文件记录的是data page的变更记录，用于MySQL Crash时的恢复。</p>\n<h2><a name=\"t2\"></a><a name=\"t2\"></a><a id=\"Innodb_26\"></a>Innodb表空间</h2>\n<p>InnoDB存储包括三类表空间：系统表空间，用户表空间，Undo表空间。</p>\n<p><strong>系统表空间：</strong>&nbsp;主要存储MySQL内部的数据字典数据，如information_schema下的数据。</p>\n<p><strong>用户表空间：</strong>&nbsp;当开启innodb_file_per_table=1时，数据表从系统表空间独立出来存储在以table_name.ibd命令的数据文件中，结构信息存储在table_name.frm文件中。</p>\n<p><strong>Undo表空间：</strong>&nbsp;存储Undo信息，如快照一致读和flashback都是利用undo信息。</p>\n<p>从MySQL 8.0开始允许用户自定义表空间，具体语法如下：</p>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">CREATE TABLESPACE tablespace_name\n    ADD DATAFILE 'file_name'               #数据文件名\n    USE LOGFILE GROUP logfile_group        #自定义日志文件组，一般每组2个logfile。\n    [EXTENT_SIZE [=] extent_size]          #区大小\n    [INITIAL_SIZE [=] initial_size]        #初始化大小 \n    [AUTOEXTEND_SIZE [=] autoextend_size]  #自动扩宽尺寸\n    [MAX_SIZE [=] max_size]                #单个文件最大size，最大是32G。\n    [NODEGROUP [=] nodegroup_id]           #节点组\n    [WAIT]\n    [COMMENT [=] comment_text]\n    ENGINE [=] engine_name\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n</ul>\n<p>这样的好处是可以做到数据的冷热分离，分别用HDD和SSD来存储，既能实现数据的高效访问，又能节约成本，比如可以添加两块500G硬盘，经过创建卷组vg，划分逻辑卷lv，创建数据目录并mount相应的lv，假设划分的两个目录分别是/hot_data 和 /cold_data。</p>\n<p>这样就可以将核心的业务表如用户表，订单表存储在高性能SSD盘上，一些日志，流水表存储在普通的HDD上，主要的操作步骤如下：</p>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">#创建热数据表空间\ncreate tablespace tbs_data_hot add datafile '/hot_data/tbs_data_hot01.dbf' max_size 20G;\n#创建核心业务表存储在热数据表空间\ncreate table booking(id bigint not null primary key auto_increment, &hellip;&hellip; ) tablespace tbs_data_hot;\n#创建冷数据表空间\ncreate tablespace tbs_data_cold add datafile '/hot_data/tbs_data_cold01.dbf' max_size 20G;\n#创建日志，流水，备份类的表存储在冷数据表空间\ncreate table payment_log(id bigint not null primary key auto_increment, &hellip;&hellip; ) tablespace tbs_data_cold;\n#可以移动表到另一个表空间\nalter table payment_log tablespace tbs_data_hot;\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n</ul>\n<h2><a name=\"t3\"></a><a name=\"t3\"></a><a id=\"Inndob_69\"></a>Inndob存储分布</h2>\n<h3><a name=\"t4\"></a><a name=\"t4\"></a><a id=\"_71\"></a>创建空表查看空间变化</h3>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">mysql&gt; create table user(id bigint not null primary key auto_increment, \n    -&gt; name varchar(20) not null default '' comment '姓名', \n    -&gt; age tinyint not null default 0 comment 'age', \n    -&gt; gender char(1) not null default 'M'  comment '性别',\n    -&gt; phone varchar(16) not null default '' comment '手机号',\n    -&gt; create_time datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',\n    -&gt; update_time datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间'\n    -&gt; ) engine = InnoDB DEFAULT CHARSET=utf8mb4 COMMENT '用户信息表';\nQuery OK, 0 rows affected (0.26 sec)\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n</ul>\n<pre class=\"prettyprint\"><code class=\"prism language-bash has-numbering\"><span class=\"token comment\"># ls -lh user1.ibd </span>\n-rw-r----- 1 mysql mysql 96K Nov  6 12:48 user.ibd\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n</ul>\n<p>设置参数innodb_file_per_table=1时，创建表时会自动创建一个segment，同时分配一个extent，包含32个data page的来存储数据，这样创建的空表默认大小就是96KB，extent使用完之后会申请64个连接页，这样对于一些小表，或者undo segment，可以在开始时申请较少的空间，节省磁盘容量的开销。</p>\n<pre class=\"prettyprint\"><code class=\"prism language-shell has-numbering\"><span class=\"token comment\"># python2 py_innodb_page_info.py -v /data2/mysql/test/user.ibd</span>\npage offset 00000000, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>File Space Header<span class=\"token operator\">&gt;</span>\npage offset 00000001, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>Insert Buffer Bitmap<span class=\"token operator\">&gt;</span>\npage offset 00000002, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>File Segment inode<span class=\"token operator\">&gt;</span>\npage offset 00000003, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>B-tree Node<span class=\"token operator\">&gt;</span>, page level <span class=\"token operator\">&lt;</span>0000<span class=\"token operator\">&gt;</span>\npage offset 00000000, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>Freshly Allocated Page<span class=\"token operator\">&gt;</span>\npage offset 00000000, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>Freshly Allocated Page<span class=\"token operator\">&gt;</span>\nTotal number of page: 6:      <span class=\"token comment\">#总共分配的页数</span>\nFreshly Allocated Page: 2     <span class=\"token comment\">#可用的数据页</span>\nInsert Buffer Bitmap: 1       <span class=\"token comment\">#插入缓冲页</span>\nFile Space Header: 1          <span class=\"token comment\">#文件空间头</span>\nB-tree Node: 1                <span class=\"token comment\">#数据页</span>\nFile Segment inode: 1         <span class=\"token comment\">#文件端inonde，如果是在ibdata1.ibd上会有多个inode。</span>\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n</ul>\n<h3><a name=\"t5\"></a><a name=\"t5\"></a><a id=\"_108\"></a>插入数据后的空间变化</h3>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">mysql&gt; DELIMITER $$\nmysql&gt; CREATE PROCEDURE insert_user_data(num INTEGER) \n    -&gt; BEGIN\n    -&gt;     DECLARE v_i int unsigned DEFAULT 0;\n    -&gt; set autocommit= 0;\n    -&gt; WHILE v_i &lt; num DO\n    -&gt;    insert into user(`name`, age, gender, phone) values (CONCAT('lyn',v_i), mod(v_i,120), 'M', CONCAT('152',ROUND(RAND(1)*100000000)));\n    -&gt;  SET v_i = v_i+1;\n    -&gt; END WHILE;\n    -&gt; commit;\n    -&gt; END $$\nQuery OK, 0 rows affected (0.01 sec)\nmysql&gt; DELIMITER ;\n\n#插入10w数据\nmysql&gt; call insert_user_data(100000);\nQuery OK, 0 rows affected (6.69 sec)\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n<li>17</li>\n</ul>\n<pre class=\"prettyprint\"><code class=\"prism language-shell has-numbering\"><span class=\"token comment\"># ls -lh user.ibd</span>\n-rw-r----- 1 mysql mysql 14M Nov 6 10:58 /data2/mysql/test/user.ibd\n\n<span class=\"token comment\"># python2 py_innodb_page_info.py -v /data2/mysql/test/user.ibd</span>\npage offset 00000000, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>File Space Header<span class=\"token operator\">&gt;</span>\npage offset 00000001, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>Insert Buffer Bitmap<span class=\"token operator\">&gt;</span>\npage offset 00000002, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>File Segment inode<span class=\"token operator\">&gt;</span>\npage offset 00000003, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>B-tree Node<span class=\"token operator\">&gt;</span>, page level <span class=\"token operator\">&lt;</span>0001<span class=\"token operator\">&gt;</span>   <span class=\"token comment\">#增加了一个非叶子节点，树的高度从1变为2.</span>\n<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>\npage offset 00000000, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>Freshly Allocated Page<span class=\"token operator\">&gt;</span>\nTotal number of page: 896:\nFreshly Allocated Page: 493\nInsert Buffer Bitmap: 1\nFile Space Header: 1\nB-tree Node: 400\nFile Segment inode: 1\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n</ul>\n<h3><a name=\"t6\"></a><a name=\"t6\"></a><a id=\"delete_149\"></a>delete数据后的空间变化</h3>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">mysql&gt; select min(id),max(id),count(*) from user;\n+---------+---------+----------+\n| min(id) | max(id) | count(*) |\n+---------+---------+----------+\n|       1 |  100000 |   100000 |\n+---------+---------+----------+\n1 row in set (0.05 sec)\n#删除50000条数据，理论上空间应该从14MB变长7MB左右。\nmysql&gt; delete from user limit 50000;\nQuery OK, 50000 rows affected (0.25 sec)\n\n#数据文件大小依然是14MB，没有缩小。\n# ls -lh /data2/mysql/test/user1.ibd \n-rw-r----- 1 mysql mysql 14M Nov  6 13:22 /data2/mysql/test/user.ibd\n\n#数据页没有被回收。\n# python2 py_innodb_page_info.py -v /data2/mysql/test/user.ibd\npage offset 00000000, page type &lt;File Space Header&gt;\npage offset 00000001, page type &lt;Insert Buffer Bitmap&gt;\npage offset 00000002, page type &lt;File Segment inode&gt;\npage offset 00000003, page type &lt;B-tree Node&gt;, page level &lt;0001&gt;\n........................................................\npage offset 00000000, page type &lt;Freshly Allocated Page&gt;\nTotal number of page: 896:\nFreshly Allocated Page: 493\nInsert Buffer Bitmap: 1\nFile Space Header: 1\nB-tree Node: 400\nFile Segment inode: 1\n#在MySQL内部是标记删除，\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n<li>17</li>\n<li>18</li>\n<li>19</li>\n<li>20</li>\n<li>21</li>\n<li>22</li>\n<li>23</li>\n<li>24</li>\n<li>25</li>\n<li>26</li>\n<li>27</li>\n<li>28</li>\n<li>29</li>\n<li>30</li>\n</ul>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">mysql&gt; use information_schema;\n\nDatabase changed\nmysql&gt; SELECT A.SPACE AS TBL_SPACEID, A.TABLE_ID, A.NAME AS TABLE_NAME, FILE_FORMAT, ROW_FORMAT, SPACE_TYPE,  B.INDEX_ID , B.NAME AS INDEX_NAME, PAGE_NO, B.TYPE AS INDEX_TYPE FROM INNODB_SYS_TABLES A LEFT JOIN INNODB_SYS_INDEXES B ON A.TABLE_ID =B.TABLE_ID WHERE A.NAME = 'test/user1';\n+-------------+----------+------------+-------------+------------+------------+----------+------------+---------+------------+\n| TBL_SPACEID | TABLE_ID | TABLE_NAME | FILE_FORMAT | ROW_FORMAT | SPACE_TYPE | INDEX_ID | INDEX_NAME | PAGE_NO | INDEX_TYPE |\n+-------------+----------+------------+-------------+------------+------------+----------+------------+---------+------------+\n|        1283 |     1207 | test/user | Barracuda   | Dynamic    | Single     |     2236 | PRIMARY    |       3 |          3 |\n+-------------+----------+------------+-------------+------------+------------+----------+------------+---------+------------+\n1 row in set (0.01 sec)\n\nPAGE_NO = 3 标识B-tree的root page是3号页，INDEX_TYPE = 3是聚集索引。 INDEX_TYPE取值如下：\n0 = nonunique secondary index; \n1 = automatically generated clustered index (GEN_CLUST_INDEX); \n2 = unique nonclustered index; \n3 = clustered index; \n32 = full-text index;\n#收缩空间再后进行观察\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n<li>17</li>\n<li>18</li>\n</ul>\n<p>MySQL内部不会真正删除空间，而且做标记删除，即将delflag:N修改为delflag:Y，commit之后会会被purge进入删除链表，如果下一次insert更大的记录，delete之后的空间不会被重用，如果插入的记录小于等于delete的记录空会被重用，这块内容可以通过知数堂的innblock工具进行分析。</p>\n<h2><a name=\"t7\"></a><a name=\"t7\"></a><a id=\"Innodb_207\"></a>Innodb中的碎片</h2>\n<h3><a name=\"t8\"></a><a name=\"t8\"></a><a id=\"_209\"></a>碎片的产生</h3>\n<p>我们知道数据存储在文件系统上的，总是不能100%利用分配给它的物理空间，删除数据会在页面上留下一些&rdquo;空洞&rdquo;，或者随机写入（聚集索引非线性增加）会导致页分裂，页分裂导致页面的利用空间少于50%，另外对表进行增删改会引起对应的二级索引值的随机的增删改，也会导致索引结构中的数据页面上留下一些\"空洞\"，虽然这些空洞有可能会被重复利用，但终究会导致部分物理空间未被使用，也就是碎片。</p>\n<p>同时，即便是设置了填充因子为100%，Innodb也会主动留下page页面1/16的空间作为预留使用（An innodb_fill_factor setting of 100 leaves 1/16 of the space in clustered index pages free for future index growth）防止update带来的行溢出。</p>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">mysql&gt; select table_schema,\n    -&gt;        table_name,ENGINE,\n    -&gt;        round(DATA_LENGTH/1024/1024+ INDEX_LENGTH/1024/1024) total_mb,TABLE_ROWS,\n    -&gt;        round(DATA_LENGTH/1024/1024) data_mb, round(INDEX_LENGTH/1024/1024) index_mb, round(DATA_FREE/1024/1024) free_mb, round(DATA_FREE/DATA_LENGTH*100,2) free_ratio\n    -&gt; from information_schema.TABLES where  TABLE_SCHEMA= 'test'\n    -&gt; and TABLE_NAME= 'user';\n+--------------+------------+--------+----------+------------+---------+----------+---------+------------+\n| table_schema | table_name | ENGINE | total_mb | TABLE_ROWS | data_mb | index_mb | free_mb | free_ratio |\n+--------------+------------+--------+----------+------------+---------+----------+---------+------------+\n| test         | user      | InnoDB |        4 |      50000 |       4 |        0 |       6 |     149.42 |\n+--------------+------------+--------+----------+------------+---------+----------+---------+------------+\n1 row in set (0.00 sec)\n\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n</ul>\n<p>其中data_free是分配了未使用的字节数，并不能说明完全是碎片空间。</p>\n<h3><a name=\"t9\"></a><a name=\"t9\"></a><a id=\"_233\"></a>碎片的回收</h3>\n<p>对于InnoDB的表，可以通过以下命令来回收碎片，释放空间，这个是随机读IO操作，会比较耗时，也会阻塞表上正常的DML运行，同时需要占用额外更多的磁盘空间，对于RDS来说，可能会导致磁盘空间瞬间爆满，实例瞬间被锁定，应用无法做DML操作，所以禁止在线上环境去执行。</p>\n<pre class=\"prettyprint\"><code class=\"prism language-shell has-numbering\"><span class=\"token comment\">#执行InnoDB的碎片回收</span>\nmysql<span class=\"token operator\">&gt;</span> alter table user engine<span class=\"token operator\">=</span>InnoDB<span class=\"token punctuation\">;</span>\nQuery OK, 0 rows affected <span class=\"token punctuation\">(</span>9.00 sec<span class=\"token punctuation\">)</span>\nRecords: 0  Duplicates: 0  Warnings: 0\n\n<span class=\"token comment\">##执行完之后，数据文件大小从14MB降低到10M。</span>\n<span class=\"token comment\"># ls -lh /data2/mysql/test/user1.ibd </span>\n-rw-r----- 1 mysql mysql 10M Nov 6 16:18 /data2/mysql/test/user.ibd\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n</ul>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">mysql&gt; select table_schema,        table_name,ENGINE,        round(DATA_LENGTH/1024/1024+ INDEX_LENGTH/1024/1024) total_mb,TABLE_ROWS,        round(DATA_LENGTH/1024/1024) data_mb, round(INDEX_LENGTH/1024/1024) index_mb, round(DATA_FREE/1024/1024) free_mb, round(DATA_FREE/DATA_LENGTH*100,2) free_ratio from information_schema.TABLES where  TABLE_SCHEMA= 'test' and TABLE_NAME= 'user';\n+--------------+------------+--------+----------+------------+---------+----------+---------+------------+\n| table_schema | table_name | ENGINE | total_mb | TABLE_ROWS | data_mb | index_mb | free_mb | free_ratio |\n+--------------+------------+--------+----------+------------+---------+----------+---------+------------+\n| test         | user      | InnoDB |        5 |      50000 |       5 |        0 |       2 |      44.29 |\n+--------------+------------+--------+----------+------------+---------+----------+---------+------------+\n1 row in set (0.00 sec)\n\n\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n</ul>\n<h2><a name=\"t10\"></a><a name=\"t10\"></a><a id=\"deleteSQL_260\"></a>delete对SQL的影响</h2>\n<h3><a name=\"t11\"></a><a name=\"t11\"></a><a id=\"SQL_262\"></a>未删除前的SQL执行情况</h3>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">#插入100W数据\nmysql&gt; call insert_user_data(1000000);\nQuery OK, 0 rows affected (35.99 sec)\n\n#添加相关索引\nmysql&gt; alter table user add index idx_name(name), add index idx_phone(phone);\nQuery OK, 0 rows affected (6.00 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\n#表上索引统计信息\nmysql&gt; show index from user;\n+-------+------------+-----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+\n| Table | Non_unique | Key_name  | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment |\n+-------+------------+-----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+\n| user  |          0 | PRIMARY   |            1 | id          | A         |      996757 |     NULL | NULL   |      | BTREE      |         |               |\n| user  |          1 | idx_name  |            1 | name        | A         |      996757 |     NULL | NULL   |      | BTREE      |         |               |\n| user  |          1 | idx_phone |            1 | phone       | A         |           2 |     NULL | NULL   |      | BTREE      |         |               |\n+-------+------------+-----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+\n3 rows in set (0.00 sec)\n\n#重置状态变量计数\nmysql&gt; flush status;\nQuery OK, 0 rows affected (0.00 sec)\n\n#执行SQL语句\nmysql&gt; select id, age ,phone from user where name like 'lyn12%';\n+--------+-----+-------------+\n| id     | age | phone       |\n+--------+-----+-------------+\n|    124 |   3 | 15240540354 |\n|   1231 |  30 | 15240540354 |\n|  12301 |  60 | 15240540354 |\n.............................\n| 129998 |  37 | 15240540354 |\n| 129999 |  38 | 15240540354 |\n| 130000 |  39 | 15240540354 |\n+--------+-----+-------------+\n11111 rows in set (0.03 sec)\n\nmysql&gt; explain select id, age ,phone from user where name like 'lyn12%';\n+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+\n| id | select_type | table | type  | possible_keys | key      | key_len | ref  | rows  | Extra                 |\n+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+\n|  1 | SIMPLE      | user  | range | idx_name      | idx_name | 82      | NULL | 22226 | Using index condition |\n+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+\n1 row in set (0.00 sec)\n\n#查看相关状态呢变量\nmysql&gt; select * from information_schema.session_status where variable_name in('Last_query_cost','Handler_read_next','Innodb_pages_read','Innodb_data_reads','Innodb_pages_read');\n+-------------------+----------------+\n| VARIABLE_NAME     | VARIABLE_VALUE |\n+-------------------+----------------+\n| HANDLER_READ_NEXT | 11111          |    #请求读的行数\n| INNODB_DATA_READS | 7868409        |    #数据物理读的总数\n| INNODB_PAGES_READ | 7855239        |    #逻辑读的总数\n| LAST_QUERY_COST   | 10.499000      |    #SQL语句的成本COST，主要包括IO_COST和CPU_COST。\n+-------------------+----------------+\n4 rows in set (0.00 sec)\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n<li>17</li>\n<li>18</li>\n<li>19</li>\n<li>20</li>\n<li>21</li>\n<li>22</li>\n<li>23</li>\n<li>24</li>\n<li>25</li>\n<li>26</li>\n<li>27</li>\n<li>28</li>\n<li>29</li>\n<li>30</li>\n<li>31</li>\n<li>32</li>\n<li>33</li>\n<li>34</li>\n<li>35</li>\n<li>36</li>\n<li>37</li>\n<li>38</li>\n<li>39</li>\n<li>40</li>\n<li>41</li>\n<li>42</li>\n<li>43</li>\n<li>44</li>\n<li>45</li>\n<li>46</li>\n<li>47</li>\n<li>48</li>\n<li>49</li>\n<li>50</li>\n<li>51</li>\n<li>52</li>\n<li>53</li>\n<li>54</li>\n<li>55</li>\n<li>56</li>\n<li>57</li>\n<li>58</li>\n</ul>\n<h3><a name=\"t12\"></a><a name=\"t12\"></a><a id=\"SQL_325\"></a>删除后的SQL执行情况</h3>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">#删除50w数据\nmysql&gt; delete from user limit 500000;\nQuery OK, 500000 rows affected (3.70 sec)\n\n#分析表统计信息\nmysql&gt; analyze table user;\n+-----------+---------+----------+----------+\n| Table     | Op      | Msg_type | Msg_text |\n+-----------+---------+----------+----------+\n| test.user | analyze | status   | OK       |\n+-----------+---------+----------+----------+\n1 row in set (0.01 sec)\n\n#重置状态变量计数\nmysql&gt; flush status;\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql&gt; select id, age ,phone from user where name like 'lyn12%';\nEmpty set (0.05 sec)\n\nmysql&gt; explain select id, age ,phone from user where name like 'lyn12%';\n+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+\n| id | select_type | table | type  | possible_keys | key      | key_len | ref  | rows  | Extra                 |\n+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+\n|  1 | SIMPLE      | user  | range | idx_name      | idx_name | 82      | NULL | 22226 | Using index condition |\n+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+\n1 row in set (0.00 sec)\n\nmysql&gt; select * from information_schema.session_status where variable_name in('Last_query_cost','Handler_read_next','Innodb_pages_read','Innodb_data_reads','Innodb_pages_read');\n+-------------------+----------------+\n| VARIABLE_NAME     | VARIABLE_VALUE |\n+-------------------+----------------+\n| HANDLER_READ_NEXT | 0              |\n| INNODB_DATA_READS | 7868409        |\n| INNODB_PAGES_READ | 7855239        |\n| LAST_QUERY_COST   | 10.499000      |\n+-------------------+----------------+\n4 rows in set (0.00 sec)\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n<li>17</li>\n<li>18</li>\n<li>19</li>\n<li>20</li>\n<li>21</li>\n<li>22</li>\n<li>23</li>\n<li>24</li>\n<li>25</li>\n<li>26</li>\n<li>27</li>\n<li>28</li>\n<li>29</li>\n<li>30</li>\n<li>31</li>\n<li>32</li>\n<li>33</li>\n<li>34</li>\n<li>35</li>\n<li>36</li>\n<li>37</li>\n<li>38</li>\n</ul>\n<h3><a name=\"t13\"></a><a name=\"t13\"></a><a id=\"_368\"></a>结果统计分析</h3>\n<div class=\"table-box\">\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>COST</th>\n<th>物理读次数</th>\n<th>逻辑读次数</th>\n<th>扫描行数</th>\n<th>返回行数</th>\n<th>执行时间</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>初始化插入100W</td>\n<td>10.499000</td>\n<td>7868409</td>\n<td>7855239</td>\n<td>22226</td>\n<td>11111</td>\n<td>30ms</td>\n</tr>\n<tr>\n<td>100W随机删除50W</td>\n<td>10.499000</td>\n<td>7868409</td>\n<td>7855239</td>\n<td>22226</td>\n<td>0</td>\n<td>50ms</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>这也说明对普通的大表，想要通过delete数据来对表进行瘦身是不现实的，所以在任何时候不要用delete去删除数据，应该使用优雅的标记删除。</p>\n<h2><a name=\"t14\"></a><a name=\"t14\"></a><a id=\"delete_377\"></a>delete优化建议</h2>\n<h3><a name=\"t15\"></a><a name=\"t15\"></a><a id=\"_379\"></a>控制业务账号权限</h3>\n<p>对于一个大的系统来说，需要根据业务特点去拆分子系统，每个子系统可以看做是一个service，例如美团APP，上面有很多服务，核心的服务有用户服务user-service，搜索服务search-service，商品product-service，位置服务location-service，价格服务price-service等。每个服务对应一个数据库，为该数据库创建单独账号，同时只授予DML权限且没有delete权限，同时禁止跨库访问。</p>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">#创建用户数据库并授权\ncreate database mt_user charset utf8mb4;\ngrant USAGE, SELECT, INSERT, UPDATE ON mt_user.*  to 'w_user'@'%' identified by 't$W*g@gaHTGi123456';\nflush privileges;\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n</ul>\n<h3><a name=\"t16\"></a><a name=\"t16\"></a><a id=\"delete_390\"></a>delete改为标记删除</h3>\n<p>在MySQL数据库建模规范中有4个公共字段，基本上每个表必须有的，同时在create_time列要创建索引，有两方面的好处：</p>\n<ol>\n<li>一些查询业务场景都会有一个默认的时间段，比如7天或者一个月，都是通过create_time去过滤，走索引扫描更快。</li>\n<li>一些核心的业务表需要以T +1的方式抽取数据仓库中，比如每天晚上00:30抽取前一天的数据，都是通过create_time过滤的。</li>\n</ol>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">`id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '主键id',\n`is_deleted` tinyint(4) NOT NULL DEFAULT '0' COMMENT '是否逻辑删除：0：未删除，1：已删除',\n`create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',\n`update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间'\n\n#有了删除标记，业务接口的delete操作就可以转换为update\nupdate user set is_deleted = 1 where user_id = 1213;\n\n#查询的时候需要带上is_deleted过滤\nselect id, age ,phone from user where is_deleted = 0 and name like 'lyn12%';\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n</ul>\n<h2><a name=\"t17\"></a><a name=\"t17\"></a><a id=\"_410\"></a>数据归档方式</h2>\n<h3><a name=\"t18\"></a><a name=\"t18\"></a><a id=\"_412\"></a>通用数据归档方法</h3>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">#1. 创建归档表，一般在原表名后面添加_bak。\nCREATE TABLE `ota_order_bak` (\n  `id` bigint(11) NOT NULL AUTO_INCREMENT COMMENT '主键',\n  `order_id` varchar(255) DEFAULT NULL COMMENT '订单id',\n  `ota_id` varchar(255) DEFAULT NULL COMMENT 'ota',\n  `check_in_date` varchar(255) DEFAULT NULL COMMENT '入住日期',\n  `check_out_date` varchar(255) DEFAULT NULL COMMENT '离店日期',\n  `hotel_id` varchar(255) DEFAULT NULL COMMENT '酒店ID',\n  `guest_name` varchar(255) DEFAULT NULL COMMENT '顾客',\n  `purcharse_time` timestamp NULL DEFAULT NULL COMMENT '购买时间',\n  `create_time` datetime DEFAULT NULL,\n  `update_time` datetime DEFAULT NULL,\n  `create_user` varchar(255) DEFAULT NULL,\n  `update_user` varchar(255) DEFAULT NULL,\n  `status` int(4) DEFAULT '1' COMMENT '状态 ： 1 正常 ， 0 删除',\n  `hotel_name` varchar(255) DEFAULT NULL,\n  `price` decimal(10,0) DEFAULT NULL,\n  `remark` longtext,\n  PRIMARY KEY (`id`),\n  KEY `IDX_order_id` (`order_id`) USING BTREE,\n  KEY `hotel_name` (`hotel_name`) USING BTREE,\n  KEY `ota_id` (`ota_id`) USING BTREE,\n  KEY `IDX_purcharse_time` (`purcharse_time`) USING BTREE,\n  KEY `IDX_create_time` (`create_time`) USING BTREE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\nPARTITION BY RANGE (to_days(create_time)) ( \nPARTITION p201808 VALUES LESS THAN (to_days('2018-09-01')), \nPARTITION p201809 VALUES LESS THAN (to_days('2018-10-01')), \nPARTITION p201810 VALUES LESS THAN (to_days('2018-11-01')), \nPARTITION p201811 VALUES LESS THAN (to_days('2018-12-01')), \nPARTITION p201812 VALUES LESS THAN (to_days('2019-01-01')), \nPARTITION p201901 VALUES LESS THAN (to_days('2019-02-01')), \nPARTITION p201902 VALUES LESS THAN (to_days('2019-03-01')), \nPARTITION p201903 VALUES LESS THAN (to_days('2019-04-01')), \nPARTITION p201904 VALUES LESS THAN (to_days('2019-05-01')), \nPARTITION p201905 VALUES LESS THAN (to_days('2019-06-01')), \nPARTITION p201906 VALUES LESS THAN (to_days('2019-07-01')), \nPARTITION p201907 VALUES LESS THAN (to_days('2019-08-01')), \nPARTITION p201908 VALUES LESS THAN (to_days('2019-09-01')), \nPARTITION p201909 VALUES LESS THAN (to_days('2019-10-01')), \nPARTITION p201910 VALUES LESS THAN (to_days('2019-11-01')), \nPARTITION p201911 VALUES LESS THAN (to_days('2019-12-01')), \nPARTITION p201912 VALUES LESS THAN (to_days('2020-01-01')));\n\n#2. 插入原表中无效的数据（需要跟开发同学确认数据保留范围）\ncreate table tbl_p201808 as select * from ota_order where create_time between '2018-08-01 00:00:00' and '2018-08-31 23:59:59';\n\n#3. 跟归档表分区做分区交换\nalter table ota_order_bak exchange partition p201808 with table tbl_p201808; \n\n#4. 删除原表中已经规范的数据\ndelete from ota_order where create_time between '2018-08-01 00:00:00' and '2018-08-31 23:59:59' limit 3000;\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n<li>17</li>\n<li>18</li>\n<li>19</li>\n<li>20</li>\n<li>21</li>\n<li>22</li>\n<li>23</li>\n<li>24</li>\n<li>25</li>\n<li>26</li>\n<li>27</li>\n<li>28</li>\n<li>29</li>\n<li>30</li>\n<li>31</li>\n<li>32</li>\n<li>33</li>\n<li>34</li>\n<li>35</li>\n<li>36</li>\n<li>37</li>\n<li>38</li>\n<li>39</li>\n<li>40</li>\n<li>41</li>\n<li>42</li>\n<li>43</li>\n<li>44</li>\n<li>45</li>\n<li>46</li>\n<li>47</li>\n<li>48</li>\n<li>49</li>\n<li>50</li>\n<li>51</li>\n<li>52</li>\n</ul>\n<h3><a name=\"t19\"></a><a name=\"t19\"></a><a id=\"_469\"></a>优化后的归档方式</h3>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">#1. 创建中间表\nCREATE TABLE `ota_order_2020` (........) ENGINE=InnoDB DEFAULT CHARSET=utf8\nPARTITION BY RANGE (to_days(create_time)) ( \nPARTITION p201808 VALUES LESS THAN (to_days('2018-09-01')), \nPARTITION p201809 VALUES LESS THAN (to_days('2018-10-01')), \nPARTITION p201810 VALUES LESS THAN (to_days('2018-11-01')), \nPARTITION p201811 VALUES LESS THAN (to_days('2018-12-01')), \nPARTITION p201812 VALUES LESS THAN (to_days('2019-01-01')), \nPARTITION p201901 VALUES LESS THAN (to_days('2019-02-01')), \nPARTITION p201902 VALUES LESS THAN (to_days('2019-03-01')), \nPARTITION p201903 VALUES LESS THAN (to_days('2019-04-01')), \nPARTITION p201904 VALUES LESS THAN (to_days('2019-05-01')), \nPARTITION p201905 VALUES LESS THAN (to_days('2019-06-01')), \nPARTITION p201906 VALUES LESS THAN (to_days('2019-07-01')), \nPARTITION p201907 VALUES LESS THAN (to_days('2019-08-01')), \nPARTITION p201908 VALUES LESS THAN (to_days('2019-09-01')), \nPARTITION p201909 VALUES LESS THAN (to_days('2019-10-01')), \nPARTITION p201910 VALUES LESS THAN (to_days('2019-11-01')), \nPARTITION p201911 VALUES LESS THAN (to_days('2019-12-01')), \nPARTITION p201912 VALUES LESS THAN (to_days('2020-01-01')));\n\n#2. 插入原表中有效的数据，如果数据量在100W左右可以在业务低峰期直接插入，如果比较大，建议采用dataX来做，可以控制频率和大小，之前我这边用Go封装了dataX可以实现自动生成json文件，自定义大小去执行。\ninsert into ota_order_2020 select * from ota_order where create_time between '2020-08-01 00:00:00' and '2020-08-31 23:59:59';\n\n#3. 表重命名\nalter table ota_order rename to ota_order_bak;  \nalter table ota_order_2020 rename to ota_order;\n#4. 插入差异数据\ninsert into ota_order select * from ota_order_bak a where not exists (select 1 from ota_order b where a.id = b.id);\n#5. ota_order_bak改造成分区表，如果表比较大不建议直接改造，可以先创建好分区表，通过dataX把导入进去即可。\n\n#6. 后续的归档方法\n#创建中间普遍表\ncreate table ota_order_mid like ota_order;\n#交换原表无效数据分区到普通表\nalter table ota_order exchange partition p201808 with table ota_order_mid; \n##交换普通表数据到归档表的相应分区\nalter table ota_order_bak exchange partition p201808 with table ota_order_mid; \n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n<li>17</li>\n<li>18</li>\n<li>19</li>\n<li>20</li>\n<li>21</li>\n<li>22</li>\n<li>23</li>\n<li>24</li>\n<li>25</li>\n<li>26</li>\n<li>27</li>\n<li>28</li>\n<li>29</li>\n<li>30</li>\n<li>31</li>\n<li>32</li>\n<li>33</li>\n<li>34</li>\n<li>35</li>\n<li>36</li>\n<li>37</li>\n<li>38</li>\n</ul>\n<p>这样原表和归档表都是按月的分区表，只需要创建一个中间普通表，在业务低峰期做两次分区交换，既可以删除无效数据，又能回收空，而且没有空间碎片，不会影响表上的索引及SQL的执行计划。</p>\n<h2><a name=\"t20\"></a><a name=\"t20\"></a><a id=\"_514\"></a>总结</h2>\n<p>通过从InnoDB存储空间分布，delete对性能的影响可以看到，delete物理删除既不能释放磁盘空间，而且会产生大量的碎片，导致索引频繁分裂，影响SQL执行计划的稳定性；</p>\n<p>同时在碎片回收时，会耗用大量的CPU，磁盘空间，影响表上正常的DML操作。</p>\n<p>在业务代码层面，应该做逻辑标记删除，避免物理删除；为了实现数据归档需求，可以用采用MySQL分区表特性来实现，都是DDL操作，没有碎片产生。</p>\n<p>另外一个比较好的方案采用Clickhouse，对有生命周期的数据表可以使用Clickhouse存储，利用其TTL特性实现无效数据自动清理。</p>\n<p>&nbsp;</p>","blogGoods":0,"blogId":"1330877080455553024","blogRead":0,"blogRemark":"MySQL","blogTitle":"面试官不讲武德问我：为什么MySQL不建议使用delete删除数据？","blogType":1,"createdTime":1606111996000,"version":3},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-12-25 00:04:55.410 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
