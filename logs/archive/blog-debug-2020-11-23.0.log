2020-11-23 00:00:12.243 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 00:00:12.247 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /BlAdmin/info(String), [](String), 1(Integer), null, GET(String), 11(Long), {"code":20000,"data":{"name":"田起凯","password":"","signature":"hold on","username":"admin"},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 00:00:12.332 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 00:00:12.555 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -==>  Preparing: SELECT type_id,type_name,type_blog_count,enable,deleted FROM bl_type WHERE ( enable = ? and deleted = ? ) 
2020-11-23 00:00:12.557 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -==> Parameters: 1(Integer), 0(Integer)
2020-11-23 00:00:12.594 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -<==      Total: 4
2020-11-23 00:00:12.638 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 00:00:12.639 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 88(Long), {"code":20000,"data":[{"deleted":0,"enable":1,"typeBlogCount":102,"typeId":1,"typeName":"Java"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"Python"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"going"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"Spring"}],"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 00:00:12.737 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 00:00:16.345 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image, blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-11-23 00:00:16.346 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-11-23 00:00:16.383 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -<==      Total: 1
2020-11-23 00:00:16.385 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-11-23 00:00:16.386 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-11-23 00:00:16.424 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-11-23 00:00:16.537 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 00:00:16.538 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 230(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1324038097171820544","blogImage":"Java","blogRead":0,"blogRemark":"BeanUtils它提供了对java反射和自省API的包装。它里面还有很多工具类，这里我们介绍一下copyProperties。","blogSource":"百度","blogTitle":"BeanUtils.copyProperties的用法","createdTime":"2020-11-04 17:17:33","typeName":"Java","updateTime":"2020-11-22 13:04:15"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":1,"totalPage":1},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 00:00:16.634 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 00:05:23.203 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 00:05:23.204 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /BlAdmin/info(String), [](String), 1(Integer), null, GET(String), 2(Long), {"code":20000,"data":{"name":"田起凯","password":"","signature":"hold on","username":"admin"},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 00:05:23.285 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 00:05:23.496 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -==>  Preparing: SELECT type_id,type_name,type_blog_count,enable,deleted FROM bl_type WHERE ( enable = ? and deleted = ? ) 
2020-11-23 00:05:23.497 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -==> Parameters: 1(Integer), 0(Integer)
2020-11-23 00:05:23.535 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -<==      Total: 4
2020-11-23 00:05:23.576 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 00:05:23.577 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), 	at com.tqk.blog.controller.AdminController.getLoginInfo(AdminController.java:67)
	at com.tqk.blog.controller.AdminController$$FastClassBySpringCGLIB$$5e004558.invoke(<generated>)
	at com.tqk.blog.aspect.RequestAspect.doAround(RequestAspect.java:65)
	at com.tqk.blog.controller.AdminController$$EnhancerBySpringCGLIB$$d2da400e.getLoginInfo(<generated>)
(String), GET(String), 88(Long), {"code":20000,"data":[{"deleted":0,"enable":1,"typeBlogCount":102,"typeId":1,"typeName":"Java"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"Python"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"going"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"Spring"}],"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 00:05:23.660 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 00:05:37.009 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image, blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-11-23 00:05:37.011 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-11-23 00:05:37.049 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -<==      Total: 1
2020-11-23 00:05:37.051 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-11-23 00:05:37.052 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-11-23 00:05:37.089 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-11-23 00:05:37.202 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 00:05:37.204 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 231(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1324038097171820544","blogImage":"Java","blogRead":0,"blogRemark":"BeanUtils它提供了对java反射和自省API的包装。它里面还有很多工具类，这里我们介绍一下copyProperties。","blogSource":"百度","blogTitle":"BeanUtils.copyProperties的用法","createdTime":"2020-11-04 17:17:33","typeName":"Java","updateTime":"2020-11-22 13:04:15"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":1,"totalPage":1},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 00:05:37.293 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 00:06:46.383 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -==>  Preparing: SELECT type_id,type_name,type_blog_count,enable,deleted FROM bl_type WHERE ( enable = ? and deleted = ? ) 
2020-11-23 00:06:46.384 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -==> Parameters: 1(Integer), 0(Integer)
2020-11-23 00:06:46.422 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -<==      Total: 4
2020-11-23 00:06:46.462 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 00:06:46.464 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 84(Long), {"code":20000,"data":[{"deleted":0,"enable":1,"typeBlogCount":102,"typeId":1,"typeName":"Java"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"Python"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"going"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"Spring"}],"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 00:06:46.544 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 00:06:46.545 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image, blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-11-23 00:06:46.547 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-11-23 00:06:46.588 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -<==      Total: 1
2020-11-23 00:06:46.589 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-11-23 00:06:46.589 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-11-23 00:06:46.629 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-11-23 00:06:46.755 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 00:06:46.756 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 254(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1324038097171820544","blogImage":"Java","blogRead":0,"blogRemark":"BeanUtils它提供了对java反射和自省API的包装。它里面还有很多工具类，这里我们介绍一下copyProperties。","blogSource":"百度","blogTitle":"BeanUtils.copyProperties的用法","createdTime":"2020-11-04 17:17:33","typeName":"Java","updateTime":"2020-11-22 13:04:15"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":1,"totalPage":1},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 00:06:46.847 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 00:07:01.026 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -==>  Preparing: SELECT type_id,type_name,type_blog_count,enable,deleted FROM bl_type WHERE ( enable = ? and deleted = ? ) 
2020-11-23 00:07:01.027 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -==> Parameters: 1(Integer), 0(Integer)
2020-11-23 00:07:01.067 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -<==      Total: 4
2020-11-23 00:07:01.111 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 00:07:01.112 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), org.springframework.dao.DataIntegrityViolationException: 
### Error updating database.  Cause: java.sql.SQLIntegrityConstraintViolationException: Column 'blog_type' cannot be null
### The error may involve com.tqk.blog.mapper.BlBlogMapper.save-Inline
### Cause: java.sql.SQLIntegrityConstraintViolationException: Column 'blog_type' cannot be null
; Column 'blog_type' cannot be null; nested exception is java.sql.SQLIntegrityConstraintViolationException: Column 'blog_type' cannot be null
	at com.tqk.blog.service.impl.BlogServiceImpl.save(BlogServiceImpl.java:52)
	at com.tqk.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$c89e2edd.invoke(<generated>)
	at com.tqk.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$6e653701.save(<generated>)
	at com.tqk.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$c89e2edd.invoke(<generated>)
	at com.tqk.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$68c397d.save(<generated>)
	at com.tqk.blog.controller.BlogController.save(BlogController.java:39)
	at com.tqk.blog.controller.BlogController$$FastClassBySpringCGLIB$$a4fc5e31.invoke(<generated>)
	at com.tqk.blog.aspect.RequestAspect.doAround(RequestAspect.java:65)
	at com.tqk.blog.controller.BlogController$$EnhancerBySpringCGLIB$$18f45a39.save(<generated>)
Caused by: java.sql.SQLIntegrityConstraintViolationException: Column 'blog_type' cannot be null
(String), GET(String), 86(Long), {"code":20000,"data":[{"deleted":0,"enable":1,"typeBlogCount":102,"typeId":1,"typeName":"Java"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"Python"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"going"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"Spring"}],"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 00:07:01.200 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image, blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-11-23 00:07:01.201 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 00:07:01.202 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-11-23 00:07:01.240 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -<==      Total: 1
2020-11-23 00:07:01.241 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-11-23 00:07:01.242 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-11-23 00:07:01.278 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-11-23 00:07:01.390 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 00:07:01.391 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), 	at com.tqk.blog.controller.AdminController.getLoginInfo(AdminController.java:67)
	at com.tqk.blog.controller.AdminController$$FastClassBySpringCGLIB$$5e004558.invoke(<generated>)
	at com.tqk.blog.aspect.RequestAspect.doAround(RequestAspect.java:65)
	at com.tqk.blog.controller.AdminController$$EnhancerBySpringCGLIB$$d2da400e.getLoginInfo(<generated>)
(String), POST(String), 226(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1324038097171820544","blogImage":"Java","blogRead":0,"blogRemark":"BeanUtils它提供了对java反射和自省API的包装。它里面还有很多工具类，这里我们介绍一下copyProperties。","blogSource":"百度","blogTitle":"BeanUtils.copyProperties的用法","createdTime":"2020-11-04 17:17:33","typeName":"Java","updateTime":"2020-11-22 13:04:15"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":1,"totalPage":1},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 00:07:01.471 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 00:07:04.180 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 00:07:04.181 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /BlAdmin/info(String), [](String), 1(Integer), null, GET(String), 3(Long), {"code":20000,"data":{"name":"田起凯","password":"","signature":"hold on","username":"admin"},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 00:07:04.262 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 00:07:04.456 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -==>  Preparing: SELECT type_id,type_name,type_blog_count,enable,deleted FROM bl_type WHERE ( enable = ? and deleted = ? ) 
2020-11-23 00:07:04.458 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -==> Parameters: 1(Integer), 0(Integer)
2020-11-23 00:07:04.499 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -<==      Total: 4
2020-11-23 00:07:04.540 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 00:07:04.542 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 90(Long), {"code":20000,"data":[{"deleted":0,"enable":1,"typeBlogCount":102,"typeId":1,"typeName":"Java"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"Python"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"going"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"Spring"}],"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 00:07:04.636 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 00:07:36.474 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -==>  Preparing: SELECT type_id,type_name,type_blog_count,enable,deleted FROM bl_type WHERE ( enable = ? and deleted = ? ) 
2020-11-23 00:07:36.476 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -==> Parameters: 1(Integer), 0(Integer)
2020-11-23 00:07:36.528 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -<==      Total: 4
2020-11-23 00:07:36.568 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 00:07:36.569 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 98(Long), {"code":20000,"data":[{"deleted":0,"enable":1,"typeBlogCount":102,"typeId":1,"typeName":"Java"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"Python"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"going"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"Spring"}],"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 00:07:36.660 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 00:07:36.743 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image, blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-11-23 00:07:36.744 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-11-23 00:07:36.859 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -<==      Total: 1
2020-11-23 00:07:36.861 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -==>  Preparing: SELECT type_id,type_name,type_blog_count,enable,deleted FROM bl_type WHERE ( enable = ? and deleted = ? ) 
2020-11-23 00:07:36.861 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-11-23 00:07:36.862 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-11-23 00:07:36.862 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -==> Parameters: 1(Integer), 0(Integer)
2020-11-23 00:07:36.901 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -<==      Total: 4
2020-11-23 00:07:36.902 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-11-23 00:07:36.948 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 00:07:36.949 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), 	at com.tqk.blog.controller.AdminController.getLoginInfo(AdminController.java:67)
	at com.tqk.blog.controller.AdminController$$FastClassBySpringCGLIB$$5e004558.invoke(<generated>)
	at com.tqk.blog.aspect.RequestAspect.doAround(RequestAspect.java:65)
	at com.tqk.blog.controller.AdminController$$EnhancerBySpringCGLIB$$d2da400e.getLoginInfo(<generated>)
(String), GET(String), 95(Long), {"code":20000,"data":[{"deleted":0,"enable":1,"typeBlogCount":102,"typeId":1,"typeName":"Java"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"Python"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"going"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"Spring"}],"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 00:07:37.051 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 00:07:37.054 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 00:07:37.053 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 332(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1324038097171820544","blogImage":"Java","blogRead":0,"blogRemark":"BeanUtils它提供了对java反射和自省API的包装。它里面还有很多工具类，这里我们介绍一下copyProperties。","blogSource":"百度","blogTitle":"BeanUtils.copyProperties的用法","createdTime":"2020-11-04 17:17:33","typeName":"Java","updateTime":"2020-11-22 13:04:15"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":1,"totalPage":1},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 00:07:37.179 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 00:07:39.970 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 00:07:39.971 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /BlAdmin/info(String), [](String), 1(Integer), null, GET(String), 2(Long), {"code":20000,"data":{"name":"田起凯","password":"","signature":"hold on","username":"admin"},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 00:07:40.064 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 00:07:40.276 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -==>  Preparing: SELECT type_id,type_name,type_blog_count,enable,deleted FROM bl_type WHERE ( enable = ? and deleted = ? ) 
2020-11-23 00:07:40.277 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -==> Parameters: 1(Integer), 0(Integer)
2020-11-23 00:07:40.317 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -<==      Total: 4
2020-11-23 00:07:40.361 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 00:07:40.362 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 88(Long), {"code":20000,"data":[{"deleted":0,"enable":1,"typeBlogCount":102,"typeId":1,"typeName":"Java"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"Python"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"going"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"Spring"}],"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 00:07:40.458 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 00:13:51.423 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 00:13:51.424 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /BlAdmin/info(String), [](String), 1(Integer), null, GET(String), 1(Long), {"code":20000,"data":{"name":"田起凯","password":"","signature":"hold on","username":"admin"},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 00:13:51.518 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 00:13:51.776 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -==>  Preparing: SELECT type_id,type_name,type_blog_count,enable,deleted FROM bl_type WHERE ( enable = ? and deleted = ? ) 
2020-11-23 00:13:51.777 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -==> Parameters: 1(Integer), 0(Integer)
2020-11-23 00:13:51.818 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -<==      Total: 4
2020-11-23 00:13:51.861 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 00:13:51.863 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), org.springframework.dao.DataIntegrityViolationException: 
### Error updating database.  Cause: java.sql.SQLIntegrityConstraintViolationException: Column 'blog_type' cannot be null
### The error may involve com.tqk.blog.mapper.BlBlogMapper.save-Inline
### Cause: java.sql.SQLIntegrityConstraintViolationException: Column 'blog_type' cannot be null
; Column 'blog_type' cannot be null; nested exception is java.sql.SQLIntegrityConstraintViolationException: Column 'blog_type' cannot be null
	at com.tqk.blog.service.impl.BlogServiceImpl.save(BlogServiceImpl.java:52)
	at com.tqk.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$c89e2edd.invoke(<generated>)
	at com.tqk.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$6e653701.save(<generated>)
	at com.tqk.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$c89e2edd.invoke(<generated>)
	at com.tqk.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$68c397d.save(<generated>)
	at com.tqk.blog.controller.BlogController.save(BlogController.java:39)
	at com.tqk.blog.controller.BlogController$$FastClassBySpringCGLIB$$a4fc5e31.invoke(<generated>)
	at com.tqk.blog.aspect.RequestAspect.doAround(RequestAspect.java:65)
	at com.tqk.blog.controller.BlogController$$EnhancerBySpringCGLIB$$18f45a39.save(<generated>)
Caused by: java.sql.SQLIntegrityConstraintViolationException: Column 'blog_type' cannot be null
(String), GET(String), 86(Long), {"code":20000,"data":[{"deleted":0,"enable":1,"typeBlogCount":102,"typeId":1,"typeName":"Java"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"Python"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"going"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"Spring"}],"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 00:13:51.959 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 00:14:08.254 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image, blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-11-23 00:14:08.255 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-11-23 00:14:08.299 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -<==      Total: 1
2020-11-23 00:14:08.301 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-11-23 00:14:08.302 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-11-23 00:14:08.342 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-11-23 00:14:08.462 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 00:14:08.463 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), 	at com.tqk.blog.controller.AdminController.getLoginInfo(AdminController.java:67)
	at com.tqk.blog.controller.AdminController$$FastClassBySpringCGLIB$$5e004558.invoke(<generated>)
	at com.tqk.blog.aspect.RequestAspect.doAround(RequestAspect.java:65)
	at com.tqk.blog.controller.AdminController$$EnhancerBySpringCGLIB$$d2da400e.getLoginInfo(<generated>)
(String), POST(String), 254(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1324038097171820544","blogImage":"Java","blogRead":0,"blogRemark":"BeanUtils它提供了对java反射和自省API的包装。它里面还有很多工具类，这里我们介绍一下copyProperties。","blogSource":"百度","blogTitle":"BeanUtils.copyProperties的用法","createdTime":"2020-11-04 17:17:33","typeName":"Java","updateTime":"2020-11-22 13:04:15"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":1,"totalPage":1},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 00:14:08.561 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 00:18:10.325 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 00:18:10.326 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /BlAdmin/info(String), [](String), 1(Integer), null, GET(String), 2(Long), {"code":20000,"data":{"name":"田起凯","password":"","signature":"hold on","username":"admin"},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 00:18:10.412 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 00:18:10.609 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -==>  Preparing: SELECT type_id,type_name,type_blog_count,enable,deleted FROM bl_type WHERE ( enable = ? and deleted = ? ) 
2020-11-23 00:18:10.610 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -==> Parameters: 1(Integer), 0(Integer)
2020-11-23 00:18:10.653 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -<==      Total: 4
2020-11-23 00:18:10.694 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 00:18:10.695 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 91(Long), {"code":20000,"data":[{"deleted":0,"enable":1,"typeBlogCount":102,"typeId":1,"typeName":"Java"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"Python"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"going"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"Spring"}],"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 00:18:10.782 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 00:18:15.975 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image, blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-11-23 00:18:15.976 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-11-23 00:18:16.027 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -<==      Total: 1
2020-11-23 00:18:16.029 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-11-23 00:18:16.031 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-11-23 00:18:16.077 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-11-23 00:18:16.205 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 00:18:16.206 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 274(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1324038097171820544","blogImage":"Java","blogRead":0,"blogRemark":"BeanUtils它提供了对java反射和自省API的包装。它里面还有很多工具类，这里我们介绍一下copyProperties。","blogSource":"百度","blogTitle":"BeanUtils.copyProperties的用法","createdTime":"2020-11-04 17:17:33","typeName":"Java","updateTime":"2020-11-22 13:04:15"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":1,"totalPage":1},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 00:18:16.322 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 00:19:04.434 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlTypeMapper.selectAll.debug:159 -==>  Preparing: SELECT type_id,type_name,type_blog_count,enable,deleted FROM bl_type 
2020-11-23 00:19:04.436 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlTypeMapper.selectAll.debug:159 -==> Parameters: 
2020-11-23 00:19:04.480 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlTypeMapper.selectAll.debug:159 -<==      Total: 4
2020-11-23 00:19:04.526 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 00:19:04.527 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), 	at com.tqk.blog.controller.AdminController.getLoginInfo(AdminController.java:67)
	at com.tqk.blog.controller.AdminController$$FastClassBySpringCGLIB$$5e004558.invoke(<generated>)
	at com.tqk.blog.aspect.RequestAspect.doAround(RequestAspect.java:65)
	at com.tqk.blog.controller.AdminController$$EnhancerBySpringCGLIB$$d2da400e.getLoginInfo(<generated>)
(String), GET(String), 103(Long), {"code":20000,"data":[{"deleted":0,"enable":1,"typeBlogCount":102,"typeId":1,"typeName":"Java"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"Python"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"going"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"Spring"}],"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 00:19:04.618 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 00:19:08.403 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image, blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-11-23 00:19:08.405 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-11-23 00:19:08.447 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -<==      Total: 1
2020-11-23 00:19:08.447 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-11-23 00:19:08.448 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-11-23 00:19:08.488 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-11-23 00:19:08.615 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 00:19:08.617 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 249(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1324038097171820544","blogImage":"Java","blogRead":0,"blogRemark":"BeanUtils它提供了对java反射和自省API的包装。它里面还有很多工具类，这里我们介绍一下copyProperties。","blogSource":"百度","blogTitle":"BeanUtils.copyProperties的用法","createdTime":"2020-11-04 17:17:33","typeName":"Java","updateTime":"2020-11-22 13:04:15"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":1,"totalPage":1},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 00:19:08.711 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 00:23:39.403 DEBUG [main]com.tqk.blog.BlogApplication.logStarting:56 -Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-11-23 00:24:59.987 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlAdminMapper.getByUsername.debug:159 -==>  Preparing: select name, header, signature, username, password from bl_admin where username = ? 
2020-11-23 00:25:00.015 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlAdminMapper.getByUsername.debug:159 -==> Parameters: admin(String)
2020-11-23 00:25:00.083 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlAdminMapper.getByUsername.debug:159 -<==      Total: 1
2020-11-23 00:25:00.246 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 00:25:00.249 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /BlAdmin/login(String), [com.tqk.blog.pojo.BlAdmin@6dbaece0](String), 1(Integer), null, POST(String), 194(Long), {"code":20000,"data":{"token":"312E0459D310C58BFAAAD6120C717C0C"},"msg":"操作成功！"}(String), 0:0:0:0:0:0:0:1(String)
2020-11-23 00:25:00.329 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 00:25:04.867 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlTypeMapper.selectAll.debug:159 -==>  Preparing: SELECT type_id,type_name,type_blog_count,enable,deleted FROM bl_type 
2020-11-23 00:25:04.867 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlTypeMapper.selectAll.debug:159 -==> Parameters: 
2020-11-23 00:25:04.902 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlTypeMapper.selectAll.debug:159 -<==      Total: 4
2020-11-23 00:25:04.946 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 00:25:04.948 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 89(Long), {"code":20000,"data":[{"deleted":0,"enable":1,"typeBlogCount":102,"typeId":1,"typeName":"Java"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"Python"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"going"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"Spring"}],"msg":"操作成功！"}(String), 0:0:0:0:0:0:0:1(String)
2020-11-23 00:25:05.025 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 00:25:12.222 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -==>  Preparing: SELECT type_id,type_name,type_blog_count,enable,deleted FROM bl_type WHERE ( enable = ? and deleted = ? ) 
2020-11-23 00:25:12.224 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -==> Parameters: 1(Integer), 0(Integer)
2020-11-23 00:25:12.259 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -<==      Total: 4
2020-11-23 00:25:12.296 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 00:25:12.298 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 118(Long), {"code":20000,"data":[{"deleted":0,"enable":1,"typeBlogCount":102,"typeId":1,"typeName":"Java"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"Python"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"going"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"Spring"}],"msg":"操作成功！"}(String), 0:0:0:0:0:0:0:1(String)
2020-11-23 00:25:12.372 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 00:25:32.085 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 00:25:32.086 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /BlAdmin/info(String), [](String), 0(Integer), 	at com.tqk.blog.controller.AdminController.getLoginInfo(AdminController.java:67)
	at com.tqk.blog.controller.AdminController$$FastClassBySpringCGLIB$$5e004558.invoke(<generated>)
	at com.tqk.blog.aspect.RequestAspect.doAround(RequestAspect.java:65)
	at com.tqk.blog.controller.AdminController$$EnhancerBySpringCGLIB$$4048597d.getLoginInfo(<generated>)
(String), GET(String), 0(Long), null, 192.168.101.29(String)
2020-11-23 00:25:32.163 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 00:25:33.583 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlAdminMapper.getByUsername.debug:159 -==>  Preparing: select name, header, signature, username, password from bl_admin where username = ? 
2020-11-23 00:25:33.584 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlAdminMapper.getByUsername.debug:159 -==> Parameters: admin(String)
2020-11-23 00:25:33.618 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlAdminMapper.getByUsername.debug:159 -<==      Total: 1
2020-11-23 00:25:33.656 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 00:25:33.657 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /BlAdmin/login(String), [com.tqk.blog.pojo.BlAdmin@29efeb46](String), 1(Integer), null, POST(String), 80(Long), {"code":20000,"data":{"token":"50EA012848E76B7D47B75A8C48CB15AF"},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 00:25:33.732 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 00:25:33.814 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 00:25:33.816 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /BlAdmin/info(String), [](String), 1(Integer), null, GET(String), 4(Long), {"code":20000,"data":{"name":"田起凯","password":"","signature":"hold on","username":"admin"},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 00:25:33.893 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 00:25:34.351 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -==>  Preparing: SELECT type_id,type_name,type_blog_count,enable,deleted FROM bl_type WHERE ( enable = ? and deleted = ? ) 
2020-11-23 00:25:34.353 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -==> Parameters: 1(Integer), 0(Integer)
2020-11-23 00:25:34.388 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -<==      Total: 4
2020-11-23 00:25:34.425 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 00:25:34.426 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 82(Long), {"code":20000,"data":[{"deleted":0,"enable":1,"typeBlogCount":102,"typeId":1,"typeName":"Java"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"Python"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"going"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"Spring"}],"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 00:25:34.500 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 00:25:37.703 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image, blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-11-23 00:25:37.704 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-11-23 00:25:37.739 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -<==      Total: 1
2020-11-23 00:25:37.740 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-11-23 00:25:37.741 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-11-23 00:25:37.775 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-11-23 00:25:37.906 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 00:25:37.908 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 234(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1324038097171820544","blogImage":"Java","blogRead":0,"blogRemark":"BeanUtils它提供了对java反射和自省API的包装。它里面还有很多工具类，这里我们介绍一下copyProperties。","blogSource":"百度","blogTitle":"BeanUtils.copyProperties的用法","createdTime":"2020-11-04 17:17:33","typeName":"Java","updateTime":"2020-11-22 13:04:15"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":1,"totalPage":1},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 00:25:37.983 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 00:26:50.066 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlTypeMapper.selectAll.debug:159 -==>  Preparing: SELECT type_id,type_name,type_blog_count,enable,deleted FROM bl_type 
2020-11-23 00:26:50.068 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlTypeMapper.selectAll.debug:159 -==> Parameters: 
2020-11-23 00:26:50.108 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlTypeMapper.selectAll.debug:159 -<==      Total: 4
2020-11-23 00:26:50.149 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 00:26:50.150 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 88(Long), {"code":20000,"data":[{"deleted":0,"enable":1,"typeBlogCount":102,"typeId":1,"typeName":"Java"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"Python"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"going"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"Spring"}],"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 00:26:50.233 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 00:26:50.765 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image, blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-11-23 00:26:50.767 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-11-23 00:26:50.802 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -<==      Total: 1
2020-11-23 00:26:50.803 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-11-23 00:26:50.803 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-11-23 00:26:50.836 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-11-23 00:26:50.941 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 00:26:50.944 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 205(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1324038097171820544","blogImage":"Java","blogRead":0,"blogRemark":"BeanUtils它提供了对java反射和自省API的包装。它里面还有很多工具类，这里我们介绍一下copyProperties。","blogSource":"百度","blogTitle":"BeanUtils.copyProperties的用法","createdTime":"2020-11-04 17:17:33","typeName":"Java","updateTime":"2020-11-22 13:04:15"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":1,"totalPage":1},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 00:26:51.034 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 00:29:47.538 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image, blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-11-23 00:29:47.539 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-11-23 00:29:47.573 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -<==      Total: 1
2020-11-23 00:29:47.574 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-11-23 00:29:47.575 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-11-23 00:29:47.609 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-11-23 00:29:47.711 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 00:29:47.712 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 211(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1324038097171820544","blogImage":"Java","blogRead":0,"blogRemark":"BeanUtils它提供了对java反射和自省API的包装。它里面还有很多工具类，这里我们介绍一下copyProperties。","blogSource":"百度","blogTitle":"BeanUtils.copyProperties的用法","createdTime":"2020-11-04 17:17:33","typeName":"Java","updateTime":"2020-11-22 13:04:15"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":1,"totalPage":1},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 00:29:47.788 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 00:29:49.765 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 00:29:49.767 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /BlAdmin/info(String), [](String), 1(Integer), 	at com.tqk.blog.controller.AdminController.getLoginInfo(AdminController.java:67)
	at com.tqk.blog.controller.AdminController$$FastClassBySpringCGLIB$$5e004558.invoke(<generated>)
	at com.tqk.blog.aspect.RequestAspect.doAround(RequestAspect.java:65)
	at com.tqk.blog.controller.AdminController$$EnhancerBySpringCGLIB$$4048597d.getLoginInfo(<generated>)
(String), GET(String), 2(Long), {"code":20000,"data":{"name":"田起凯","password":"","signature":"hold on","username":"admin"},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 00:29:49.840 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 00:29:50.014 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -==>  Preparing: SELECT type_id,type_name,type_blog_count,enable,deleted FROM bl_type WHERE ( enable = ? and deleted = ? ) 
2020-11-23 00:29:50.015 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -==> Parameters: 1(Integer), 0(Integer)
2020-11-23 00:29:50.050 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -<==      Total: 4
2020-11-23 00:29:50.086 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 00:29:50.087 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 76(Long), {"code":20000,"data":[{"deleted":0,"enable":1,"typeBlogCount":102,"typeId":1,"typeName":"Java"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"Python"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"going"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"Spring"}],"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 00:29:50.161 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 00:29:52.938 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image, blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-11-23 00:29:52.939 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-11-23 00:29:52.975 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -<==      Total: 1
2020-11-23 00:29:52.977 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-11-23 00:29:52.978 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-11-23 00:29:53.012 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-11-23 00:29:53.126 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 00:29:53.128 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 216(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1324038097171820544","blogImage":"Java","blogRead":0,"blogRemark":"BeanUtils它提供了对java反射和自省API的包装。它里面还有很多工具类，这里我们介绍一下copyProperties。","blogSource":"百度","blogTitle":"BeanUtils.copyProperties的用法","createdTime":"2020-11-04 17:17:33","typeName":"Java","updateTime":"2020-11-22 13:04:15"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":1,"totalPage":1},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 00:29:53.207 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 00:30:21.183 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image, blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-11-23 00:30:21.184 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-11-23 00:30:21.221 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -<==      Total: 1
2020-11-23 00:30:21.222 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-11-23 00:30:21.223 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-11-23 00:30:21.256 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-11-23 00:30:21.356 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 00:30:21.357 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 212(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1324038097171820544","blogImage":"Java","blogRead":0,"blogRemark":"BeanUtils它提供了对java反射和自省API的包装。它里面还有很多工具类，这里我们介绍一下copyProperties。","blogSource":"百度","blogTitle":"BeanUtils.copyProperties的用法","createdTime":"2020-11-04 17:17:33","typeName":"Java","updateTime":"2020-11-22 13:04:15"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":1,"totalPage":1},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 00:30:21.431 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 00:30:24.022 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 00:30:24.025 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /BlAdmin/info(String), [](String), 1(Integer), null, GET(String), 4(Long), {"code":20000,"data":{"name":"田起凯","password":"","signature":"hold on","username":"admin"},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 00:30:24.101 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 00:30:24.278 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -==>  Preparing: SELECT type_id,type_name,type_blog_count,enable,deleted FROM bl_type WHERE ( enable = ? and deleted = ? ) 
2020-11-23 00:30:24.279 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -==> Parameters: 1(Integer), 0(Integer)
2020-11-23 00:30:24.312 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -<==      Total: 4
2020-11-23 00:30:24.348 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 00:30:24.350 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 73(Long), {"code":20000,"data":[{"deleted":0,"enable":1,"typeBlogCount":102,"typeId":1,"typeName":"Java"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"Python"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"going"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"Spring"}],"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 00:30:24.426 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 00:30:29.071 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image, blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-11-23 00:30:29.072 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-11-23 00:30:29.109 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -<==      Total: 1
2020-11-23 00:30:29.111 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-11-23 00:30:29.111 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-11-23 00:30:29.146 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-11-23 00:30:29.250 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 00:30:29.251 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 213(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1324038097171820544","blogImage":"Java","blogRead":0,"blogRemark":"BeanUtils它提供了对java反射和自省API的包装。它里面还有很多工具类，这里我们介绍一下copyProperties。","blogSource":"百度","blogTitle":"BeanUtils.copyProperties的用法","createdTime":"2020-11-04 17:17:33","typeName":"Java","updateTime":"2020-11-22 13:04:15"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":1,"totalPage":1},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 00:30:29.329 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 21:35:15.583 DEBUG [main]com.tqk.blog.BlogApplication.logStarting:56 -Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-11-23 21:35:35.118 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlAdminMapper.getByUsername.debug:159 -==>  Preparing: select name, header, signature, username, password from bl_admin where username = ? 
2020-11-23 21:35:35.154 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlAdminMapper.getByUsername.debug:159 -==> Parameters: admin(String)
2020-11-23 21:35:35.223 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlAdminMapper.getByUsername.debug:159 -<==      Total: 1
2020-11-23 21:35:35.387 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 21:35:35.393 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /BlAdmin/login(String), [com.tqk.blog.pojo.BlAdmin@35afd392](String), 1(Integer), null, POST(String), 223(Long), {"code":20000,"data":{"token":"37BCA661094C2BE4A89496C0608B36E5"},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 21:35:35.478 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 21:35:35.590 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 21:35:35.592 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /BlAdmin/info(String), [](String), 1(Integer), null, GET(String), 2(Long), {"code":20000,"data":{"name":"田起凯","password":"","signature":"hold on","username":"admin"},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 21:35:35.675 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 21:35:35.916 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -==>  Preparing: SELECT type_id,type_name,type_blog_count,enable,deleted FROM bl_type WHERE ( enable = ? and deleted = ? ) 
2020-11-23 21:35:35.917 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -==> Parameters: 1(Integer), 0(Integer)
2020-11-23 21:35:35.958 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -<==      Total: 4
2020-11-23 21:35:36.008 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 21:35:36.012 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 143(Long), {"code":20000,"data":[{"deleted":0,"enable":1,"typeBlogCount":102,"typeId":1,"typeName":"Java"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"Python"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"going"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"Spring"}],"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 21:35:36.100 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 21:35:40.100 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlTypeMapper.selectAll.debug:159 -==>  Preparing: SELECT type_id,type_name,type_blog_count,enable,deleted FROM bl_type 
2020-11-23 21:35:40.102 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlTypeMapper.selectAll.debug:159 -==> Parameters: 
2020-11-23 21:35:40.141 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlTypeMapper.selectAll.debug:159 -<==      Total: 4
2020-11-23 21:35:40.186 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 21:35:40.189 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 85(Long), {"code":20000,"data":[{"deleted":0,"enable":1,"typeBlogCount":102,"typeId":1,"typeName":"Java"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"Python"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"going"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"Spring"}],"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 21:35:40.283 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 21:35:42.182 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image, blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-11-23 21:35:42.183 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-11-23 21:35:42.222 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -<==      Total: 1
2020-11-23 21:35:42.223 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-11-23 21:35:42.224 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-11-23 21:35:42.266 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-11-23 21:35:42.397 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 21:35:42.398 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 281(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1324038097171820544","blogImage":"Java","blogRead":0,"blogRemark":"BeanUtils它提供了对java反射和自省API的包装。它里面还有很多工具类，这里我们介绍一下copyProperties。","blogSource":"百度","blogTitle":"BeanUtils.copyProperties的用法","createdTime":"2020-11-04 17:17:33","typeName":"Java","updateTime":"2020-11-22 13:04:15"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":1,"totalPage":1},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 21:35:42.479 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 22:05:59.900 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image, blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-11-23 22:05:59.902 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-11-23 22:05:59.942 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -<==      Total: 1
2020-11-23 22:05:59.944 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-11-23 22:05:59.945 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-11-23 22:05:59.984 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-11-23 22:06:00.104 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 22:06:00.106 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 245(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1324038097171820544","blogImage":"Java","blogRead":0,"blogRemark":"BeanUtils它提供了对java反射和自省API的包装。它里面还有很多工具类，这里我们介绍一下copyProperties。","blogSource":"百度","blogTitle":"BeanUtils.copyProperties的用法","createdTime":"2020-11-04 17:17:33","typeName":"Java","updateTime":"2020-11-22 13:04:15"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":1,"totalPage":1},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 22:06:00.187 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 22:08:00.551 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image, blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-11-23 22:08:00.552 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-11-23 22:08:00.593 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -<==      Total: 1
2020-11-23 22:08:00.594 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-11-23 22:08:00.596 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-11-23 22:08:00.638 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-11-23 22:08:00.763 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 22:08:00.767 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 251(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1324038097171820544","blogImage":"Java","blogRead":0,"blogRemark":"BeanUtils它提供了对java反射和自省API的包装。它里面还有很多工具类，这里我们介绍一下copyProperties。","blogSource":"百度","blogTitle":"BeanUtils.copyProperties的用法","createdTime":"2020-11-04 17:17:33","typeName":"Java","updateTime":"2020-11-22 13:04:15"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":1,"totalPage":1},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 22:08:00.856 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 22:09:43.532 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image, blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-11-23 22:09:43.535 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-11-23 22:09:43.579 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -<==      Total: 1
2020-11-23 22:09:43.581 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-11-23 22:09:43.582 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-11-23 22:09:43.646 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-11-23 22:09:43.781 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 22:09:43.782 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 329(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1324038097171820544","blogImage":"Java","blogRead":0,"blogRemark":"BeanUtils它提供了对java反射和自省API的包装。它里面还有很多工具类，这里我们介绍一下copyProperties。","blogSource":"百度","blogTitle":"BeanUtils.copyProperties的用法","createdTime":"2020-11-04 17:17:33","typeName":"Java","updateTime":"2020-11-22 13:04:15"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":1,"totalPage":1},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 22:09:43.874 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 22:10:40.773 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 22:10:40.774 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /BlAdmin/info(String), [](String), 0(Integer), 	at com.tqk.blog.controller.AdminController.getLoginInfo(AdminController.java:67)
	at com.tqk.blog.controller.AdminController$$FastClassBySpringCGLIB$$5e004558.invoke(<generated>)
	at com.tqk.blog.aspect.RequestAspect.doAround(RequestAspect.java:65)
	at com.tqk.blog.controller.AdminController$$EnhancerBySpringCGLIB$$8053c02.getLoginInfo(<generated>)
(String), GET(String), 0(Long), null, 192.168.101.29(String)
2020-11-23 22:10:40.855 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 22:10:45.848 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlAdminMapper.getByUsername.debug:159 -==>  Preparing: select name, header, signature, username, password from bl_admin where username = ? 
2020-11-23 22:10:45.849 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlAdminMapper.getByUsername.debug:159 -==> Parameters: admin(String)
2020-11-23 22:10:45.887 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlAdminMapper.getByUsername.debug:159 -<==      Total: 1
2020-11-23 22:10:45.933 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 22:10:45.934 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /BlAdmin/login(String), [com.tqk.blog.pojo.BlAdmin@12ec4c11](String), 1(Integer), null, POST(String), 85(Long), {"code":20000,"data":{"token":"0FC0EC1977236E10C962F7EEA8E4662C"},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 22:10:46.036 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 22:10:46.092 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 22:10:46.094 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /BlAdmin/info(String), [](String), 1(Integer), null, GET(String), 1(Long), {"code":20000,"data":{"name":"田起凯","password":"","signature":"hold on","username":"admin"},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 22:10:46.176 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 22:10:46.615 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -==>  Preparing: SELECT type_id,type_name,type_blog_count,enable,deleted FROM bl_type WHERE ( enable = ? and deleted = ? ) 
2020-11-23 22:10:46.616 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -==> Parameters: 1(Integer), 0(Integer)
2020-11-23 22:10:46.656 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -<==      Total: 4
2020-11-23 22:10:46.700 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 22:10:46.702 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 91(Long), {"code":20000,"data":[{"deleted":0,"enable":1,"typeBlogCount":102,"typeId":1,"typeName":"Java"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"Python"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"going"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"Spring"}],"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 22:10:46.783 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 22:10:49.154 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image, blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-11-23 22:10:49.154 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-11-23 22:10:49.194 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -<==      Total: 1
2020-11-23 22:10:49.195 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-11-23 22:10:49.196 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-11-23 22:10:49.232 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-11-23 22:10:49.346 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 22:10:49.348 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 231(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1324038097171820544","blogImage":"Java","blogRead":0,"blogRemark":"BeanUtils它提供了对java反射和自省API的包装。它里面还有很多工具类，这里我们介绍一下copyProperties。","blogSource":"百度","blogTitle":"BeanUtils.copyProperties的用法","createdTime":"2020-11-04 17:17:33","typeName":"Java","updateTime":"2020-11-22 13:04:15"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":1,"totalPage":1},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 22:10:49.431 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 22:13:17.138 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlBlogMapper.save.debug:159 -==>  Preparing: insert into bl_blog( blog_id, blog_title,blog_image, blog_content, blog_type, blog_remark, blog_source ) values ( ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 22:13:17.143 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlBlogMapper.save.debug:159 -==> Parameters: 1330877080455553024(String), (String), null, <h2>前言</h2>
<p>我负责的有几个系统随着业务量的增长，存储在MySQL中的数据日益剧增，我当时就想现在的业务方不讲武德，搞偷袭，趁我没反应过来把很多表，很快，很快啊都打到了亿级别，我大意了，没有闪，这就导致跟其Join的表的SQL变得很慢，对的应用接口的response time也变长了，影响了用户体验。</p>
<p>事后我找到业务方，我批评了他们跟他们说要讲武德，连忙跟我道歉，这个事情才就此作罢，走的时候我对他们说下次不要这样了，耗子尾汁，好好反思。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/3c93aececcb9e763f5476362c4e88710.png" alt="" /></p>
<p>骂归骂，事情还是得解决，时候我分析原因发现，发现有些表的数据量增长很快，对应SQL扫描了很多无效数据，导致SQL慢了下来，通过确认之后，这些大表都是一些流水、记录、日志类型数据，只需要保留1到3个月，此时需要对表做数据清理实现瘦身，一般都会想到用insert + delete的方式去清理。</p>
<p>这篇文章我会从InnoDB存储空间分布，delete对性能的影响，以及优化建议方面解释为什么不建议delete删除数据。</p>
<h2><a name="t1"></a><a name="t1"></a><a id="InnoDB_16"></a>InnoDB存储架构</h2>
<p><img src="https://img-blog.csdnimg.cn/img_convert/5c66ffe9749c58e1613d2519f7ea7211.png" alt="" /></p>
<p>从这张图可以看到，InnoDB存储结构主要包括两部分：逻辑存储结构和物理存储结构。</p>
<p>逻辑上是由表空间tablespace &mdash;&gt; 段segment或者inode &mdash;&gt; 区Extent &mdash;&mdash;&gt;数据页Page构成，Innodb逻辑管理单位是segment，空间分配的最小单位是extent，每个segment都会从表空间FREE_PAGE中分配32个page，当这32个page不够用时，会按照以下原则进行扩展：如果当前小于1个extent，则扩展到1个extent；当表空间小于32MB时，每次扩展一个extent；表空间大于32MB，每次扩展4个extent。</p>
<p>物理上主要由系统用户数据文件，日志文件组成，数据文件主要存储MySQL字典数据和用户数据，日志文件记录的是data page的变更记录，用于MySQL Crash时的恢复。</p>
<h2><a name="t2"></a><a name="t2"></a><a id="Innodb_26"></a>Innodb表空间</h2>
<p>InnoDB存储包括三类表空间：系统表空间，用户表空间，Undo表空间。</p>
<p><strong>系统表空间：</strong>&nbsp;主要存储MySQL内部的数据字典数据，如information_schema下的数据。</p>
<p><strong>用户表空间：</strong>&nbsp;当开启innodb_file_per_table=1时，数据表从系统表空间独立出来存储在以table_name.ibd命令的数据文件中，结构信息存储在table_name.frm文件中。</p>
<p><strong>Undo表空间：</strong>&nbsp;存储Undo信息，如快照一致读和flashback都是利用undo信息。</p>
<p>从MySQL 8.0开始允许用户自定义表空间，具体语法如下：</p>
<pre class="prettyprint"><code class="prism language-mysql has-numbering">CREATE TABLESPACE tablespace_name
    ADD DATAFILE 'file_name'               #数据文件名
    USE LOGFILE GROUP logfile_group        #自定义日志文件组，一般每组2个logfile。
    [EXTENT_SIZE [=] extent_size]          #区大小
    [INITIAL_SIZE [=] initial_size]        #初始化大小 
    [AUTOEXTEND_SIZE [=] autoextend_size]  #自动扩宽尺寸
    [MAX_SIZE [=] max_size]                #单个文件最大size，最大是32G。
    [NODEGROUP [=] nodegroup_id]           #节点组
    [WAIT]
    [COMMENT [=] comment_text]
    ENGINE [=] engine_name
</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
<li>9</li>
<li>10</li>
<li>11</li>
</ul>
<p>这样的好处是可以做到数据的冷热分离，分别用HDD和SSD来存储，既能实现数据的高效访问，又能节约成本，比如可以添加两块500G硬盘，经过创建卷组vg，划分逻辑卷lv，创建数据目录并mount相应的lv，假设划分的两个目录分别是/hot_data 和 /cold_data。</p>
<p>这样就可以将核心的业务表如用户表，订单表存储在高性能SSD盘上，一些日志，流水表存储在普通的HDD上，主要的操作步骤如下：</p>
<pre class="prettyprint"><code class="prism language-mysql has-numbering">#创建热数据表空间
create tablespace tbs_data_hot add datafile '/hot_data/tbs_data_hot01.dbf' max_size 20G;
#创建核心业务表存储在热数据表空间
create table booking(id bigint not null primary key auto_increment, &hellip;&hellip; ) tablespace tbs_data_hot;
#创建冷数据表空间
create tablespace tbs_data_cold add datafile '/hot_data/tbs_data_cold01.dbf' max_size 20G;
#创建日志，流水，备份类的表存储在冷数据表空间
create table payment_log(id bigint not null primary key auto_increment, &hellip;&hellip; ) tablespace tbs_data_cold;
#可以移动表到另一个表空间
alter table payment_log tablespace tbs_data_hot;
</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
<li>9</li>
<li>10</li>
</ul>
<h2><a name="t3"></a><a name="t3"></a><a id="Inndob_69"></a>Inndob存储分布</h2>
<h3><a name="t4"></a><a name="t4"></a><a id="_71"></a>创建空表查看空间变化</h3>
<pre class="prettyprint"><code class="prism language-mysql has-numbering">mysql&gt; create table user(id bigint not null primary key auto_increment, 
    -&gt; name varchar(20) not null default '' comment '姓名', 
    -&gt; age tinyint not null default 0 comment 'age', 
    -&gt; gender char(1) not null default 'M'  comment '性别',
    -&gt; phone varchar(16) not null default '' comment '手机号',
    -&gt; create_time datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
    -&gt; update_time datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间'
    -&gt; ) engine = InnoDB DEFAULT CHARSET=utf8mb4 COMMENT '用户信息表';
Query OK, 0 rows affected (0.26 sec)
</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
<li>9</li>
</ul>
<pre class="prettyprint"><code class="prism language-bash has-numbering"><span class="token comment"># ls -lh user1.ibd </span>
-rw-r----- 1 mysql mysql 96K Nov  6 12:48 user.ibd
</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
</ul>
<p>设置参数innodb_file_per_table=1时，创建表时会自动创建一个segment，同时分配一个extent，包含32个data page的来存储数据，这样创建的空表默认大小就是96KB，extent使用完之后会申请64个连接页，这样对于一些小表，或者undo segment，可以在开始时申请较少的空间，节省磁盘容量的开销。</p>
<pre class="prettyprint"><code class="prism language-shell has-numbering"><span class="token comment"># python2 py_innodb_page_info.py -v /data2/mysql/test/user.ibd</span>
page offset 00000000, page <span class="token function">type</span> <span class="token operator">&lt;</span>File Space Header<span class="token operator">&gt;</span>
page offset 00000001, page <span class="token function">type</span> <span class="token operator">&lt;</span>Insert Buffer Bitmap<span class="token operator">&gt;</span>
page offset 00000002, page <span class="token function">type</span> <span class="token operator">&lt;</span>File Segment inode<span class="token operator">&gt;</span>
page offset 00000003, page <span class="token function">type</span> <span class="token operator">&lt;</span>B-tree Node<span class="token operator">&gt;</span>, page level <span class="token operator">&lt;</span>0000<span class="token operator">&gt;</span>
page offset 00000000, page <span class="token function">type</span> <span class="token operator">&lt;</span>Freshly Allocated Page<span class="token operator">&gt;</span>
page offset 00000000, page <span class="token function">type</span> <span class="token operator">&lt;</span>Freshly Allocated Page<span class="token operator">&gt;</span>
Total number of page: 6:      <span class="token comment">#总共分配的页数</span>
Freshly Allocated Page: 2     <span class="token comment">#可用的数据页</span>
Insert Buffer Bitmap: 1       <span class="token comment">#插入缓冲页</span>
File Space Header: 1          <span class="token comment">#文件空间头</span>
B-tree Node: 1                <span class="token comment">#数据页</span>
File Segment inode: 1         <span class="token comment">#文件端inonde，如果是在ibdata1.ibd上会有多个inode。</span>
</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
<li>9</li>
<li>10</li>
<li>11</li>
<li>12</li>
<li>13</li>
</ul>
<h3><a name="t5"></a><a name="t5"></a><a id="_108"></a>插入数据后的空间变化</h3>
<pre class="prettyprint"><code class="prism language-mysql has-numbering">mysql&gt; DELIMITER $$
mysql&gt; CREATE PROCEDURE insert_user_data(num INTEGER) 
    -&gt; BEGIN
    -&gt;     DECLARE v_i int unsigned DEFAULT 0;
    -&gt; set autocommit= 0;
    -&gt; WHILE v_i &lt; num DO
    -&gt;    insert into user(`name`, age, gender, phone) values (CONCAT('lyn',v_i), mod(v_i,120), 'M', CONCAT('152',ROUND(RAND(1)*100000000)));
    -&gt;  SET v_i = v_i+1;
    -&gt; END WHILE;
    -&gt; commit;
    -&gt; END $$
Query OK, 0 rows affected (0.01 sec)
mysql&gt; DELIMITER ;

#插入10w数据
mysql&gt; call insert_user_data(100000);
Query OK, 0 rows affected (6.69 sec)
</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
<li>9</li>
<li>10</li>
<li>11</li>
<li>12</li>
<li>13</li>
<li>14</li>
<li>15</li>
<li>16</li>
<li>17</li>
</ul>
<pre class="prettyprint"><code class="prism language-shell has-numbering"><span class="token comment"># ls -lh user.ibd</span>
-rw-r----- 1 mysql mysql 14M Nov 6 10:58 /data2/mysql/test/user.ibd

<span class="token comment"># python2 py_innodb_page_info.py -v /data2/mysql/test/user.ibd</span>
page offset 00000000, page <span class="token function">type</span> <span class="token operator">&lt;</span>File Space Header<span class="token operator">&gt;</span>
page offset 00000001, page <span class="token function">type</span> <span class="token operator">&lt;</span>Insert Buffer Bitmap<span class="token operator">&gt;</span>
page offset 00000002, page <span class="token function">type</span> <span class="token operator">&lt;</span>File Segment inode<span class="token operator">&gt;</span>
page offset 00000003, page <span class="token function">type</span> <span class="token operator">&lt;</span>B-tree Node<span class="token operator">&gt;</span>, page level <span class="token operator">&lt;</span>0001<span class="token operator">&gt;</span>   <span class="token comment">#增加了一个非叶子节点，树的高度从1变为2.</span>
<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>
page offset 00000000, page <span class="token function">type</span> <span class="token operator">&lt;</span>Freshly Allocated Page<span class="token operator">&gt;</span>
Total number of page: 896:
Freshly Allocated Page: 493
Insert Buffer Bitmap: 1
File Space Header: 1
B-tree Node: 400
File Segment inode: 1
</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
<li>9</li>
<li>10</li>
<li>11</li>
<li>12</li>
<li>13</li>
<li>14</li>
<li>15</li>
<li>16</li>
</ul>
<h3><a name="t6"></a><a name="t6"></a><a id="delete_149"></a>delete数据后的空间变化</h3>
<pre class="prettyprint"><code class="prism language-mysql has-numbering">mysql&gt; select min(id),max(id),count(*) from user;
+---------+---------+----------+
| min(id) | max(id) | count(*) |
+---------+---------+----------+
|       1 |  100000 |   100000 |
+---------+---------+----------+
1 row in set (0.05 sec)
#删除50000条数据，理论上空间应该从14MB变长7MB左右。
mysql&gt; delete from user limit 50000;
Query OK, 50000 rows affected (0.25 sec)

#数据文件大小依然是14MB，没有缩小。
# ls -lh /data2/mysql/test/user1.ibd 
-rw-r----- 1 mysql mysql 14M Nov  6 13:22 /data2/mysql/test/user.ibd

#数据页没有被回收。
# python2 py_innodb_page_info.py -v /data2/mysql/test/user.ibd
page offset 00000000, page type &lt;File Space Header&gt;
page offset 00000001, page type &lt;Insert Buffer Bitmap&gt;
page offset 00000002, page type &lt;File Segment inode&gt;
page offset 00000003, page type &lt;B-tree Node&gt;, page level &lt;0001&gt;
........................................................
page offset 00000000, page type &lt;Freshly Allocated Page&gt;
Total number of page: 896:
Freshly Allocated Page: 493
Insert Buffer Bitmap: 1
File Space Header: 1
B-tree Node: 400
File Segment inode: 1
#在MySQL内部是标记删除，
</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
<li>9</li>
<li>10</li>
<li>11</li>
<li>12</li>
<li>13</li>
<li>14</li>
<li>15</li>
<li>16</li>
<li>17</li>
<li>18</li>
<li>19</li>
<li>20</li>
<li>21</li>
<li>22</li>
<li>23</li>
<li>24</li>
<li>25</li>
<li>26</li>
<li>27</li>
<li>28</li>
<li>29</li>
<li>30</li>
</ul>
<pre class="prettyprint"><code class="prism language-mysql has-numbering">mysql&gt; use information_schema;

Database changed
mysql&gt; SELECT A.SPACE AS TBL_SPACEID, A.TABLE_ID, A.NAME AS TABLE_NAME, FILE_FORMAT, ROW_FORMAT, SPACE_TYPE,  B.INDEX_ID , B.NAME AS INDEX_NAME, PAGE_NO, B.TYPE AS INDEX_TYPE FROM INNODB_SYS_TABLES A LEFT JOIN INNODB_SYS_INDEXES B ON A.TABLE_ID =B.TABLE_ID WHERE A.NAME = 'test/user1';
+-------------+----------+------------+-------------+------------+------------+----------+------------+---------+------------+
| TBL_SPACEID | TABLE_ID | TABLE_NAME | FILE_FORMAT | ROW_FORMAT | SPACE_TYPE | INDEX_ID | INDEX_NAME | PAGE_NO | INDEX_TYPE |
+-------------+----------+------------+-------------+------------+------------+----------+------------+---------+------------+
|        1283 |     1207 | test/user | Barracuda   | Dynamic    | Single     |     2236 | PRIMARY    |       3 |          3 |
+-------------+----------+------------+-------------+------------+------------+----------+------------+---------+------------+
1 row in set (0.01 sec)

PAGE_NO = 3 标识B-tree的root page是3号页，INDEX_TYPE = 3是聚集索引。 INDEX_TYPE取值如下：
0 = nonunique secondary index; 
1 = automatically generated clustered index (GEN_CLUST_INDEX); 
2 = unique nonclustered index; 
3 = clustered index; 
32 = full-text index;
#收缩空间再后进行观察
</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
<li>9</li>
<li>10</li>
<li>11</li>
<li>12</li>
<li>13</li>
<li>14</li>
<li>15</li>
<li>16</li>
<li>17</li>
<li>18</li>
</ul>
<p>MySQL内部不会真正删除空间，而且做标记删除，即将delflag:N修改为delflag:Y，commit之后会会被purge进入删除链表，如果下一次insert更大的记录，delete之后的空间不会被重用，如果插入的记录小于等于delete的记录空会被重用，这块内容可以通过知数堂的innblock工具进行分析。</p>
<h2><a name="t7"></a><a name="t7"></a><a id="Innodb_207"></a>Innodb中的碎片</h2>
<h3><a name="t8"></a><a name="t8"></a><a id="_209"></a>碎片的产生</h3>
<p>我们知道数据存储在文件系统上的，总是不能100%利用分配给它的物理空间，删除数据会在页面上留下一些&rdquo;空洞&rdquo;，或者随机写入（聚集索引非线性增加）会导致页分裂，页分裂导致页面的利用空间少于50%，另外对表进行增删改会引起对应的二级索引值的随机的增删改，也会导致索引结构中的数据页面上留下一些"空洞"，虽然这些空洞有可能会被重复利用，但终究会导致部分物理空间未被使用，也就是碎片。</p>
<p>同时，即便是设置了填充因子为100%，Innodb也会主动留下page页面1/16的空间作为预留使用（An innodb_fill_factor setting of 100 leaves 1/16 of the space in clustered index pages free for future index growth）防止update带来的行溢出。</p>
<pre class="prettyprint"><code class="prism language-mysql has-numbering">mysql&gt; select table_schema,
    -&gt;        table_name,ENGINE,
    -&gt;        round(DATA_LENGTH/1024/1024+ INDEX_LENGTH/1024/1024) total_mb,TABLE_ROWS,
    -&gt;        round(DATA_LENGTH/1024/1024) data_mb, round(INDEX_LENGTH/1024/1024) index_mb, round(DATA_FREE/1024/1024) free_mb, round(DATA_FREE/DATA_LENGTH*100,2) free_ratio
    -&gt; from information_schema.TABLES where  TABLE_SCHEMA= 'test'
    -&gt; and TABLE_NAME= 'user';
+--------------+------------+--------+----------+------------+---------+----------+---------+------------+
| table_schema | table_name | ENGINE | total_mb | TABLE_ROWS | data_mb | index_mb | free_mb | free_ratio |
+--------------+------------+--------+----------+------------+---------+----------+---------+------------+
| test         | user      | InnoDB |        4 |      50000 |       4 |        0 |       6 |     149.42 |
+--------------+------------+--------+----------+------------+---------+----------+---------+------------+
1 row in set (0.00 sec)

</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
<li>9</li>
<li>10</li>
<li>11</li>
<li>12</li>
<li>13</li>
</ul>
<p>其中data_free是分配了未使用的字节数，并不能说明完全是碎片空间。</p>
<h3><a name="t9"></a><a name="t9"></a><a id="_233"></a>碎片的回收</h3>
<p>对于InnoDB的表，可以通过以下命令来回收碎片，释放空间，这个是随机读IO操作，会比较耗时，也会阻塞表上正常的DML运行，同时需要占用额外更多的磁盘空间，对于RDS来说，可能会导致磁盘空间瞬间爆满，实例瞬间被锁定，应用无法做DML操作，所以禁止在线上环境去执行。</p>
<pre class="prettyprint"><code class="prism language-shell has-numbering"><span class="token comment">#执行InnoDB的碎片回收</span>
mysql<span class="token operator">&gt;</span> alter table user engine<span class="token operator">=</span>InnoDB<span class="token punctuation">;</span>
Query OK, 0 rows affected <span class="token punctuation">(</span>9.00 sec<span class="token punctuation">)</span>
Records: 0  Duplicates: 0  Warnings: 0

<span class="token comment">##执行完之后，数据文件大小从14MB降低到10M。</span>
<span class="token comment"># ls -lh /data2/mysql/test/user1.ibd </span>
-rw-r----- 1 mysql mysql 10M Nov 6 16:18 /data2/mysql/test/user.ibd
</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
</ul>
<pre class="prettyprint"><code class="prism language-mysql has-numbering">mysql&gt; select table_schema,        table_name,ENGINE,        round(DATA_LENGTH/1024/1024+ INDEX_LENGTH/1024/1024) total_mb,TABLE_ROWS,        round(DATA_LENGTH/1024/1024) data_mb, round(INDEX_LENGTH/1024/1024) index_mb, round(DATA_FREE/1024/1024) free_mb, round(DATA_FREE/DATA_LENGTH*100,2) free_ratio from information_schema.TABLES where  TABLE_SCHEMA= 'test' and TABLE_NAME= 'user';
+--------------+------------+--------+----------+------------+---------+----------+---------+------------+
| table_schema | table_name | ENGINE | total_mb | TABLE_ROWS | data_mb | index_mb | free_mb | free_ratio |
+--------------+------------+--------+----------+------------+---------+----------+---------+------------+
| test         | user      | InnoDB |        5 |      50000 |       5 |        0 |       2 |      44.29 |
+--------------+------------+--------+----------+------------+---------+----------+---------+------------+
1 row in set (0.00 sec)


</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
<li>9</li>
</ul>
<h2><a name="t10"></a><a name="t10"></a><a id="deleteSQL_260"></a>delete对SQL的影响</h2>
<h3><a name="t11"></a><a name="t11"></a><a id="SQL_262"></a>未删除前的SQL执行情况</h3>
<pre class="prettyprint"><code class="prism language-mysql has-numbering">#插入100W数据
mysql&gt; call insert_user_data(1000000);
Query OK, 0 rows affected (35.99 sec)

#添加相关索引
mysql&gt; alter table user add index idx_name(name), add index idx_phone(phone);
Query OK, 0 rows affected (6.00 sec)
Records: 0  Duplicates: 0  Warnings: 0

#表上索引统计信息
mysql&gt; show index from user;
+-------+------------+-----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
| Table | Non_unique | Key_name  | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment |
+-------+------------+-----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
| user  |          0 | PRIMARY   |            1 | id          | A         |      996757 |     NULL | NULL   |      | BTREE      |         |               |
| user  |          1 | idx_name  |            1 | name        | A         |      996757 |     NULL | NULL   |      | BTREE      |         |               |
| user  |          1 | idx_phone |            1 | phone       | A         |           2 |     NULL | NULL   |      | BTREE      |         |               |
+-------+------------+-----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
3 rows in set (0.00 sec)

#重置状态变量计数
mysql&gt; flush status;
Query OK, 0 rows affected (0.00 sec)

#执行SQL语句
mysql&gt; select id, age ,phone from user where name like 'lyn12%';
+--------+-----+-------------+
| id     | age | phone       |
+--------+-----+-------------+
|    124 |   3 | 15240540354 |
|   1231 |  30 | 15240540354 |
|  12301 |  60 | 15240540354 |
.............................
| 129998 |  37 | 15240540354 |
| 129999 |  38 | 15240540354 |
| 130000 |  39 | 15240540354 |
+--------+-----+-------------+
11111 rows in set (0.03 sec)

mysql&gt; explain select id, age ,phone from user where name like 'lyn12%';
+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+
| id | select_type | table | type  | possible_keys | key      | key_len | ref  | rows  | Extra                 |
+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+
|  1 | SIMPLE      | user  | range | idx_name      | idx_name | 82      | NULL | 22226 | Using index condition |
+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+
1 row in set (0.00 sec)

#查看相关状态呢变量
mysql&gt; select * from information_schema.session_status where variable_name in('Last_query_cost','Handler_read_next','Innodb_pages_read','Innodb_data_reads','Innodb_pages_read');
+-------------------+----------------+
| VARIABLE_NAME     | VARIABLE_VALUE |
+-------------------+----------------+
| HANDLER_READ_NEXT | 11111          |    #请求读的行数
| INNODB_DATA_READS | 7868409        |    #数据物理读的总数
| INNODB_PAGES_READ | 7855239        |    #逻辑读的总数
| LAST_QUERY_COST   | 10.499000      |    #SQL语句的成本COST，主要包括IO_COST和CPU_COST。
+-------------------+----------------+
4 rows in set (0.00 sec)
</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
<li>9</li>
<li>10</li>
<li>11</li>
<li>12</li>
<li>13</li>
<li>14</li>
<li>15</li>
<li>16</li>
<li>17</li>
<li>18</li>
<li>19</li>
<li>20</li>
<li>21</li>
<li>22</li>
<li>23</li>
<li>24</li>
<li>25</li>
<li>26</li>
<li>27</li>
<li>28</li>
<li>29</li>
<li>30</li>
<li>31</li>
<li>32</li>
<li>33</li>
<li>34</li>
<li>35</li>
<li>36</li>
<li>37</li>
<li>38</li>
<li>39</li>
<li>40</li>
<li>41</li>
<li>42</li>
<li>43</li>
<li>44</li>
<li>45</li>
<li>46</li>
<li>47</li>
<li>48</li>
<li>49</li>
<li>50</li>
<li>51</li>
<li>52</li>
<li>53</li>
<li>54</li>
<li>55</li>
<li>56</li>
<li>57</li>
<li>58</li>
</ul>
<h3><a name="t12"></a><a name="t12"></a><a id="SQL_325"></a>删除后的SQL执行情况</h3>
<pre class="prettyprint"><code class="prism language-mysql has-numbering">#删除50w数据
mysql&gt; delete from user limit 500000;
Query OK, 500000 rows affected (3.70 sec)

#分析表统计信息
mysql&gt; analyze table user;
+-----------+---------+----------+----------+
| Table     | Op      | Msg_type | Msg_text |
+-----------+---------+----------+----------+
| test.user | analyze | status   | OK       |
+-----------+---------+----------+----------+
1 row in set (0.01 sec)

#重置状态变量计数
mysql&gt; flush status;
Query OK, 0 rows affected (0.01 sec)

mysql&gt; select id, age ,phone from user where name like 'lyn12%';
Empty set (0.05 sec)

mysql&gt; explain select id, age ,phone from user where name like 'lyn12%';
+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+
| id | select_type | table | type  | possible_keys | key      | key_len | ref  | rows  | Extra                 |
+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+
|  1 | SIMPLE      | user  | range | idx_name      | idx_name | 82      | NULL | 22226 | Using index condition |
+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+
1 row in set (0.00 sec)

mysql&gt; select * from information_schema.session_status where variable_name in('Last_query_cost','Handler_read_next','Innodb_pages_read','Innodb_data_reads','Innodb_pages_read');
+-------------------+----------------+
| VARIABLE_NAME     | VARIABLE_VALUE |
+-------------------+----------------+
| HANDLER_READ_NEXT | 0              |
| INNODB_DATA_READS | 7868409        |
| INNODB_PAGES_READ | 7855239        |
| LAST_QUERY_COST   | 10.499000      |
+-------------------+----------------+
4 rows in set (0.00 sec)
</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
<li>9</li>
<li>10</li>
<li>11</li>
<li>12</li>
<li>13</li>
<li>14</li>
<li>15</li>
<li>16</li>
<li>17</li>
<li>18</li>
<li>19</li>
<li>20</li>
<li>21</li>
<li>22</li>
<li>23</li>
<li>24</li>
<li>25</li>
<li>26</li>
<li>27</li>
<li>28</li>
<li>29</li>
<li>30</li>
<li>31</li>
<li>32</li>
<li>33</li>
<li>34</li>
<li>35</li>
<li>36</li>
<li>37</li>
<li>38</li>
</ul>
<h3><a name="t13"></a><a name="t13"></a><a id="_368"></a>结果统计分析</h3>
<div class="table-box">
<table>
<thead>
<tr>
<th>操作</th>
<th>COST</th>
<th>物理读次数</th>
<th>逻辑读次数</th>
<th>扫描行数</th>
<th>返回行数</th>
<th>执行时间</th>
</tr>
</thead>
<tbody>
<tr>
<td>初始化插入100W</td>
<td>10.499000</td>
<td>7868409</td>
<td>7855239</td>
<td>22226</td>
<td>11111</td>
<td>30ms</td>
</tr>
<tr>
<td>100W随机删除50W</td>
<td>10.499000</td>
<td>7868409</td>
<td>7855239</td>
<td>22226</td>
<td>0</td>
<td>50ms</td>
</tr>
</tbody>
</table>
</div>
<p>这也说明对普通的大表，想要通过delete数据来对表进行瘦身是不现实的，所以在任何时候不要用delete去删除数据，应该使用优雅的标记删除。</p>
<h2><a name="t14"></a><a name="t14"></a><a id="delete_377"></a>delete优化建议</h2>
<h3><a name="t15"></a><a name="t15"></a><a id="_379"></a>控制业务账号权限</h3>
<p>对于一个大的系统来说，需要根据业务特点去拆分子系统，每个子系统可以看做是一个service，例如美团APP，上面有很多服务，核心的服务有用户服务user-service，搜索服务search-service，商品product-service，位置服务location-service，价格服务price-service等。每个服务对应一个数据库，为该数据库创建单独账号，同时只授予DML权限且没有delete权限，同时禁止跨库访问。</p>
<pre class="prettyprint"><code class="prism language-mysql has-numbering">#创建用户数据库并授权
create database mt_user charset utf8mb4;
grant USAGE, SELECT, INSERT, UPDATE ON mt_user.*  to 'w_user'@'%' identified by 't$W*g@gaHTGi123456';
flush privileges;
</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
</ul>
<h3><a name="t16"></a><a name="t16"></a><a id="delete_390"></a>delete改为标记删除</h3>
<p>在MySQL数据库建模规范中有4个公共字段，基本上每个表必须有的，同时在create_time列要创建索引，有两方面的好处：</p>
<ol>
<li>一些查询业务场景都会有一个默认的时间段，比如7天或者一个月，都是通过create_time去过滤，走索引扫描更快。</li>
<li>一些核心的业务表需要以T +1的方式抽取数据仓库中，比如每天晚上00:30抽取前一天的数据，都是通过create_time过滤的。</li>
</ol>
<pre class="prettyprint"><code class="prism language-mysql has-numbering">`id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '主键id',
`is_deleted` tinyint(4) NOT NULL DEFAULT '0' COMMENT '是否逻辑删除：0：未删除，1：已删除',
`create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
`update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间'

#有了删除标记，业务接口的delete操作就可以转换为update
update user set is_deleted = 1 where user_id = 1213;

#查询的时候需要带上is_deleted过滤
select id, age ,phone from user where is_deleted = 0 and name like 'lyn12%';
</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
<li>9</li>
<li>10</li>
</ul>
<h2><a name="t17"></a><a name="t17"></a><a id="_410"></a>数据归档方式</h2>
<h3><a name="t18"></a><a name="t18"></a><a id="_412"></a>通用数据归档方法</h3>
<pre class="prettyprint"><code class="prism language-mysql has-numbering">#1. 创建归档表，一般在原表名后面添加_bak。
CREATE TABLE `ota_order_bak` (
  `id` bigint(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `order_id` varchar(255) DEFAULT NULL COMMENT '订单id',
  `ota_id` varchar(255) DEFAULT NULL COMMENT 'ota',
  `check_in_date` varchar(255) DEFAULT NULL COMMENT '入住日期',
  `check_out_date` varchar(255) DEFAULT NULL COMMENT '离店日期',
  `hotel_id` varchar(255) DEFAULT NULL COMMENT '酒店ID',
  `guest_name` varchar(255) DEFAULT NULL COMMENT '顾客',
  `purcharse_time` timestamp NULL DEFAULT NULL COMMENT '购买时间',
  `create_time` datetime DEFAULT NULL,
  `update_time` datetime DEFAULT NULL,
  `create_user` varchar(255) DEFAULT NULL,
  `update_user` varchar(255) DEFAULT NULL,
  `status` int(4) DEFAULT '1' COMMENT '状态 ： 1 正常 ， 0 删除',
  `hotel_name` varchar(255) DEFAULT NULL,
  `price` decimal(10,0) DEFAULT NULL,
  `remark` longtext,
  PRIMARY KEY (`id`),
  KEY `IDX_order_id` (`order_id`) USING BTREE,
  KEY `hotel_name` (`hotel_name`) USING BTREE,
  KEY `ota_id` (`ota_id`) USING BTREE,
  KEY `IDX_purcharse_time` (`purcharse_time`) USING BTREE,
  KEY `IDX_create_time` (`create_time`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8
PARTITION BY RANGE (to_days(create_time)) ( 
PARTITION p201808 VALUES LESS THAN (to_days('2018-09-01')), 
PARTITION p201809 VALUES LESS THAN (to_days('2018-10-01')), 
PARTITION p201810 VALUES LESS THAN (to_days('2018-11-01')), 
PARTITION p201811 VALUES LESS THAN (to_days('2018-12-01')), 
PARTITION p201812 VALUES LESS THAN (to_days('2019-01-01')), 
PARTITION p201901 VALUES LESS THAN (to_days('2019-02-01')), 
PARTITION p201902 VALUES LESS THAN (to_days('2019-03-01')), 
PARTITION p201903 VALUES LESS THAN (to_days('2019-04-01')), 
PARTITION p201904 VALUES LESS THAN (to_days('2019-05-01')), 
PARTITION p201905 VALUES LESS THAN (to_days('2019-06-01')), 
PARTITION p201906 VALUES LESS THAN (to_days('2019-07-01')), 
PARTITION p201907 VALUES LESS THAN (to_days('2019-08-01')), 
PARTITION p201908 VALUES LESS THAN (to_days('2019-09-01')), 
PARTITION p201909 VALUES LESS THAN (to_days('2019-10-01')), 
PARTITION p201910 VALUES LESS THAN (to_days('2019-11-01')), 
PARTITION p201911 VALUES LESS THAN (to_days('2019-12-01')), 
PARTITION p201912 VALUES LESS THAN (to_days('2020-01-01')));

#2. 插入原表中无效的数据（需要跟开发同学确认数据保留范围）
create table tbl_p201808 as select * from ota_order where create_time between '2018-08-01 00:00:00' and '2018-08-31 23:59:59';

#3. 跟归档表分区做分区交换
alter table ota_order_bak exchange partition p201808 with table tbl_p201808; 

#4. 删除原表中已经规范的数据
delete from ota_order where create_time between '2018-08-01 00:00:00' and '2018-08-31 23:59:59' limit 3000;
</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
<li>9</li>
<li>10</li>
<li>11</li>
<li>12</li>
<li>13</li>
<li>14</li>
<li>15</li>
<li>16</li>
<li>17</li>
<li>18</li>
<li>19</li>
<li>20</li>
<li>21</li>
<li>22</li>
<li>23</li>
<li>24</li>
<li>25</li>
<li>26</li>
<li>27</li>
<li>28</li>
<li>29</li>
<li>30</li>
<li>31</li>
<li>32</li>
<li>33</li>
<li>34</li>
<li>35</li>
<li>36</li>
<li>37</li>
<li>38</li>
<li>39</li>
<li>40</li>
<li>41</li>
<li>42</li>
<li>43</li>
<li>44</li>
<li>45</li>
<li>46</li>
<li>47</li>
<li>48</li>
<li>49</li>
<li>50</li>
<li>51</li>
<li>52</li>
</ul>
<h3><a name="t19"></a><a name="t19"></a><a id="_469"></a>优化后的归档方式</h3>
<pre class="prettyprint"><code class="prism language-mysql has-numbering">#1. 创建中间表
CREATE TABLE `ota_order_2020` (........) ENGINE=InnoDB DEFAULT CHARSET=utf8
PARTITION BY RANGE (to_days(create_time)) ( 
PARTITION p201808 VALUES LESS THAN (to_days('2018-09-01')), 
PARTITION p201809 VALUES LESS THAN (to_days('2018-10-01')), 
PARTITION p201810 VALUES LESS THAN (to_days('2018-11-01')), 
PARTITION p201811 VALUES LESS THAN (to_days('2018-12-01')), 
PARTITION p201812 VALUES LESS THAN (to_days('2019-01-01')), 
PARTITION p201901 VALUES LESS THAN (to_days('2019-02-01')), 
PARTITION p201902 VALUES LESS THAN (to_days('2019-03-01')), 
PARTITION p201903 VALUES LESS THAN (to_days('2019-04-01')), 
PARTITION p201904 VALUES LESS THAN (to_days('2019-05-01')), 
PARTITION p201905 VALUES LESS THAN (to_days('2019-06-01')), 
PARTITION p201906 VALUES LESS THAN (to_days('2019-07-01')), 
PARTITION p201907 VALUES LESS THAN (to_days('2019-08-01')), 
PARTITION p201908 VALUES LESS THAN (to_days('2019-09-01')), 
PARTITION p201909 VALUES LESS THAN (to_days('2019-10-01')), 
PARTITION p201910 VALUES LESS THAN (to_days('2019-11-01')), 
PARTITION p201911 VALUES LESS THAN (to_days('2019-12-01')), 
PARTITION p201912 VALUES LESS THAN (to_days('2020-01-01')));

#2. 插入原表中有效的数据，如果数据量在100W左右可以在业务低峰期直接插入，如果比较大，建议采用dataX来做，可以控制频率和大小，之前我这边用Go封装了dataX可以实现自动生成json文件，自定义大小去执行。
insert into ota_order_2020 select * from ota_order where create_time between '2020-08-01 00:00:00' and '2020-08-31 23:59:59';

#3. 表重命名
alter table ota_order rename to ota_order_bak;  
alter table ota_order_2020 rename to ota_order;
#4. 插入差异数据
insert into ota_order select * from ota_order_bak a where not exists (select 1 from ota_order b where a.id = b.id);
#5. ota_order_bak改造成分区表，如果表比较大不建议直接改造，可以先创建好分区表，通过dataX把导入进去即可。

#6. 后续的归档方法
#创建中间普遍表
create table ota_order_mid like ota_order;
#交换原表无效数据分区到普通表
alter table ota_order exchange partition p201808 with table ota_order_mid; 
##交换普通表数据到归档表的相应分区
alter table ota_order_bak exchange partition p201808 with table ota_order_mid; 
</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
<li>9</li>
<li>10</li>
<li>11</li>
<li>12</li>
<li>13</li>
<li>14</li>
<li>15</li>
<li>16</li>
<li>17</li>
<li>18</li>
<li>19</li>
<li>20</li>
<li>21</li>
<li>22</li>
<li>23</li>
<li>24</li>
<li>25</li>
<li>26</li>
<li>27</li>
<li>28</li>
<li>29</li>
<li>30</li>
<li>31</li>
<li>32</li>
<li>33</li>
<li>34</li>
<li>35</li>
<li>36</li>
<li>37</li>
<li>38</li>
</ul>
<p>这样原表和归档表都是按月的分区表，只需要创建一个中间普通表，在业务低峰期做两次分区交换，既可以删除无效数据，又能回收空，而且没有空间碎片，不会影响表上的索引及SQL的执行计划。</p>
<h2><a name="t20"></a><a name="t20"></a><a id="_514"></a>总结</h2>
<p>通过从InnoDB存储空间分布，delete对性能的影响可以看到，delete物理删除既不能释放磁盘空间，而且会产生大量的碎片，导致索引频繁分裂，影响SQL执行计划的稳定性；</p>
<p>同时在碎片回收时，会耗用大量的CPU，磁盘空间，影响表上正常的DML操作。</p>
<p>在业务代码层面，应该做逻辑标记删除，避免物理删除；为了实现数据归档需求，可以用采用MySQL分区表特性来实现，都是DDL操作，没有碎片产生。</p>
<p>另外一个比较好的方案采用Clickhouse，对有生命周期的数据表可以使用Clickhouse存储，利用其TTL特性实现无效数据自动清理。</p>
<p>&nbsp;</p>(String), 1(Integer), aaaaa(String), null
2020-11-23 22:13:17.292 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlBlogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 22:13:17.294 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlTypeMapper.selectByPrimaryKey.debug:159 -==>  Preparing: SELECT type_id,type_name,type_blog_count,enable,deleted FROM bl_type WHERE type_id = ? 
2020-11-23 22:13:17.296 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlTypeMapper.selectByPrimaryKey.debug:159 -==> Parameters: 1(Integer)
2020-11-23 22:13:17.335 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlTypeMapper.selectByPrimaryKey.debug:159 -<==      Total: 1
2020-11-23 22:13:17.337 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlTypeMapper.updateByPrimaryKey.debug:159 -==>  Preparing: UPDATE bl_type SET type_name = ?,type_blog_count = ?,enable = ?,deleted = ? WHERE type_id = ? 
2020-11-23 22:13:17.338 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlTypeMapper.updateByPrimaryKey.debug:159 -==> Parameters: Java(String), 103(Integer), 1(Integer), 0(Integer), 1(Integer)
2020-11-23 22:13:17.411 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlTypeMapper.updateByPrimaryKey.debug:159 -<==    Updates: 1
2020-11-23 22:13:17.540 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 22:13:17.542 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/save(String), [com.tqk.blog.pojo.BlBlog@54790121](String), 1(Integer), null, POST(String), 437(Long), {"code":20000,"msg":"添加成功！"}(String), 192.168.101.29(String)
2020-11-23 22:13:17.628 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 22:13:17.743 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image, blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-11-23 22:13:17.744 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-11-23 22:13:17.782 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -<==      Total: 2
2020-11-23 22:13:17.783 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-11-23 22:13:17.784 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-11-23 22:13:17.821 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-11-23 22:13:17.936 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 22:13:17.938 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=1, totalCount=1, list=[BlogVo(blogId=1324038097171820544, blogTitle=BeanUtils.copyProperties的用法, blogImage=Java, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=Java, blogSource=百度, blogRemark=BeanUtils它提供了对java反射和自省API的包装。它里面还有很多工具类，这里我们介绍一下copyProperties。, blogComment=0, blogMonth=null, createdTime=2020-11-04 17:17:33, updateTime=2020-11-22 13:04:15)], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 229(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1324038097171820544","blogImage":"Java","blogRead":0,"blogRemark":"BeanUtils它提供了对java反射和自省API的包装。它里面还有很多工具类，这里我们介绍一下copyProperties。","blogSource":"百度","blogTitle":"BeanUtils.copyProperties的用法","createdTime":"2020-11-04 17:17:33","typeName":"Java","updateTime":"2020-11-22 13:04:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1330877080455553024","blogRead":0,"blogRemark":"aaaaa","blogTitle":"","createdTime":"2020-11-23 14:13:16","typeName":"Java","updateTime":"2020-11-23 14:13:16"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":2,"totalPage":1},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 22:13:18.035 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 22:13:18.064 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlBlogMapper.save.debug:159 -==>  Preparing: insert into bl_blog( blog_id, blog_title,blog_image, blog_content, blog_type, blog_remark, blog_source ) values ( ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 22:13:18.068 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlBlogMapper.save.debug:159 -==> Parameters: 1330877084339478528(String), (String), null, <h2>前言</h2>
<p>我负责的有几个系统随着业务量的增长，存储在MySQL中的数据日益剧增，我当时就想现在的业务方不讲武德，搞偷袭，趁我没反应过来把很多表，很快，很快啊都打到了亿级别，我大意了，没有闪，这就导致跟其Join的表的SQL变得很慢，对的应用接口的response time也变长了，影响了用户体验。</p>
<p>事后我找到业务方，我批评了他们跟他们说要讲武德，连忙跟我道歉，这个事情才就此作罢，走的时候我对他们说下次不要这样了，耗子尾汁，好好反思。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/3c93aececcb9e763f5476362c4e88710.png" alt="" /></p>
<p>骂归骂，事情还是得解决，时候我分析原因发现，发现有些表的数据量增长很快，对应SQL扫描了很多无效数据，导致SQL慢了下来，通过确认之后，这些大表都是一些流水、记录、日志类型数据，只需要保留1到3个月，此时需要对表做数据清理实现瘦身，一般都会想到用insert + delete的方式去清理。</p>
<p>这篇文章我会从InnoDB存储空间分布，delete对性能的影响，以及优化建议方面解释为什么不建议delete删除数据。</p>
<h2><a name="t1"></a><a name="t1"></a><a id="InnoDB_16"></a>InnoDB存储架构</h2>
<p><img src="https://img-blog.csdnimg.cn/img_convert/5c66ffe9749c58e1613d2519f7ea7211.png" alt="" /></p>
<p>从这张图可以看到，InnoDB存储结构主要包括两部分：逻辑存储结构和物理存储结构。</p>
<p>逻辑上是由表空间tablespace &mdash;&gt; 段segment或者inode &mdash;&gt; 区Extent &mdash;&mdash;&gt;数据页Page构成，Innodb逻辑管理单位是segment，空间分配的最小单位是extent，每个segment都会从表空间FREE_PAGE中分配32个page，当这32个page不够用时，会按照以下原则进行扩展：如果当前小于1个extent，则扩展到1个extent；当表空间小于32MB时，每次扩展一个extent；表空间大于32MB，每次扩展4个extent。</p>
<p>物理上主要由系统用户数据文件，日志文件组成，数据文件主要存储MySQL字典数据和用户数据，日志文件记录的是data page的变更记录，用于MySQL Crash时的恢复。</p>
<h2><a name="t2"></a><a name="t2"></a><a id="Innodb_26"></a>Innodb表空间</h2>
<p>InnoDB存储包括三类表空间：系统表空间，用户表空间，Undo表空间。</p>
<p><strong>系统表空间：</strong>&nbsp;主要存储MySQL内部的数据字典数据，如information_schema下的数据。</p>
<p><strong>用户表空间：</strong>&nbsp;当开启innodb_file_per_table=1时，数据表从系统表空间独立出来存储在以table_name.ibd命令的数据文件中，结构信息存储在table_name.frm文件中。</p>
<p><strong>Undo表空间：</strong>&nbsp;存储Undo信息，如快照一致读和flashback都是利用undo信息。</p>
<p>从MySQL 8.0开始允许用户自定义表空间，具体语法如下：</p>
<pre class="prettyprint"><code class="prism language-mysql has-numbering">CREATE TABLESPACE tablespace_name
    ADD DATAFILE 'file_name'               #数据文件名
    USE LOGFILE GROUP logfile_group        #自定义日志文件组，一般每组2个logfile。
    [EXTENT_SIZE [=] extent_size]          #区大小
    [INITIAL_SIZE [=] initial_size]        #初始化大小 
    [AUTOEXTEND_SIZE [=] autoextend_size]  #自动扩宽尺寸
    [MAX_SIZE [=] max_size]                #单个文件最大size，最大是32G。
    [NODEGROUP [=] nodegroup_id]           #节点组
    [WAIT]
    [COMMENT [=] comment_text]
    ENGINE [=] engine_name
</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
<li>9</li>
<li>10</li>
<li>11</li>
</ul>
<p>这样的好处是可以做到数据的冷热分离，分别用HDD和SSD来存储，既能实现数据的高效访问，又能节约成本，比如可以添加两块500G硬盘，经过创建卷组vg，划分逻辑卷lv，创建数据目录并mount相应的lv，假设划分的两个目录分别是/hot_data 和 /cold_data。</p>
<p>这样就可以将核心的业务表如用户表，订单表存储在高性能SSD盘上，一些日志，流水表存储在普通的HDD上，主要的操作步骤如下：</p>
<pre class="prettyprint"><code class="prism language-mysql has-numbering">#创建热数据表空间
create tablespace tbs_data_hot add datafile '/hot_data/tbs_data_hot01.dbf' max_size 20G;
#创建核心业务表存储在热数据表空间
create table booking(id bigint not null primary key auto_increment, &hellip;&hellip; ) tablespace tbs_data_hot;
#创建冷数据表空间
create tablespace tbs_data_cold add datafile '/hot_data/tbs_data_cold01.dbf' max_size 20G;
#创建日志，流水，备份类的表存储在冷数据表空间
create table payment_log(id bigint not null primary key auto_increment, &hellip;&hellip; ) tablespace tbs_data_cold;
#可以移动表到另一个表空间
alter table payment_log tablespace tbs_data_hot;
</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
<li>9</li>
<li>10</li>
</ul>
<h2><a name="t3"></a><a name="t3"></a><a id="Inndob_69"></a>Inndob存储分布</h2>
<h3><a name="t4"></a><a name="t4"></a><a id="_71"></a>创建空表查看空间变化</h3>
<pre class="prettyprint"><code class="prism language-mysql has-numbering">mysql&gt; create table user(id bigint not null primary key auto_increment, 
    -&gt; name varchar(20) not null default '' comment '姓名', 
    -&gt; age tinyint not null default 0 comment 'age', 
    -&gt; gender char(1) not null default 'M'  comment '性别',
    -&gt; phone varchar(16) not null default '' comment '手机号',
    -&gt; create_time datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
    -&gt; update_time datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间'
    -&gt; ) engine = InnoDB DEFAULT CHARSET=utf8mb4 COMMENT '用户信息表';
Query OK, 0 rows affected (0.26 sec)
</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
<li>9</li>
</ul>
<pre class="prettyprint"><code class="prism language-bash has-numbering"><span class="token comment"># ls -lh user1.ibd </span>
-rw-r----- 1 mysql mysql 96K Nov  6 12:48 user.ibd
</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
</ul>
<p>设置参数innodb_file_per_table=1时，创建表时会自动创建一个segment，同时分配一个extent，包含32个data page的来存储数据，这样创建的空表默认大小就是96KB，extent使用完之后会申请64个连接页，这样对于一些小表，或者undo segment，可以在开始时申请较少的空间，节省磁盘容量的开销。</p>
<pre class="prettyprint"><code class="prism language-shell has-numbering"><span class="token comment"># python2 py_innodb_page_info.py -v /data2/mysql/test/user.ibd</span>
page offset 00000000, page <span class="token function">type</span> <span class="token operator">&lt;</span>File Space Header<span class="token operator">&gt;</span>
page offset 00000001, page <span class="token function">type</span> <span class="token operator">&lt;</span>Insert Buffer Bitmap<span class="token operator">&gt;</span>
page offset 00000002, page <span class="token function">type</span> <span class="token operator">&lt;</span>File Segment inode<span class="token operator">&gt;</span>
page offset 00000003, page <span class="token function">type</span> <span class="token operator">&lt;</span>B-tree Node<span class="token operator">&gt;</span>, page level <span class="token operator">&lt;</span>0000<span class="token operator">&gt;</span>
page offset 00000000, page <span class="token function">type</span> <span class="token operator">&lt;</span>Freshly Allocated Page<span class="token operator">&gt;</span>
page offset 00000000, page <span class="token function">type</span> <span class="token operator">&lt;</span>Freshly Allocated Page<span class="token operator">&gt;</span>
Total number of page: 6:      <span class="token comment">#总共分配的页数</span>
Freshly Allocated Page: 2     <span class="token comment">#可用的数据页</span>
Insert Buffer Bitmap: 1       <span class="token comment">#插入缓冲页</span>
File Space Header: 1          <span class="token comment">#文件空间头</span>
B-tree Node: 1                <span class="token comment">#数据页</span>
File Segment inode: 1         <span class="token comment">#文件端inonde，如果是在ibdata1.ibd上会有多个inode。</span>
</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
<li>9</li>
<li>10</li>
<li>11</li>
<li>12</li>
<li>13</li>
</ul>
<h3><a name="t5"></a><a name="t5"></a><a id="_108"></a>插入数据后的空间变化</h3>
<pre class="prettyprint"><code class="prism language-mysql has-numbering">mysql&gt; DELIMITER $$
mysql&gt; CREATE PROCEDURE insert_user_data(num INTEGER) 
    -&gt; BEGIN
    -&gt;     DECLARE v_i int unsigned DEFAULT 0;
    -&gt; set autocommit= 0;
    -&gt; WHILE v_i &lt; num DO
    -&gt;    insert into user(`name`, age, gender, phone) values (CONCAT('lyn',v_i), mod(v_i,120), 'M', CONCAT('152',ROUND(RAND(1)*100000000)));
    -&gt;  SET v_i = v_i+1;
    -&gt; END WHILE;
    -&gt; commit;
    -&gt; END $$
Query OK, 0 rows affected (0.01 sec)
mysql&gt; DELIMITER ;

#插入10w数据
mysql&gt; call insert_user_data(100000);
Query OK, 0 rows affected (6.69 sec)
</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
<li>9</li>
<li>10</li>
<li>11</li>
<li>12</li>
<li>13</li>
<li>14</li>
<li>15</li>
<li>16</li>
<li>17</li>
</ul>
<pre class="prettyprint"><code class="prism language-shell has-numbering"><span class="token comment"># ls -lh user.ibd</span>
-rw-r----- 1 mysql mysql 14M Nov 6 10:58 /data2/mysql/test/user.ibd

<span class="token comment"># python2 py_innodb_page_info.py -v /data2/mysql/test/user.ibd</span>
page offset 00000000, page <span class="token function">type</span> <span class="token operator">&lt;</span>File Space Header<span class="token operator">&gt;</span>
page offset 00000001, page <span class="token function">type</span> <span class="token operator">&lt;</span>Insert Buffer Bitmap<span class="token operator">&gt;</span>
page offset 00000002, page <span class="token function">type</span> <span class="token operator">&lt;</span>File Segment inode<span class="token operator">&gt;</span>
page offset 00000003, page <span class="token function">type</span> <span class="token operator">&lt;</span>B-tree Node<span class="token operator">&gt;</span>, page level <span class="token operator">&lt;</span>0001<span class="token operator">&gt;</span>   <span class="token comment">#增加了一个非叶子节点，树的高度从1变为2.</span>
<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>
page offset 00000000, page <span class="token function">type</span> <span class="token operator">&lt;</span>Freshly Allocated Page<span class="token operator">&gt;</span>
Total number of page: 896:
Freshly Allocated Page: 493
Insert Buffer Bitmap: 1
File Space Header: 1
B-tree Node: 400
File Segment inode: 1
</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
<li>9</li>
<li>10</li>
<li>11</li>
<li>12</li>
<li>13</li>
<li>14</li>
<li>15</li>
<li>16</li>
</ul>
<h3><a name="t6"></a><a name="t6"></a><a id="delete_149"></a>delete数据后的空间变化</h3>
<pre class="prettyprint"><code class="prism language-mysql has-numbering">mysql&gt; select min(id),max(id),count(*) from user;
+---------+---------+----------+
| min(id) | max(id) | count(*) |
+---------+---------+----------+
|       1 |  100000 |   100000 |
+---------+---------+----------+
1 row in set (0.05 sec)
#删除50000条数据，理论上空间应该从14MB变长7MB左右。
mysql&gt; delete from user limit 50000;
Query OK, 50000 rows affected (0.25 sec)

#数据文件大小依然是14MB，没有缩小。
# ls -lh /data2/mysql/test/user1.ibd 
-rw-r----- 1 mysql mysql 14M Nov  6 13:22 /data2/mysql/test/user.ibd

#数据页没有被回收。
# python2 py_innodb_page_info.py -v /data2/mysql/test/user.ibd
page offset 00000000, page type &lt;File Space Header&gt;
page offset 00000001, page type &lt;Insert Buffer Bitmap&gt;
page offset 00000002, page type &lt;File Segment inode&gt;
page offset 00000003, page type &lt;B-tree Node&gt;, page level &lt;0001&gt;
........................................................
page offset 00000000, page type &lt;Freshly Allocated Page&gt;
Total number of page: 896:
Freshly Allocated Page: 493
Insert Buffer Bitmap: 1
File Space Header: 1
B-tree Node: 400
File Segment inode: 1
#在MySQL内部是标记删除，
</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
<li>9</li>
<li>10</li>
<li>11</li>
<li>12</li>
<li>13</li>
<li>14</li>
<li>15</li>
<li>16</li>
<li>17</li>
<li>18</li>
<li>19</li>
<li>20</li>
<li>21</li>
<li>22</li>
<li>23</li>
<li>24</li>
<li>25</li>
<li>26</li>
<li>27</li>
<li>28</li>
<li>29</li>
<li>30</li>
</ul>
<pre class="prettyprint"><code class="prism language-mysql has-numbering">mysql&gt; use information_schema;

Database changed
mysql&gt; SELECT A.SPACE AS TBL_SPACEID, A.TABLE_ID, A.NAME AS TABLE_NAME, FILE_FORMAT, ROW_FORMAT, SPACE_TYPE,  B.INDEX_ID , B.NAME AS INDEX_NAME, PAGE_NO, B.TYPE AS INDEX_TYPE FROM INNODB_SYS_TABLES A LEFT JOIN INNODB_SYS_INDEXES B ON A.TABLE_ID =B.TABLE_ID WHERE A.NAME = 'test/user1';
+-------------+----------+------------+-------------+------------+------------+----------+------------+---------+------------+
| TBL_SPACEID | TABLE_ID | TABLE_NAME | FILE_FORMAT | ROW_FORMAT | SPACE_TYPE | INDEX_ID | INDEX_NAME | PAGE_NO | INDEX_TYPE |
+-------------+----------+------------+-------------+------------+------------+----------+------------+---------+------------+
|        1283 |     1207 | test/user | Barracuda   | Dynamic    | Single     |     2236 | PRIMARY    |       3 |          3 |
+-------------+----------+------------+-------------+------------+------------+----------+------------+---------+------------+
1 row in set (0.01 sec)

PAGE_NO = 3 标识B-tree的root page是3号页，INDEX_TYPE = 3是聚集索引。 INDEX_TYPE取值如下：
0 = nonunique secondary index; 
1 = automatically generated clustered index (GEN_CLUST_INDEX); 
2 = unique nonclustered index; 
3 = clustered index; 
32 = full-text index;
#收缩空间再后进行观察
</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
<li>9</li>
<li>10</li>
<li>11</li>
<li>12</li>
<li>13</li>
<li>14</li>
<li>15</li>
<li>16</li>
<li>17</li>
<li>18</li>
</ul>
<p>MySQL内部不会真正删除空间，而且做标记删除，即将delflag:N修改为delflag:Y，commit之后会会被purge进入删除链表，如果下一次insert更大的记录，delete之后的空间不会被重用，如果插入的记录小于等于delete的记录空会被重用，这块内容可以通过知数堂的innblock工具进行分析。</p>
<h2><a name="t7"></a><a name="t7"></a><a id="Innodb_207"></a>Innodb中的碎片</h2>
<h3><a name="t8"></a><a name="t8"></a><a id="_209"></a>碎片的产生</h3>
<p>我们知道数据存储在文件系统上的，总是不能100%利用分配给它的物理空间，删除数据会在页面上留下一些&rdquo;空洞&rdquo;，或者随机写入（聚集索引非线性增加）会导致页分裂，页分裂导致页面的利用空间少于50%，另外对表进行增删改会引起对应的二级索引值的随机的增删改，也会导致索引结构中的数据页面上留下一些"空洞"，虽然这些空洞有可能会被重复利用，但终究会导致部分物理空间未被使用，也就是碎片。</p>
<p>同时，即便是设置了填充因子为100%，Innodb也会主动留下page页面1/16的空间作为预留使用（An innodb_fill_factor setting of 100 leaves 1/16 of the space in clustered index pages free for future index growth）防止update带来的行溢出。</p>
<pre class="prettyprint"><code class="prism language-mysql has-numbering">mysql&gt; select table_schema,
    -&gt;        table_name,ENGINE,
    -&gt;        round(DATA_LENGTH/1024/1024+ INDEX_LENGTH/1024/1024) total_mb,TABLE_ROWS,
    -&gt;        round(DATA_LENGTH/1024/1024) data_mb, round(INDEX_LENGTH/1024/1024) index_mb, round(DATA_FREE/1024/1024) free_mb, round(DATA_FREE/DATA_LENGTH*100,2) free_ratio
    -&gt; from information_schema.TABLES where  TABLE_SCHEMA= 'test'
    -&gt; and TABLE_NAME= 'user';
+--------------+------------+--------+----------+------------+---------+----------+---------+------------+
| table_schema | table_name | ENGINE | total_mb | TABLE_ROWS | data_mb | index_mb | free_mb | free_ratio |
+--------------+------------+--------+----------+------------+---------+----------+---------+------------+
| test         | user      | InnoDB |        4 |      50000 |       4 |        0 |       6 |     149.42 |
+--------------+------------+--------+----------+------------+---------+----------+---------+------------+
1 row in set (0.00 sec)

</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
<li>9</li>
<li>10</li>
<li>11</li>
<li>12</li>
<li>13</li>
</ul>
<p>其中data_free是分配了未使用的字节数，并不能说明完全是碎片空间。</p>
<h3><a name="t9"></a><a name="t9"></a><a id="_233"></a>碎片的回收</h3>
<p>对于InnoDB的表，可以通过以下命令来回收碎片，释放空间，这个是随机读IO操作，会比较耗时，也会阻塞表上正常的DML运行，同时需要占用额外更多的磁盘空间，对于RDS来说，可能会导致磁盘空间瞬间爆满，实例瞬间被锁定，应用无法做DML操作，所以禁止在线上环境去执行。</p>
<pre class="prettyprint"><code class="prism language-shell has-numbering"><span class="token comment">#执行InnoDB的碎片回收</span>
mysql<span class="token operator">&gt;</span> alter table user engine<span class="token operator">=</span>InnoDB<span class="token punctuation">;</span>
Query OK, 0 rows affected <span class="token punctuation">(</span>9.00 sec<span class="token punctuation">)</span>
Records: 0  Duplicates: 0  Warnings: 0

<span class="token comment">##执行完之后，数据文件大小从14MB降低到10M。</span>
<span class="token comment"># ls -lh /data2/mysql/test/user1.ibd </span>
-rw-r----- 1 mysql mysql 10M Nov 6 16:18 /data2/mysql/test/user.ibd
</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
</ul>
<pre class="prettyprint"><code class="prism language-mysql has-numbering">mysql&gt; select table_schema,        table_name,ENGINE,        round(DATA_LENGTH/1024/1024+ INDEX_LENGTH/1024/1024) total_mb,TABLE_ROWS,        round(DATA_LENGTH/1024/1024) data_mb, round(INDEX_LENGTH/1024/1024) index_mb, round(DATA_FREE/1024/1024) free_mb, round(DATA_FREE/DATA_LENGTH*100,2) free_ratio from information_schema.TABLES where  TABLE_SCHEMA= 'test' and TABLE_NAME= 'user';
+--------------+------------+--------+----------+------------+---------+----------+---------+------------+
| table_schema | table_name | ENGINE | total_mb | TABLE_ROWS | data_mb | index_mb | free_mb | free_ratio |
+--------------+------------+--------+----------+------------+---------+----------+---------+------------+
| test         | user      | InnoDB |        5 |      50000 |       5 |        0 |       2 |      44.29 |
+--------------+------------+--------+----------+------------+---------+----------+---------+------------+
1 row in set (0.00 sec)


</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
<li>9</li>
</ul>
<h2><a name="t10"></a><a name="t10"></a><a id="deleteSQL_260"></a>delete对SQL的影响</h2>
<h3><a name="t11"></a><a name="t11"></a><a id="SQL_262"></a>未删除前的SQL执行情况</h3>
<pre class="prettyprint"><code class="prism language-mysql has-numbering">#插入100W数据
mysql&gt; call insert_user_data(1000000);
Query OK, 0 rows affected (35.99 sec)

#添加相关索引
mysql&gt; alter table user add index idx_name(name), add index idx_phone(phone);
Query OK, 0 rows affected (6.00 sec)
Records: 0  Duplicates: 0  Warnings: 0

#表上索引统计信息
mysql&gt; show index from user;
+-------+------------+-----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
| Table | Non_unique | Key_name  | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment |
+-------+------------+-----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
| user  |          0 | PRIMARY   |            1 | id          | A         |      996757 |     NULL | NULL   |      | BTREE      |         |               |
| user  |          1 | idx_name  |            1 | name        | A         |      996757 |     NULL | NULL   |      | BTREE      |         |               |
| user  |          1 | idx_phone |            1 | phone       | A         |           2 |     NULL | NULL   |      | BTREE      |         |               |
+-------+------------+-----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
3 rows in set (0.00 sec)

#重置状态变量计数
mysql&gt; flush status;
Query OK, 0 rows affected (0.00 sec)

#执行SQL语句
mysql&gt; select id, age ,phone from user where name like 'lyn12%';
+--------+-----+-------------+
| id     | age | phone       |
+--------+-----+-------------+
|    124 |   3 | 15240540354 |
|   1231 |  30 | 15240540354 |
|  12301 |  60 | 15240540354 |
.............................
| 129998 |  37 | 15240540354 |
| 129999 |  38 | 15240540354 |
| 130000 |  39 | 15240540354 |
+--------+-----+-------------+
11111 rows in set (0.03 sec)

mysql&gt; explain select id, age ,phone from user where name like 'lyn12%';
+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+
| id | select_type | table | type  | possible_keys | key      | key_len | ref  | rows  | Extra                 |
+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+
|  1 | SIMPLE      | user  | range | idx_name      | idx_name | 82      | NULL | 22226 | Using index condition |
+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+
1 row in set (0.00 sec)

#查看相关状态呢变量
mysql&gt; select * from information_schema.session_status where variable_name in('Last_query_cost','Handler_read_next','Innodb_pages_read','Innodb_data_reads','Innodb_pages_read');
+-------------------+----------------+
| VARIABLE_NAME     | VARIABLE_VALUE |
+-------------------+----------------+
| HANDLER_READ_NEXT | 11111          |    #请求读的行数
| INNODB_DATA_READS | 7868409        |    #数据物理读的总数
| INNODB_PAGES_READ | 7855239        |    #逻辑读的总数
| LAST_QUERY_COST   | 10.499000      |    #SQL语句的成本COST，主要包括IO_COST和CPU_COST。
+-------------------+----------------+
4 rows in set (0.00 sec)
</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
<li>9</li>
<li>10</li>
<li>11</li>
<li>12</li>
<li>13</li>
<li>14</li>
<li>15</li>
<li>16</li>
<li>17</li>
<li>18</li>
<li>19</li>
<li>20</li>
<li>21</li>
<li>22</li>
<li>23</li>
<li>24</li>
<li>25</li>
<li>26</li>
<li>27</li>
<li>28</li>
<li>29</li>
<li>30</li>
<li>31</li>
<li>32</li>
<li>33</li>
<li>34</li>
<li>35</li>
<li>36</li>
<li>37</li>
<li>38</li>
<li>39</li>
<li>40</li>
<li>41</li>
<li>42</li>
<li>43</li>
<li>44</li>
<li>45</li>
<li>46</li>
<li>47</li>
<li>48</li>
<li>49</li>
<li>50</li>
<li>51</li>
<li>52</li>
<li>53</li>
<li>54</li>
<li>55</li>
<li>56</li>
<li>57</li>
<li>58</li>
</ul>
<h3><a name="t12"></a><a name="t12"></a><a id="SQL_325"></a>删除后的SQL执行情况</h3>
<pre class="prettyprint"><code class="prism language-mysql has-numbering">#删除50w数据
mysql&gt; delete from user limit 500000;
Query OK, 500000 rows affected (3.70 sec)

#分析表统计信息
mysql&gt; analyze table user;
+-----------+---------+----------+----------+
| Table     | Op      | Msg_type | Msg_text |
+-----------+---------+----------+----------+
| test.user | analyze | status   | OK       |
+-----------+---------+----------+----------+
1 row in set (0.01 sec)

#重置状态变量计数
mysql&gt; flush status;
Query OK, 0 rows affected (0.01 sec)

mysql&gt; select id, age ,phone from user where name like 'lyn12%';
Empty set (0.05 sec)

mysql&gt; explain select id, age ,phone from user where name like 'lyn12%';
+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+
| id | select_type | table | type  | possible_keys | key      | key_len | ref  | rows  | Extra                 |
+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+
|  1 | SIMPLE      | user  | range | idx_name      | idx_name | 82      | NULL | 22226 | Using index condition |
+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+
1 row in set (0.00 sec)

mysql&gt; select * from information_schema.session_status where variable_name in('Last_query_cost','Handler_read_next','Innodb_pages_read','Innodb_data_reads','Innodb_pages_read');
+-------------------+----------------+
| VARIABLE_NAME     | VARIABLE_VALUE |
+-------------------+----------------+
| HANDLER_READ_NEXT | 0              |
| INNODB_DATA_READS | 7868409        |
| INNODB_PAGES_READ | 7855239        |
| LAST_QUERY_COST   | 10.499000      |
+-------------------+----------------+
4 rows in set (0.00 sec)
</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
<li>9</li>
<li>10</li>
<li>11</li>
<li>12</li>
<li>13</li>
<li>14</li>
<li>15</li>
<li>16</li>
<li>17</li>
<li>18</li>
<li>19</li>
<li>20</li>
<li>21</li>
<li>22</li>
<li>23</li>
<li>24</li>
<li>25</li>
<li>26</li>
<li>27</li>
<li>28</li>
<li>29</li>
<li>30</li>
<li>31</li>
<li>32</li>
<li>33</li>
<li>34</li>
<li>35</li>
<li>36</li>
<li>37</li>
<li>38</li>
</ul>
<h3><a name="t13"></a><a name="t13"></a><a id="_368"></a>结果统计分析</h3>
<div class="table-box">
<table>
<thead>
<tr>
<th>操作</th>
<th>COST</th>
<th>物理读次数</th>
<th>逻辑读次数</th>
<th>扫描行数</th>
<th>返回行数</th>
<th>执行时间</th>
</tr>
</thead>
<tbody>
<tr>
<td>初始化插入100W</td>
<td>10.499000</td>
<td>7868409</td>
<td>7855239</td>
<td>22226</td>
<td>11111</td>
<td>30ms</td>
</tr>
<tr>
<td>100W随机删除50W</td>
<td>10.499000</td>
<td>7868409</td>
<td>7855239</td>
<td>22226</td>
<td>0</td>
<td>50ms</td>
</tr>
</tbody>
</table>
</div>
<p>这也说明对普通的大表，想要通过delete数据来对表进行瘦身是不现实的，所以在任何时候不要用delete去删除数据，应该使用优雅的标记删除。</p>
<h2><a name="t14"></a><a name="t14"></a><a id="delete_377"></a>delete优化建议</h2>
<h3><a name="t15"></a><a name="t15"></a><a id="_379"></a>控制业务账号权限</h3>
<p>对于一个大的系统来说，需要根据业务特点去拆分子系统，每个子系统可以看做是一个service，例如美团APP，上面有很多服务，核心的服务有用户服务user-service，搜索服务search-service，商品product-service，位置服务location-service，价格服务price-service等。每个服务对应一个数据库，为该数据库创建单独账号，同时只授予DML权限且没有delete权限，同时禁止跨库访问。</p>
<pre class="prettyprint"><code class="prism language-mysql has-numbering">#创建用户数据库并授权
create database mt_user charset utf8mb4;
grant USAGE, SELECT, INSERT, UPDATE ON mt_user.*  to 'w_user'@'%' identified by 't$W*g@gaHTGi123456';
flush privileges;
</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
</ul>
<h3><a name="t16"></a><a name="t16"></a><a id="delete_390"></a>delete改为标记删除</h3>
<p>在MySQL数据库建模规范中有4个公共字段，基本上每个表必须有的，同时在create_time列要创建索引，有两方面的好处：</p>
<ol>
<li>一些查询业务场景都会有一个默认的时间段，比如7天或者一个月，都是通过create_time去过滤，走索引扫描更快。</li>
<li>一些核心的业务表需要以T +1的方式抽取数据仓库中，比如每天晚上00:30抽取前一天的数据，都是通过create_time过滤的。</li>
</ol>
<pre class="prettyprint"><code class="prism language-mysql has-numbering">`id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '主键id',
`is_deleted` tinyint(4) NOT NULL DEFAULT '0' COMMENT '是否逻辑删除：0：未删除，1：已删除',
`create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
`update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间'

#有了删除标记，业务接口的delete操作就可以转换为update
update user set is_deleted = 1 where user_id = 1213;

#查询的时候需要带上is_deleted过滤
select id, age ,phone from user where is_deleted = 0 and name like 'lyn12%';
</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
<li>9</li>
<li>10</li>
</ul>
<h2><a name="t17"></a><a name="t17"></a><a id="_410"></a>数据归档方式</h2>
<h3><a name="t18"></a><a name="t18"></a><a id="_412"></a>通用数据归档方法</h3>
<pre class="prettyprint"><code class="prism language-mysql has-numbering">#1. 创建归档表，一般在原表名后面添加_bak。
CREATE TABLE `ota_order_bak` (
  `id` bigint(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `order_id` varchar(255) DEFAULT NULL COMMENT '订单id',
  `ota_id` varchar(255) DEFAULT NULL COMMENT 'ota',
  `check_in_date` varchar(255) DEFAULT NULL COMMENT '入住日期',
  `check_out_date` varchar(255) DEFAULT NULL COMMENT '离店日期',
  `hotel_id` varchar(255) DEFAULT NULL COMMENT '酒店ID',
  `guest_name` varchar(255) DEFAULT NULL COMMENT '顾客',
  `purcharse_time` timestamp NULL DEFAULT NULL COMMENT '购买时间',
  `create_time` datetime DEFAULT NULL,
  `update_time` datetime DEFAULT NULL,
  `create_user` varchar(255) DEFAULT NULL,
  `update_user` varchar(255) DEFAULT NULL,
  `status` int(4) DEFAULT '1' COMMENT '状态 ： 1 正常 ， 0 删除',
  `hotel_name` varchar(255) DEFAULT NULL,
  `price` decimal(10,0) DEFAULT NULL,
  `remark` longtext,
  PRIMARY KEY (`id`),
  KEY `IDX_order_id` (`order_id`) USING BTREE,
  KEY `hotel_name` (`hotel_name`) USING BTREE,
  KEY `ota_id` (`ota_id`) USING BTREE,
  KEY `IDX_purcharse_time` (`purcharse_time`) USING BTREE,
  KEY `IDX_create_time` (`create_time`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8
PARTITION BY RANGE (to_days(create_time)) ( 
PARTITION p201808 VALUES LESS THAN (to_days('2018-09-01')), 
PARTITION p201809 VALUES LESS THAN (to_days('2018-10-01')), 
PARTITION p201810 VALUES LESS THAN (to_days('2018-11-01')), 
PARTITION p201811 VALUES LESS THAN (to_days('2018-12-01')), 
PARTITION p201812 VALUES LESS THAN (to_days('2019-01-01')), 
PARTITION p201901 VALUES LESS THAN (to_days('2019-02-01')), 
PARTITION p201902 VALUES LESS THAN (to_days('2019-03-01')), 
PARTITION p201903 VALUES LESS THAN (to_days('2019-04-01')), 
PARTITION p201904 VALUES LESS THAN (to_days('2019-05-01')), 
PARTITION p201905 VALUES LESS THAN (to_days('2019-06-01')), 
PARTITION p201906 VALUES LESS THAN (to_days('2019-07-01')), 
PARTITION p201907 VALUES LESS THAN (to_days('2019-08-01')), 
PARTITION p201908 VALUES LESS THAN (to_days('2019-09-01')), 
PARTITION p201909 VALUES LESS THAN (to_days('2019-10-01')), 
PARTITION p201910 VALUES LESS THAN (to_days('2019-11-01')), 
PARTITION p201911 VALUES LESS THAN (to_days('2019-12-01')), 
PARTITION p201912 VALUES LESS THAN (to_days('2020-01-01')));

#2. 插入原表中无效的数据（需要跟开发同学确认数据保留范围）
create table tbl_p201808 as select * from ota_order where create_time between '2018-08-01 00:00:00' and '2018-08-31 23:59:59';

#3. 跟归档表分区做分区交换
alter table ota_order_bak exchange partition p201808 with table tbl_p201808; 

#4. 删除原表中已经规范的数据
delete from ota_order where create_time between '2018-08-01 00:00:00' and '2018-08-31 23:59:59' limit 3000;
</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
<li>9</li>
<li>10</li>
<li>11</li>
<li>12</li>
<li>13</li>
<li>14</li>
<li>15</li>
<li>16</li>
<li>17</li>
<li>18</li>
<li>19</li>
<li>20</li>
<li>21</li>
<li>22</li>
<li>23</li>
<li>24</li>
<li>25</li>
<li>26</li>
<li>27</li>
<li>28</li>
<li>29</li>
<li>30</li>
<li>31</li>
<li>32</li>
<li>33</li>
<li>34</li>
<li>35</li>
<li>36</li>
<li>37</li>
<li>38</li>
<li>39</li>
<li>40</li>
<li>41</li>
<li>42</li>
<li>43</li>
<li>44</li>
<li>45</li>
<li>46</li>
<li>47</li>
<li>48</li>
<li>49</li>
<li>50</li>
<li>51</li>
<li>52</li>
</ul>
<h3><a name="t19"></a><a name="t19"></a><a id="_469"></a>优化后的归档方式</h3>
<pre class="prettyprint"><code class="prism language-mysql has-numbering">#1. 创建中间表
CREATE TABLE `ota_order_2020` (........) ENGINE=InnoDB DEFAULT CHARSET=utf8
PARTITION BY RANGE (to_days(create_time)) ( 
PARTITION p201808 VALUES LESS THAN (to_days('2018-09-01')), 
PARTITION p201809 VALUES LESS THAN (to_days('2018-10-01')), 
PARTITION p201810 VALUES LESS THAN (to_days('2018-11-01')), 
PARTITION p201811 VALUES LESS THAN (to_days('2018-12-01')), 
PARTITION p201812 VALUES LESS THAN (to_days('2019-01-01')), 
PARTITION p201901 VALUES LESS THAN (to_days('2019-02-01')), 
PARTITION p201902 VALUES LESS THAN (to_days('2019-03-01')), 
PARTITION p201903 VALUES LESS THAN (to_days('2019-04-01')), 
PARTITION p201904 VALUES LESS THAN (to_days('2019-05-01')), 
PARTITION p201905 VALUES LESS THAN (to_days('2019-06-01')), 
PARTITION p201906 VALUES LESS THAN (to_days('2019-07-01')), 
PARTITION p201907 VALUES LESS THAN (to_days('2019-08-01')), 
PARTITION p201908 VALUES LESS THAN (to_days('2019-09-01')), 
PARTITION p201909 VALUES LESS THAN (to_days('2019-10-01')), 
PARTITION p201910 VALUES LESS THAN (to_days('2019-11-01')), 
PARTITION p201911 VALUES LESS THAN (to_days('2019-12-01')), 
PARTITION p201912 VALUES LESS THAN (to_days('2020-01-01')));

#2. 插入原表中有效的数据，如果数据量在100W左右可以在业务低峰期直接插入，如果比较大，建议采用dataX来做，可以控制频率和大小，之前我这边用Go封装了dataX可以实现自动生成json文件，自定义大小去执行。
insert into ota_order_2020 select * from ota_order where create_time between '2020-08-01 00:00:00' and '2020-08-31 23:59:59';

#3. 表重命名
alter table ota_order rename to ota_order_bak;  
alter table ota_order_2020 rename to ota_order;
#4. 插入差异数据
insert into ota_order select * from ota_order_bak a where not exists (select 1 from ota_order b where a.id = b.id);
#5. ota_order_bak改造成分区表，如果表比较大不建议直接改造，可以先创建好分区表，通过dataX把导入进去即可。

#6. 后续的归档方法
#创建中间普遍表
create table ota_order_mid like ota_order;
#交换原表无效数据分区到普通表
alter table ota_order exchange partition p201808 with table ota_order_mid; 
##交换普通表数据到归档表的相应分区
alter table ota_order_bak exchange partition p201808 with table ota_order_mid; 
</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
<li>9</li>
<li>10</li>
<li>11</li>
<li>12</li>
<li>13</li>
<li>14</li>
<li>15</li>
<li>16</li>
<li>17</li>
<li>18</li>
<li>19</li>
<li>20</li>
<li>21</li>
<li>22</li>
<li>23</li>
<li>24</li>
<li>25</li>
<li>26</li>
<li>27</li>
<li>28</li>
<li>29</li>
<li>30</li>
<li>31</li>
<li>32</li>
<li>33</li>
<li>34</li>
<li>35</li>
<li>36</li>
<li>37</li>
<li>38</li>
</ul>
<p>这样原表和归档表都是按月的分区表，只需要创建一个中间普通表，在业务低峰期做两次分区交换，既可以删除无效数据，又能回收空，而且没有空间碎片，不会影响表上的索引及SQL的执行计划。</p>
<h2><a name="t20"></a><a name="t20"></a><a id="_514"></a>总结</h2>
<p>通过从InnoDB存储空间分布，delete对性能的影响可以看到，delete物理删除既不能释放磁盘空间，而且会产生大量的碎片，导致索引频繁分裂，影响SQL执行计划的稳定性；</p>
<p>同时在碎片回收时，会耗用大量的CPU，磁盘空间，影响表上正常的DML操作。</p>
<p>在业务代码层面，应该做逻辑标记删除，避免物理删除；为了实现数据归档需求，可以用采用MySQL分区表特性来实现，都是DDL操作，没有碎片产生。</p>
<p>另外一个比较好的方案采用Clickhouse，对有生命周期的数据表可以使用Clickhouse存储，利用其TTL特性实现无效数据自动清理。</p>
<p>&nbsp;</p>(String), 1(Integer), aaaaa(String), null
2020-11-23 22:13:18.320 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlBlogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 22:13:18.321 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlTypeMapper.selectByPrimaryKey.debug:159 -==>  Preparing: SELECT type_id,type_name,type_blog_count,enable,deleted FROM bl_type WHERE type_id = ? 
2020-11-23 22:13:18.321 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlTypeMapper.selectByPrimaryKey.debug:159 -==> Parameters: 1(Integer)
2020-11-23 22:13:18.357 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlTypeMapper.selectByPrimaryKey.debug:159 -<==      Total: 1
2020-11-23 22:13:18.359 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlTypeMapper.updateByPrimaryKey.debug:159 -==>  Preparing: UPDATE bl_type SET type_name = ?,type_blog_count = ?,enable = ?,deleted = ? WHERE type_id = ? 
2020-11-23 22:13:18.360 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlTypeMapper.updateByPrimaryKey.debug:159 -==> Parameters: Java(String), 104(Integer), 1(Integer), 0(Integer), 1(Integer)
2020-11-23 22:13:18.432 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlTypeMapper.updateByPrimaryKey.debug:159 -<==    Updates: 1
2020-11-23 22:13:18.556 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 22:13:18.558 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/save(String), [com.tqk.blog.pojo.BlBlog@c9f37c8](String), 1(Integer), null, POST(String), 529(Long), {"code":20000,"msg":"添加成功！"}(String), 192.168.101.29(String)
2020-11-23 22:13:18.652 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 22:13:18.737 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image, blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-11-23 22:13:18.738 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-11-23 22:13:18.780 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -<==      Total: 3
2020-11-23 22:13:18.784 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-11-23 22:13:18.786 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-11-23 22:13:18.823 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-11-23 22:13:18.938 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 22:13:18.940 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=1, totalCount=2, list=[BlogVo(blogId=1324038097171820544, blogTitle=BeanUtils.copyProperties的用法, blogImage=Java, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=Java, blogSource=百度, blogRemark=BeanUtils它提供了对java反射和自省API的包装。它里面还有很多工具类，这里我们介绍一下copyProperties。, blogComment=0, blogMonth=null, createdTime=2020-11-04 17:17:33, updateTime=2020-11-22 13:04:15), BlogVo(blogId=1330877080455553024, blogTitle=, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=Java, blogSource=null, blogRemark=aaaaa, blogComment=0, blogMonth=null, createdTime=2020-11-23 14:13:16, updateTime=2020-11-23 14:13:16)], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 234(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1324038097171820544","blogImage":"Java","blogRead":0,"blogRemark":"BeanUtils它提供了对java反射和自省API的包装。它里面还有很多工具类，这里我们介绍一下copyProperties。","blogSource":"百度","blogTitle":"BeanUtils.copyProperties的用法","createdTime":"2020-11-04 17:17:33","typeName":"Java","updateTime":"2020-11-22 13:04:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1330877080455553024","blogRead":0,"blogRemark":"aaaaa","blogTitle":"","createdTime":"2020-11-23 14:13:16","typeName":"Java","updateTime":"2020-11-23 14:13:16"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1330877084339478528","blogRead":0,"blogRemark":"aaaaa","blogTitle":"","createdTime":"2020-11-23 14:13:17","typeName":"Java","updateTime":"2020-11-23 14:13:17"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":3,"totalPage":1},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 22:13:19.024 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 22:13:29.092 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlBlogMapper.getById.debug:159 -==>  Preparing: select blog_id, blog_title, blog_content, blog_goods, blog_image, blog_read, blog_collection, blog_type, blog_remark, blog_comment, blog_source, created_time, version from bl_blog where blog_id = ? and deleted = 0 
2020-11-23 22:13:29.094 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlBlogMapper.getById.debug:159 -==> Parameters: 1330877084339478528(String)
2020-11-23 22:13:29.210 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlBlogMapper.getById.debug:159 -<==      Total: 1
2020-11-23 22:13:29.272 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 22:13:29.274 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/get/1330877084339478528(String), [1330877084339478528](String), 1(Integer), 	at com.tqk.blog.controller.AdminController.getLoginInfo(AdminController.java:67)
	at com.tqk.blog.controller.AdminController$$FastClassBySpringCGLIB$$5e004558.invoke(<generated>)
	at com.tqk.blog.aspect.RequestAspect.doAround(RequestAspect.java:65)
	at com.tqk.blog.controller.AdminController$$EnhancerBySpringCGLIB$$8053c02.getLoginInfo(<generated>)
(String), GET(String), 163(Long), {"code":20000,"data":{"blogCollection":0,"blogComment":0,"blogContent":"<h2>前言</h2>\n<p>我负责的有几个系统随着业务量的增长，存储在MySQL中的数据日益剧增，我当时就想现在的业务方不讲武德，搞偷袭，趁我没反应过来把很多表，很快，很快啊都打到了亿级别，我大意了，没有闪，这就导致跟其Join的表的SQL变得很慢，对的应用接口的response time也变长了，影响了用户体验。</p>\n<p>事后我找到业务方，我批评了他们跟他们说要讲武德，连忙跟我道歉，这个事情才就此作罢，走的时候我对他们说下次不要这样了，耗子尾汁，好好反思。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/3c93aececcb9e763f5476362c4e88710.png\" alt=\"\" /></p>\n<p>骂归骂，事情还是得解决，时候我分析原因发现，发现有些表的数据量增长很快，对应SQL扫描了很多无效数据，导致SQL慢了下来，通过确认之后，这些大表都是一些流水、记录、日志类型数据，只需要保留1到3个月，此时需要对表做数据清理实现瘦身，一般都会想到用insert + delete的方式去清理。</p>\n<p>这篇文章我会从InnoDB存储空间分布，delete对性能的影响，以及优化建议方面解释为什么不建议delete删除数据。</p>\n<h2><a name=\"t1\"></a><a name=\"t1\"></a><a id=\"InnoDB_16\"></a>InnoDB存储架构</h2>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/5c66ffe9749c58e1613d2519f7ea7211.png\" alt=\"\" /></p>\n<p>从这张图可以看到，InnoDB存储结构主要包括两部分：逻辑存储结构和物理存储结构。</p>\n<p>逻辑上是由表空间tablespace &mdash;&gt; 段segment或者inode &mdash;&gt; 区Extent &mdash;&mdash;&gt;数据页Page构成，Innodb逻辑管理单位是segment，空间分配的最小单位是extent，每个segment都会从表空间FREE_PAGE中分配32个page，当这32个page不够用时，会按照以下原则进行扩展：如果当前小于1个extent，则扩展到1个extent；当表空间小于32MB时，每次扩展一个extent；表空间大于32MB，每次扩展4个extent。</p>\n<p>物理上主要由系统用户数据文件，日志文件组成，数据文件主要存储MySQL字典数据和用户数据，日志文件记录的是data page的变更记录，用于MySQL Crash时的恢复。</p>\n<h2><a name=\"t2\"></a><a name=\"t2\"></a><a id=\"Innodb_26\"></a>Innodb表空间</h2>\n<p>InnoDB存储包括三类表空间：系统表空间，用户表空间，Undo表空间。</p>\n<p><strong>系统表空间：</strong>&nbsp;主要存储MySQL内部的数据字典数据，如information_schema下的数据。</p>\n<p><strong>用户表空间：</strong>&nbsp;当开启innodb_file_per_table=1时，数据表从系统表空间独立出来存储在以table_name.ibd命令的数据文件中，结构信息存储在table_name.frm文件中。</p>\n<p><strong>Undo表空间：</strong>&nbsp;存储Undo信息，如快照一致读和flashback都是利用undo信息。</p>\n<p>从MySQL 8.0开始允许用户自定义表空间，具体语法如下：</p>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">CREATE TABLESPACE tablespace_name\n    ADD DATAFILE 'file_name'               #数据文件名\n    USE LOGFILE GROUP logfile_group        #自定义日志文件组，一般每组2个logfile。\n    [EXTENT_SIZE [=] extent_size]          #区大小\n    [INITIAL_SIZE [=] initial_size]        #初始化大小 \n    [AUTOEXTEND_SIZE [=] autoextend_size]  #自动扩宽尺寸\n    [MAX_SIZE [=] max_size]                #单个文件最大size，最大是32G。\n    [NODEGROUP [=] nodegroup_id]           #节点组\n    [WAIT]\n    [COMMENT [=] comment_text]\n    ENGINE [=] engine_name\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n</ul>\n<p>这样的好处是可以做到数据的冷热分离，分别用HDD和SSD来存储，既能实现数据的高效访问，又能节约成本，比如可以添加两块500G硬盘，经过创建卷组vg，划分逻辑卷lv，创建数据目录并mount相应的lv，假设划分的两个目录分别是/hot_data 和 /cold_data。</p>\n<p>这样就可以将核心的业务表如用户表，订单表存储在高性能SSD盘上，一些日志，流水表存储在普通的HDD上，主要的操作步骤如下：</p>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">#创建热数据表空间\ncreate tablespace tbs_data_hot add datafile '/hot_data/tbs_data_hot01.dbf' max_size 20G;\n#创建核心业务表存储在热数据表空间\ncreate table booking(id bigint not null primary key auto_increment, &hellip;&hellip; ) tablespace tbs_data_hot;\n#创建冷数据表空间\ncreate tablespace tbs_data_cold add datafile '/hot_data/tbs_data_cold01.dbf' max_size 20G;\n#创建日志，流水，备份类的表存储在冷数据表空间\ncreate table payment_log(id bigint not null primary key auto_increment, &hellip;&hellip; ) tablespace tbs_data_cold;\n#可以移动表到另一个表空间\nalter table payment_log tablespace tbs_data_hot;\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n</ul>\n<h2><a name=\"t3\"></a><a name=\"t3\"></a><a id=\"Inndob_69\"></a>Inndob存储分布</h2>\n<h3><a name=\"t4\"></a><a name=\"t4\"></a><a id=\"_71\"></a>创建空表查看空间变化</h3>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">mysql&gt; create table user(id bigint not null primary key auto_increment, \n    -&gt; name varchar(20) not null default '' comment '姓名', \n    -&gt; age tinyint not null default 0 comment 'age', \n    -&gt; gender char(1) not null default 'M'  comment '性别',\n    -&gt; phone varchar(16) not null default '' comment '手机号',\n    -&gt; create_time datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',\n    -&gt; update_time datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间'\n    -&gt; ) engine = InnoDB DEFAULT CHARSET=utf8mb4 COMMENT '用户信息表';\nQuery OK, 0 rows affected (0.26 sec)\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n</ul>\n<pre class=\"prettyprint\"><code class=\"prism language-bash has-numbering\"><span class=\"token comment\"># ls -lh user1.ibd </span>\n-rw-r----- 1 mysql mysql 96K Nov  6 12:48 user.ibd\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n</ul>\n<p>设置参数innodb_file_per_table=1时，创建表时会自动创建一个segment，同时分配一个extent，包含32个data page的来存储数据，这样创建的空表默认大小就是96KB，extent使用完之后会申请64个连接页，这样对于一些小表，或者undo segment，可以在开始时申请较少的空间，节省磁盘容量的开销。</p>\n<pre class=\"prettyprint\"><code class=\"prism language-shell has-numbering\"><span class=\"token comment\"># python2 py_innodb_page_info.py -v /data2/mysql/test/user.ibd</span>\npage offset 00000000, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>File Space Header<span class=\"token operator\">&gt;</span>\npage offset 00000001, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>Insert Buffer Bitmap<span class=\"token operator\">&gt;</span>\npage offset 00000002, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>File Segment inode<span class=\"token operator\">&gt;</span>\npage offset 00000003, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>B-tree Node<span class=\"token operator\">&gt;</span>, page level <span class=\"token operator\">&lt;</span>0000<span class=\"token operator\">&gt;</span>\npage offset 00000000, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>Freshly Allocated Page<span class=\"token operator\">&gt;</span>\npage offset 00000000, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>Freshly Allocated Page<span class=\"token operator\">&gt;</span>\nTotal number of page: 6:      <span class=\"token comment\">#总共分配的页数</span>\nFreshly Allocated Page: 2     <span class=\"token comment\">#可用的数据页</span>\nInsert Buffer Bitmap: 1       <span class=\"token comment\">#插入缓冲页</span>\nFile Space Header: 1          <span class=\"token comment\">#文件空间头</span>\nB-tree Node: 1                <span class=\"token comment\">#数据页</span>\nFile Segment inode: 1         <span class=\"token comment\">#文件端inonde，如果是在ibdata1.ibd上会有多个inode。</span>\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n</ul>\n<h3><a name=\"t5\"></a><a name=\"t5\"></a><a id=\"_108\"></a>插入数据后的空间变化</h3>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">mysql&gt; DELIMITER $$\nmysql&gt; CREATE PROCEDURE insert_user_data(num INTEGER) \n    -&gt; BEGIN\n    -&gt;     DECLARE v_i int unsigned DEFAULT 0;\n    -&gt; set autocommit= 0;\n    -&gt; WHILE v_i &lt; num DO\n    -&gt;    insert into user(`name`, age, gender, phone) values (CONCAT('lyn',v_i), mod(v_i,120), 'M', CONCAT('152',ROUND(RAND(1)*100000000)));\n    -&gt;  SET v_i = v_i+1;\n    -&gt; END WHILE;\n    -&gt; commit;\n    -&gt; END $$\nQuery OK, 0 rows affected (0.01 sec)\nmysql&gt; DELIMITER ;\n\n#插入10w数据\nmysql&gt; call insert_user_data(100000);\nQuery OK, 0 rows affected (6.69 sec)\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n<li>17</li>\n</ul>\n<pre class=\"prettyprint\"><code class=\"prism language-shell has-numbering\"><span class=\"token comment\"># ls -lh user.ibd</span>\n-rw-r----- 1 mysql mysql 14M Nov 6 10:58 /data2/mysql/test/user.ibd\n\n<span class=\"token comment\"># python2 py_innodb_page_info.py -v /data2/mysql/test/user.ibd</span>\npage offset 00000000, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>File Space Header<span class=\"token operator\">&gt;</span>\npage offset 00000001, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>Insert Buffer Bitmap<span class=\"token operator\">&gt;</span>\npage offset 00000002, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>File Segment inode<span class=\"token operator\">&gt;</span>\npage offset 00000003, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>B-tree Node<span class=\"token operator\">&gt;</span>, page level <span class=\"token operator\">&lt;</span>0001<span class=\"token operator\">&gt;</span>   <span class=\"token comment\">#增加了一个非叶子节点，树的高度从1变为2.</span>\n<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>\npage offset 00000000, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>Freshly Allocated Page<span class=\"token operator\">&gt;</span>\nTotal number of page: 896:\nFreshly Allocated Page: 493\nInsert Buffer Bitmap: 1\nFile Space Header: 1\nB-tree Node: 400\nFile Segment inode: 1\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n</ul>\n<h3><a name=\"t6\"></a><a name=\"t6\"></a><a id=\"delete_149\"></a>delete数据后的空间变化</h3>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">mysql&gt; select min(id),max(id),count(*) from user;\n+---------+---------+----------+\n| min(id) | max(id) | count(*) |\n+---------+---------+----------+\n|       1 |  100000 |   100000 |\n+---------+---------+----------+\n1 row in set (0.05 sec)\n#删除50000条数据，理论上空间应该从14MB变长7MB左右。\nmysql&gt; delete from user limit 50000;\nQuery OK, 50000 rows affected (0.25 sec)\n\n#数据文件大小依然是14MB，没有缩小。\n# ls -lh /data2/mysql/test/user1.ibd \n-rw-r----- 1 mysql mysql 14M Nov  6 13:22 /data2/mysql/test/user.ibd\n\n#数据页没有被回收。\n# python2 py_innodb_page_info.py -v /data2/mysql/test/user.ibd\npage offset 00000000, page type &lt;File Space Header&gt;\npage offset 00000001, page type &lt;Insert Buffer Bitmap&gt;\npage offset 00000002, page type &lt;File Segment inode&gt;\npage offset 00000003, page type &lt;B-tree Node&gt;, page level &lt;0001&gt;\n........................................................\npage offset 00000000, page type &lt;Freshly Allocated Page&gt;\nTotal number of page: 896:\nFreshly Allocated Page: 493\nInsert Buffer Bitmap: 1\nFile Space Header: 1\nB-tree Node: 400\nFile Segment inode: 1\n#在MySQL内部是标记删除，\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n<li>17</li>\n<li>18</li>\n<li>19</li>\n<li>20</li>\n<li>21</li>\n<li>22</li>\n<li>23</li>\n<li>24</li>\n<li>25</li>\n<li>26</li>\n<li>27</li>\n<li>28</li>\n<li>29</li>\n<li>30</li>\n</ul>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">mysql&gt; use information_schema;\n\nDatabase changed\nmysql&gt; SELECT A.SPACE AS TBL_SPACEID, A.TABLE_ID, A.NAME AS TABLE_NAME, FILE_FORMAT, ROW_FORMAT, SPACE_TYPE,  B.INDEX_ID , B.NAME AS INDEX_NAME, PAGE_NO, B.TYPE AS INDEX_TYPE FROM INNODB_SYS_TABLES A LEFT JOIN INNODB_SYS_INDEXES B ON A.TABLE_ID =B.TABLE_ID WHERE A.NAME = 'test/user1';\n+-------------+----------+------------+-------------+------------+------------+----------+------------+---------+------------+\n| TBL_SPACEID | TABLE_ID | TABLE_NAME | FILE_FORMAT | ROW_FORMAT | SPACE_TYPE | INDEX_ID | INDEX_NAME | PAGE_NO | INDEX_TYPE |\n+-------------+----------+------------+-------------+------------+------------+----------+------------+---------+------------+\n|        1283 |     1207 | test/user | Barracuda   | Dynamic    | Single     |     2236 | PRIMARY    |       3 |          3 |\n+-------------+----------+------------+-------------+------------+------------+----------+------------+---------+------------+\n1 row in set (0.01 sec)\n\nPAGE_NO = 3 标识B-tree的root page是3号页，INDEX_TYPE = 3是聚集索引。 INDEX_TYPE取值如下：\n0 = nonunique secondary index; \n1 = automatically generated clustered index (GEN_CLUST_INDEX); \n2 = unique nonclustered index; \n3 = clustered index; \n32 = full-text index;\n#收缩空间再后进行观察\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n<li>17</li>\n<li>18</li>\n</ul>\n<p>MySQL内部不会真正删除空间，而且做标记删除，即将delflag:N修改为delflag:Y，commit之后会会被purge进入删除链表，如果下一次insert更大的记录，delete之后的空间不会被重用，如果插入的记录小于等于delete的记录空会被重用，这块内容可以通过知数堂的innblock工具进行分析。</p>\n<h2><a name=\"t7\"></a><a name=\"t7\"></a><a id=\"Innodb_207\"></a>Innodb中的碎片</h2>\n<h3><a name=\"t8\"></a><a name=\"t8\"></a><a id=\"_209\"></a>碎片的产生</h3>\n<p>我们知道数据存储在文件系统上的，总是不能100%利用分配给它的物理空间，删除数据会在页面上留下一些&rdquo;空洞&rdquo;，或者随机写入（聚集索引非线性增加）会导致页分裂，页分裂导致页面的利用空间少于50%，另外对表进行增删改会引起对应的二级索引值的随机的增删改，也会导致索引结构中的数据页面上留下一些\"空洞\"，虽然这些空洞有可能会被重复利用，但终究会导致部分物理空间未被使用，也就是碎片。</p>\n<p>同时，即便是设置了填充因子为100%，Innodb也会主动留下page页面1/16的空间作为预留使用（An innodb_fill_factor setting of 100 leaves 1/16 of the space in clustered index pages free for future index growth）防止update带来的行溢出。</p>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">mysql&gt; select table_schema,\n    -&gt;        table_name,ENGINE,\n    -&gt;        round(DATA_LENGTH/1024/1024+ INDEX_LENGTH/1024/1024) total_mb,TABLE_ROWS,\n    -&gt;        round(DATA_LENGTH/1024/1024) data_mb, round(INDEX_LENGTH/1024/1024) index_mb, round(DATA_FREE/1024/1024) free_mb, round(DATA_FREE/DATA_LENGTH*100,2) free_ratio\n    -&gt; from information_schema.TABLES where  TABLE_SCHEMA= 'test'\n    -&gt; and TABLE_NAME= 'user';\n+--------------+------------+--------+----------+------------+---------+----------+---------+------------+\n| table_schema | table_name | ENGINE | total_mb | TABLE_ROWS | data_mb | index_mb | free_mb | free_ratio |\n+--------------+------------+--------+----------+------------+---------+----------+---------+------------+\n| test         | user      | InnoDB |        4 |      50000 |       4 |        0 |       6 |     149.42 |\n+--------------+------------+--------+----------+------------+---------+----------+---------+------------+\n1 row in set (0.00 sec)\n\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n</ul>\n<p>其中data_free是分配了未使用的字节数，并不能说明完全是碎片空间。</p>\n<h3><a name=\"t9\"></a><a name=\"t9\"></a><a id=\"_233\"></a>碎片的回收</h3>\n<p>对于InnoDB的表，可以通过以下命令来回收碎片，释放空间，这个是随机读IO操作，会比较耗时，也会阻塞表上正常的DML运行，同时需要占用额外更多的磁盘空间，对于RDS来说，可能会导致磁盘空间瞬间爆满，实例瞬间被锁定，应用无法做DML操作，所以禁止在线上环境去执行。</p>\n<pre class=\"prettyprint\"><code class=\"prism language-shell has-numbering\"><span class=\"token comment\">#执行InnoDB的碎片回收</span>\nmysql<span class=\"token operator\">&gt;</span> alter table user engine<span class=\"token operator\">=</span>InnoDB<span class=\"token punctuation\">;</span>\nQuery OK, 0 rows affected <span class=\"token punctuation\">(</span>9.00 sec<span class=\"token punctuation\">)</span>\nRecords: 0  Duplicates: 0  Warnings: 0\n\n<span class=\"token comment\">##执行完之后，数据文件大小从14MB降低到10M。</span>\n<span class=\"token comment\"># ls -lh /data2/mysql/test/user1.ibd </span>\n-rw-r----- 1 mysql mysql 10M Nov 6 16:18 /data2/mysql/test/user.ibd\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n</ul>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">mysql&gt; select table_schema,        table_name,ENGINE,        round(DATA_LENGTH/1024/1024+ INDEX_LENGTH/1024/1024) total_mb,TABLE_ROWS,        round(DATA_LENGTH/1024/1024) data_mb, round(INDEX_LENGTH/1024/1024) index_mb, round(DATA_FREE/1024/1024) free_mb, round(DATA_FREE/DATA_LENGTH*100,2) free_ratio from information_schema.TABLES where  TABLE_SCHEMA= 'test' and TABLE_NAME= 'user';\n+--------------+------------+--------+----------+------------+---------+----------+---------+------------+\n| table_schema | table_name | ENGINE | total_mb | TABLE_ROWS | data_mb | index_mb | free_mb | free_ratio |\n+--------------+------------+--------+----------+------------+---------+----------+---------+------------+\n| test         | user      | InnoDB |        5 |      50000 |       5 |        0 |       2 |      44.29 |\n+--------------+------------+--------+----------+------------+---------+----------+---------+------------+\n1 row in set (0.00 sec)\n\n\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n</ul>\n<h2><a name=\"t10\"></a><a name=\"t10\"></a><a id=\"deleteSQL_260\"></a>delete对SQL的影响</h2>\n<h3><a name=\"t11\"></a><a name=\"t11\"></a><a id=\"SQL_262\"></a>未删除前的SQL执行情况</h3>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">#插入100W数据\nmysql&gt; call insert_user_data(1000000);\nQuery OK, 0 rows affected (35.99 sec)\n\n#添加相关索引\nmysql&gt; alter table user add index idx_name(name), add index idx_phone(phone);\nQuery OK, 0 rows affected (6.00 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\n#表上索引统计信息\nmysql&gt; show index from user;\n+-------+------------+-----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+\n| Table | Non_unique | Key_name  | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment |\n+-------+------------+-----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+\n| user  |          0 | PRIMARY   |            1 | id          | A         |      996757 |     NULL | NULL   |      | BTREE      |         |               |\n| user  |          1 | idx_name  |            1 | name        | A         |      996757 |     NULL | NULL   |      | BTREE      |         |               |\n| user  |          1 | idx_phone |            1 | phone       | A         |           2 |     NULL | NULL   |      | BTREE      |         |               |\n+-------+------------+-----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+\n3 rows in set (0.00 sec)\n\n#重置状态变量计数\nmysql&gt; flush status;\nQuery OK, 0 rows affected (0.00 sec)\n\n#执行SQL语句\nmysql&gt; select id, age ,phone from user where name like 'lyn12%';\n+--------+-----+-------------+\n| id     | age | phone       |\n+--------+-----+-------------+\n|    124 |   3 | 15240540354 |\n|   1231 |  30 | 15240540354 |\n|  12301 |  60 | 15240540354 |\n.............................\n| 129998 |  37 | 15240540354 |\n| 129999 |  38 | 15240540354 |\n| 130000 |  39 | 15240540354 |\n+--------+-----+-------------+\n11111 rows in set (0.03 sec)\n\nmysql&gt; explain select id, age ,phone from user where name like 'lyn12%';\n+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+\n| id | select_type | table | type  | possible_keys | key      | key_len | ref  | rows  | Extra                 |\n+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+\n|  1 | SIMPLE      | user  | range | idx_name      | idx_name | 82      | NULL | 22226 | Using index condition |\n+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+\n1 row in set (0.00 sec)\n\n#查看相关状态呢变量\nmysql&gt; select * from information_schema.session_status where variable_name in('Last_query_cost','Handler_read_next','Innodb_pages_read','Innodb_data_reads','Innodb_pages_read');\n+-------------------+----------------+\n| VARIABLE_NAME     | VARIABLE_VALUE |\n+-------------------+----------------+\n| HANDLER_READ_NEXT | 11111          |    #请求读的行数\n| INNODB_DATA_READS | 7868409        |    #数据物理读的总数\n| INNODB_PAGES_READ | 7855239        |    #逻辑读的总数\n| LAST_QUERY_COST   | 10.499000      |    #SQL语句的成本COST，主要包括IO_COST和CPU_COST。\n+-------------------+----------------+\n4 rows in set (0.00 sec)\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n<li>17</li>\n<li>18</li>\n<li>19</li>\n<li>20</li>\n<li>21</li>\n<li>22</li>\n<li>23</li>\n<li>24</li>\n<li>25</li>\n<li>26</li>\n<li>27</li>\n<li>28</li>\n<li>29</li>\n<li>30</li>\n<li>31</li>\n<li>32</li>\n<li>33</li>\n<li>34</li>\n<li>35</li>\n<li>36</li>\n<li>37</li>\n<li>38</li>\n<li>39</li>\n<li>40</li>\n<li>41</li>\n<li>42</li>\n<li>43</li>\n<li>44</li>\n<li>45</li>\n<li>46</li>\n<li>47</li>\n<li>48</li>\n<li>49</li>\n<li>50</li>\n<li>51</li>\n<li>52</li>\n<li>53</li>\n<li>54</li>\n<li>55</li>\n<li>56</li>\n<li>57</li>\n<li>58</li>\n</ul>\n<h3><a name=\"t12\"></a><a name=\"t12\"></a><a id=\"SQL_325\"></a>删除后的SQL执行情况</h3>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">#删除50w数据\nmysql&gt; delete from user limit 500000;\nQuery OK, 500000 rows affected (3.70 sec)\n\n#分析表统计信息\nmysql&gt; analyze table user;\n+-----------+---------+----------+----------+\n| Table     | Op      | Msg_type | Msg_text |\n+-----------+---------+----------+----------+\n| test.user | analyze | status   | OK       |\n+-----------+---------+----------+----------+\n1 row in set (0.01 sec)\n\n#重置状态变量计数\nmysql&gt; flush status;\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql&gt; select id, age ,phone from user where name like 'lyn12%';\nEmpty set (0.05 sec)\n\nmysql&gt; explain select id, age ,phone from user where name like 'lyn12%';\n+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+\n| id | select_type | table | type  | possible_keys | key      | key_len | ref  | rows  | Extra                 |\n+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+\n|  1 | SIMPLE      | user  | range | idx_name      | idx_name | 82      | NULL | 22226 | Using index condition |\n+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+\n1 row in set (0.00 sec)\n\nmysql&gt; select * from information_schema.session_status where variable_name in('Last_query_cost','Handler_read_next','Innodb_pages_read','Innodb_data_reads','Innodb_pages_read');\n+-------------------+----------------+\n| VARIABLE_NAME     | VARIABLE_VALUE |\n+-------------------+----------------+\n| HANDLER_READ_NEXT | 0              |\n| INNODB_DATA_READS | 7868409        |\n| INNODB_PAGES_READ | 7855239        |\n| LAST_QUERY_COST   | 10.499000      |\n+-------------------+----------------+\n4 rows in set (0.00 sec)\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n<li>17</li>\n<li>18</li>\n<li>19</li>\n<li>20</li>\n<li>21</li>\n<li>22</li>\n<li>23</li>\n<li>24</li>\n<li>25</li>\n<li>26</li>\n<li>27</li>\n<li>28</li>\n<li>29</li>\n<li>30</li>\n<li>31</li>\n<li>32</li>\n<li>33</li>\n<li>34</li>\n<li>35</li>\n<li>36</li>\n<li>37</li>\n<li>38</li>\n</ul>\n<h3><a name=\"t13\"></a><a name=\"t13\"></a><a id=\"_368\"></a>结果统计分析</h3>\n<div class=\"table-box\">\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>COST</th>\n<th>物理读次数</th>\n<th>逻辑读次数</th>\n<th>扫描行数</th>\n<th>返回行数</th>\n<th>执行时间</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>初始化插入100W</td>\n<td>10.499000</td>\n<td>7868409</td>\n<td>7855239</td>\n<td>22226</td>\n<td>11111</td>\n<td>30ms</td>\n</tr>\n<tr>\n<td>100W随机删除50W</td>\n<td>10.499000</td>\n<td>7868409</td>\n<td>7855239</td>\n<td>22226</td>\n<td>0</td>\n<td>50ms</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>这也说明对普通的大表，想要通过delete数据来对表进行瘦身是不现实的，所以在任何时候不要用delete去删除数据，应该使用优雅的标记删除。</p>\n<h2><a name=\"t14\"></a><a name=\"t14\"></a><a id=\"delete_377\"></a>delete优化建议</h2>\n<h3><a name=\"t15\"></a><a name=\"t15\"></a><a id=\"_379\"></a>控制业务账号权限</h3>\n<p>对于一个大的系统来说，需要根据业务特点去拆分子系统，每个子系统可以看做是一个service，例如美团APP，上面有很多服务，核心的服务有用户服务user-service，搜索服务search-service，商品product-service，位置服务location-service，价格服务price-service等。每个服务对应一个数据库，为该数据库创建单独账号，同时只授予DML权限且没有delete权限，同时禁止跨库访问。</p>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">#创建用户数据库并授权\ncreate database mt_user charset utf8mb4;\ngrant USAGE, SELECT, INSERT, UPDATE ON mt_user.*  to 'w_user'@'%' identified by 't$W*g@gaHTGi123456';\nflush privileges;\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n</ul>\n<h3><a name=\"t16\"></a><a name=\"t16\"></a><a id=\"delete_390\"></a>delete改为标记删除</h3>\n<p>在MySQL数据库建模规范中有4个公共字段，基本上每个表必须有的，同时在create_time列要创建索引，有两方面的好处：</p>\n<ol>\n<li>一些查询业务场景都会有一个默认的时间段，比如7天或者一个月，都是通过create_time去过滤，走索引扫描更快。</li>\n<li>一些核心的业务表需要以T +1的方式抽取数据仓库中，比如每天晚上00:30抽取前一天的数据，都是通过create_time过滤的。</li>\n</ol>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">`id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '主键id',\n`is_deleted` tinyint(4) NOT NULL DEFAULT '0' COMMENT '是否逻辑删除：0：未删除，1：已删除',\n`create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',\n`update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间'\n\n#有了删除标记，业务接口的delete操作就可以转换为update\nupdate user set is_deleted = 1 where user_id = 1213;\n\n#查询的时候需要带上is_deleted过滤\nselect id, age ,phone from user where is_deleted = 0 and name like 'lyn12%';\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n</ul>\n<h2><a name=\"t17\"></a><a name=\"t17\"></a><a id=\"_410\"></a>数据归档方式</h2>\n<h3><a name=\"t18\"></a><a name=\"t18\"></a><a id=\"_412\"></a>通用数据归档方法</h3>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">#1. 创建归档表，一般在原表名后面添加_bak。\nCREATE TABLE `ota_order_bak` (\n  `id` bigint(11) NOT NULL AUTO_INCREMENT COMMENT '主键',\n  `order_id` varchar(255) DEFAULT NULL COMMENT '订单id',\n  `ota_id` varchar(255) DEFAULT NULL COMMENT 'ota',\n  `check_in_date` varchar(255) DEFAULT NULL COMMENT '入住日期',\n  `check_out_date` varchar(255) DEFAULT NULL COMMENT '离店日期',\n  `hotel_id` varchar(255) DEFAULT NULL COMMENT '酒店ID',\n  `guest_name` varchar(255) DEFAULT NULL COMMENT '顾客',\n  `purcharse_time` timestamp NULL DEFAULT NULL COMMENT '购买时间',\n  `create_time` datetime DEFAULT NULL,\n  `update_time` datetime DEFAULT NULL,\n  `create_user` varchar(255) DEFAULT NULL,\n  `update_user` varchar(255) DEFAULT NULL,\n  `status` int(4) DEFAULT '1' COMMENT '状态 ： 1 正常 ， 0 删除',\n  `hotel_name` varchar(255) DEFAULT NULL,\n  `price` decimal(10,0) DEFAULT NULL,\n  `remark` longtext,\n  PRIMARY KEY (`id`),\n  KEY `IDX_order_id` (`order_id`) USING BTREE,\n  KEY `hotel_name` (`hotel_name`) USING BTREE,\n  KEY `ota_id` (`ota_id`) USING BTREE,\n  KEY `IDX_purcharse_time` (`purcharse_time`) USING BTREE,\n  KEY `IDX_create_time` (`create_time`) USING BTREE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\nPARTITION BY RANGE (to_days(create_time)) ( \nPARTITION p201808 VALUES LESS THAN (to_days('2018-09-01')), \nPARTITION p201809 VALUES LESS THAN (to_days('2018-10-01')), \nPARTITION p201810 VALUES LESS THAN (to_days('2018-11-01')), \nPARTITION p201811 VALUES LESS THAN (to_days('2018-12-01')), \nPARTITION p201812 VALUES LESS THAN (to_days('2019-01-01')), \nPARTITION p201901 VALUES LESS THAN (to_days('2019-02-01')), \nPARTITION p201902 VALUES LESS THAN (to_days('2019-03-01')), \nPARTITION p201903 VALUES LESS THAN (to_days('2019-04-01')), \nPARTITION p201904 VALUES LESS THAN (to_days('2019-05-01')), \nPARTITION p201905 VALUES LESS THAN (to_days('2019-06-01')), \nPARTITION p201906 VALUES LESS THAN (to_days('2019-07-01')), \nPARTITION p201907 VALUES LESS THAN (to_days('2019-08-01')), \nPARTITION p201908 VALUES LESS THAN (to_days('2019-09-01')), \nPARTITION p201909 VALUES LESS THAN (to_days('2019-10-01')), \nPARTITION p201910 VALUES LESS THAN (to_days('2019-11-01')), \nPARTITION p201911 VALUES LESS THAN (to_days('2019-12-01')), \nPARTITION p201912 VALUES LESS THAN (to_days('2020-01-01')));\n\n#2. 插入原表中无效的数据（需要跟开发同学确认数据保留范围）\ncreate table tbl_p201808 as select * from ota_order where create_time between '2018-08-01 00:00:00' and '2018-08-31 23:59:59';\n\n#3. 跟归档表分区做分区交换\nalter table ota_order_bak exchange partition p201808 with table tbl_p201808; \n\n#4. 删除原表中已经规范的数据\ndelete from ota_order where create_time between '2018-08-01 00:00:00' and '2018-08-31 23:59:59' limit 3000;\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n<li>17</li>\n<li>18</li>\n<li>19</li>\n<li>20</li>\n<li>21</li>\n<li>22</li>\n<li>23</li>\n<li>24</li>\n<li>25</li>\n<li>26</li>\n<li>27</li>\n<li>28</li>\n<li>29</li>\n<li>30</li>\n<li>31</li>\n<li>32</li>\n<li>33</li>\n<li>34</li>\n<li>35</li>\n<li>36</li>\n<li>37</li>\n<li>38</li>\n<li>39</li>\n<li>40</li>\n<li>41</li>\n<li>42</li>\n<li>43</li>\n<li>44</li>\n<li>45</li>\n<li>46</li>\n<li>47</li>\n<li>48</li>\n<li>49</li>\n<li>50</li>\n<li>51</li>\n<li>52</li>\n</ul>\n<h3><a name=\"t19\"></a><a name=\"t19\"></a><a id=\"_469\"></a>优化后的归档方式</h3>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">#1. 创建中间表\nCREATE TABLE `ota_order_2020` (........) ENGINE=InnoDB DEFAULT CHARSET=utf8\nPARTITION BY RANGE (to_days(create_time)) ( \nPARTITION p201808 VALUES LESS THAN (to_days('2018-09-01')), \nPARTITION p201809 VALUES LESS THAN (to_days('2018-10-01')), \nPARTITION p201810 VALUES LESS THAN (to_days('2018-11-01')), \nPARTITION p201811 VALUES LESS THAN (to_days('2018-12-01')), \nPARTITION p201812 VALUES LESS THAN (to_days('2019-01-01')), \nPARTITION p201901 VALUES LESS THAN (to_days('2019-02-01')), \nPARTITION p201902 VALUES LESS THAN (to_days('2019-03-01')), \nPARTITION p201903 VALUES LESS THAN (to_days('2019-04-01')), \nPARTITION p201904 VALUES LESS THAN (to_days('2019-05-01')), \nPARTITION p201905 VALUES LESS THAN (to_days('2019-06-01')), \nPARTITION p201906 VALUES LESS THAN (to_days('2019-07-01')), \nPARTITION p201907 VALUES LESS THAN (to_days('2019-08-01')), \nPARTITION p201908 VALUES LESS THAN (to_days('2019-09-01')), \nPARTITION p201909 VALUES LESS THAN (to_days('2019-10-01')), \nPARTITION p201910 VALUES LESS THAN (to_days('2019-11-01')), \nPARTITION p201911 VALUES LESS THAN (to_days('2019-12-01')), \nPARTITION p201912 VALUES LESS THAN (to_days('2020-01-01')));\n\n#2. 插入原表中有效的数据，如果数据量在100W左右可以在业务低峰期直接插入，如果比较大，建议采用dataX来做，可以控制频率和大小，之前我这边用Go封装了dataX可以实现自动生成json文件，自定义大小去执行。\ninsert into ota_order_2020 select * from ota_order where create_time between '2020-08-01 00:00:00' and '2020-08-31 23:59:59';\n\n#3. 表重命名\nalter table ota_order rename to ota_order_bak;  \nalter table ota_order_2020 rename to ota_order;\n#4. 插入差异数据\ninsert into ota_order select * from ota_order_bak a where not exists (select 1 from ota_order b where a.id = b.id);\n#5. ota_order_bak改造成分区表，如果表比较大不建议直接改造，可以先创建好分区表，通过dataX把导入进去即可。\n\n#6. 后续的归档方法\n#创建中间普遍表\ncreate table ota_order_mid like ota_order;\n#交换原表无效数据分区到普通表\nalter table ota_order exchange partition p201808 with table ota_order_mid; \n##交换普通表数据到归档表的相应分区\nalter table ota_order_bak exchange partition p201808 with table ota_order_mid; \n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n<li>17</li>\n<li>18</li>\n<li>19</li>\n<li>20</li>\n<li>21</li>\n<li>22</li>\n<li>23</li>\n<li>24</li>\n<li>25</li>\n<li>26</li>\n<li>27</li>\n<li>28</li>\n<li>29</li>\n<li>30</li>\n<li>31</li>\n<li>32</li>\n<li>33</li>\n<li>34</li>\n<li>35</li>\n<li>36</li>\n<li>37</li>\n<li>38</li>\n</ul>\n<p>这样原表和归档表都是按月的分区表，只需要创建一个中间普通表，在业务低峰期做两次分区交换，既可以删除无效数据，又能回收空，而且没有空间碎片，不会影响表上的索引及SQL的执行计划。</p>\n<h2><a name=\"t20\"></a><a name=\"t20\"></a><a id=\"_514\"></a>总结</h2>\n<p>通过从InnoDB存储空间分布，delete对性能的影响可以看到，delete物理删除既不能释放磁盘空间，而且会产生大量的碎片，导致索引频繁分裂，影响SQL执行计划的稳定性；</p>\n<p>同时在碎片回收时，会耗用大量的CPU，磁盘空间，影响表上正常的DML操作。</p>\n<p>在业务代码层面，应该做逻辑标记删除，避免物理删除；为了实现数据归档需求，可以用采用MySQL分区表特性来实现，都是DDL操作，没有碎片产生。</p>\n<p>另外一个比较好的方案采用Clickhouse，对有生命周期的数据表可以使用Clickhouse存储，利用其TTL特性实现无效数据自动清理。</p>\n<p>&nbsp;</p>","blogGoods":0,"blogId":"1330877084339478528","blogRead":0,"blogRemark":"aaaaa","blogTitle":"","blogType":1,"createdTime":1606111997000,"version":1},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 22:13:29.886 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 22:14:25.784 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlBlogMapper.getById.debug:159 -==>  Preparing: select blog_id, blog_title, blog_content, blog_goods, blog_image, blog_read, blog_collection, blog_type, blog_remark, blog_comment, blog_source, created_time, version from bl_blog where blog_id = ? and deleted = 0 
2020-11-23 22:14:25.786 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlBlogMapper.getById.debug:159 -==> Parameters: 1330877084339478528(String)
2020-11-23 22:14:25.866 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlBlogMapper.getById.debug:159 -<==      Total: 1
2020-11-23 22:14:25.912 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 22:14:25.915 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/get/1330877084339478528(String), [1330877084339478528](String), 1(Integer), null, GET(String), 143(Long), {"code":20000,"data":{"blogCollection":0,"blogComment":0,"blogContent":"<h2>前言</h2>\n<p>我负责的有几个系统随着业务量的增长，存储在MySQL中的数据日益剧增，我当时就想现在的业务方不讲武德，搞偷袭，趁我没反应过来把很多表，很快，很快啊都打到了亿级别，我大意了，没有闪，这就导致跟其Join的表的SQL变得很慢，对的应用接口的response time也变长了，影响了用户体验。</p>\n<p>事后我找到业务方，我批评了他们跟他们说要讲武德，连忙跟我道歉，这个事情才就此作罢，走的时候我对他们说下次不要这样了，耗子尾汁，好好反思。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/3c93aececcb9e763f5476362c4e88710.png\" alt=\"\" /></p>\n<p>骂归骂，事情还是得解决，时候我分析原因发现，发现有些表的数据量增长很快，对应SQL扫描了很多无效数据，导致SQL慢了下来，通过确认之后，这些大表都是一些流水、记录、日志类型数据，只需要保留1到3个月，此时需要对表做数据清理实现瘦身，一般都会想到用insert + delete的方式去清理。</p>\n<p>这篇文章我会从InnoDB存储空间分布，delete对性能的影响，以及优化建议方面解释为什么不建议delete删除数据。</p>\n<h2><a name=\"t1\"></a><a name=\"t1\"></a><a id=\"InnoDB_16\"></a>InnoDB存储架构</h2>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/5c66ffe9749c58e1613d2519f7ea7211.png\" alt=\"\" /></p>\n<p>从这张图可以看到，InnoDB存储结构主要包括两部分：逻辑存储结构和物理存储结构。</p>\n<p>逻辑上是由表空间tablespace &mdash;&gt; 段segment或者inode &mdash;&gt; 区Extent &mdash;&mdash;&gt;数据页Page构成，Innodb逻辑管理单位是segment，空间分配的最小单位是extent，每个segment都会从表空间FREE_PAGE中分配32个page，当这32个page不够用时，会按照以下原则进行扩展：如果当前小于1个extent，则扩展到1个extent；当表空间小于32MB时，每次扩展一个extent；表空间大于32MB，每次扩展4个extent。</p>\n<p>物理上主要由系统用户数据文件，日志文件组成，数据文件主要存储MySQL字典数据和用户数据，日志文件记录的是data page的变更记录，用于MySQL Crash时的恢复。</p>\n<h2><a name=\"t2\"></a><a name=\"t2\"></a><a id=\"Innodb_26\"></a>Innodb表空间</h2>\n<p>InnoDB存储包括三类表空间：系统表空间，用户表空间，Undo表空间。</p>\n<p><strong>系统表空间：</strong>&nbsp;主要存储MySQL内部的数据字典数据，如information_schema下的数据。</p>\n<p><strong>用户表空间：</strong>&nbsp;当开启innodb_file_per_table=1时，数据表从系统表空间独立出来存储在以table_name.ibd命令的数据文件中，结构信息存储在table_name.frm文件中。</p>\n<p><strong>Undo表空间：</strong>&nbsp;存储Undo信息，如快照一致读和flashback都是利用undo信息。</p>\n<p>从MySQL 8.0开始允许用户自定义表空间，具体语法如下：</p>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">CREATE TABLESPACE tablespace_name\n    ADD DATAFILE 'file_name'               #数据文件名\n    USE LOGFILE GROUP logfile_group        #自定义日志文件组，一般每组2个logfile。\n    [EXTENT_SIZE [=] extent_size]          #区大小\n    [INITIAL_SIZE [=] initial_size]        #初始化大小 \n    [AUTOEXTEND_SIZE [=] autoextend_size]  #自动扩宽尺寸\n    [MAX_SIZE [=] max_size]                #单个文件最大size，最大是32G。\n    [NODEGROUP [=] nodegroup_id]           #节点组\n    [WAIT]\n    [COMMENT [=] comment_text]\n    ENGINE [=] engine_name\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n</ul>\n<p>这样的好处是可以做到数据的冷热分离，分别用HDD和SSD来存储，既能实现数据的高效访问，又能节约成本，比如可以添加两块500G硬盘，经过创建卷组vg，划分逻辑卷lv，创建数据目录并mount相应的lv，假设划分的两个目录分别是/hot_data 和 /cold_data。</p>\n<p>这样就可以将核心的业务表如用户表，订单表存储在高性能SSD盘上，一些日志，流水表存储在普通的HDD上，主要的操作步骤如下：</p>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">#创建热数据表空间\ncreate tablespace tbs_data_hot add datafile '/hot_data/tbs_data_hot01.dbf' max_size 20G;\n#创建核心业务表存储在热数据表空间\ncreate table booking(id bigint not null primary key auto_increment, &hellip;&hellip; ) tablespace tbs_data_hot;\n#创建冷数据表空间\ncreate tablespace tbs_data_cold add datafile '/hot_data/tbs_data_cold01.dbf' max_size 20G;\n#创建日志，流水，备份类的表存储在冷数据表空间\ncreate table payment_log(id bigint not null primary key auto_increment, &hellip;&hellip; ) tablespace tbs_data_cold;\n#可以移动表到另一个表空间\nalter table payment_log tablespace tbs_data_hot;\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n</ul>\n<h2><a name=\"t3\"></a><a name=\"t3\"></a><a id=\"Inndob_69\"></a>Inndob存储分布</h2>\n<h3><a name=\"t4\"></a><a name=\"t4\"></a><a id=\"_71\"></a>创建空表查看空间变化</h3>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">mysql&gt; create table user(id bigint not null primary key auto_increment, \n    -&gt; name varchar(20) not null default '' comment '姓名', \n    -&gt; age tinyint not null default 0 comment 'age', \n    -&gt; gender char(1) not null default 'M'  comment '性别',\n    -&gt; phone varchar(16) not null default '' comment '手机号',\n    -&gt; create_time datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',\n    -&gt; update_time datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间'\n    -&gt; ) engine = InnoDB DEFAULT CHARSET=utf8mb4 COMMENT '用户信息表';\nQuery OK, 0 rows affected (0.26 sec)\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n</ul>\n<pre class=\"prettyprint\"><code class=\"prism language-bash has-numbering\"><span class=\"token comment\"># ls -lh user1.ibd </span>\n-rw-r----- 1 mysql mysql 96K Nov  6 12:48 user.ibd\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n</ul>\n<p>设置参数innodb_file_per_table=1时，创建表时会自动创建一个segment，同时分配一个extent，包含32个data page的来存储数据，这样创建的空表默认大小就是96KB，extent使用完之后会申请64个连接页，这样对于一些小表，或者undo segment，可以在开始时申请较少的空间，节省磁盘容量的开销。</p>\n<pre class=\"prettyprint\"><code class=\"prism language-shell has-numbering\"><span class=\"token comment\"># python2 py_innodb_page_info.py -v /data2/mysql/test/user.ibd</span>\npage offset 00000000, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>File Space Header<span class=\"token operator\">&gt;</span>\npage offset 00000001, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>Insert Buffer Bitmap<span class=\"token operator\">&gt;</span>\npage offset 00000002, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>File Segment inode<span class=\"token operator\">&gt;</span>\npage offset 00000003, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>B-tree Node<span class=\"token operator\">&gt;</span>, page level <span class=\"token operator\">&lt;</span>0000<span class=\"token operator\">&gt;</span>\npage offset 00000000, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>Freshly Allocated Page<span class=\"token operator\">&gt;</span>\npage offset 00000000, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>Freshly Allocated Page<span class=\"token operator\">&gt;</span>\nTotal number of page: 6:      <span class=\"token comment\">#总共分配的页数</span>\nFreshly Allocated Page: 2     <span class=\"token comment\">#可用的数据页</span>\nInsert Buffer Bitmap: 1       <span class=\"token comment\">#插入缓冲页</span>\nFile Space Header: 1          <span class=\"token comment\">#文件空间头</span>\nB-tree Node: 1                <span class=\"token comment\">#数据页</span>\nFile Segment inode: 1         <span class=\"token comment\">#文件端inonde，如果是在ibdata1.ibd上会有多个inode。</span>\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n</ul>\n<h3><a name=\"t5\"></a><a name=\"t5\"></a><a id=\"_108\"></a>插入数据后的空间变化</h3>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">mysql&gt; DELIMITER $$\nmysql&gt; CREATE PROCEDURE insert_user_data(num INTEGER) \n    -&gt; BEGIN\n    -&gt;     DECLARE v_i int unsigned DEFAULT 0;\n    -&gt; set autocommit= 0;\n    -&gt; WHILE v_i &lt; num DO\n    -&gt;    insert into user(`name`, age, gender, phone) values (CONCAT('lyn',v_i), mod(v_i,120), 'M', CONCAT('152',ROUND(RAND(1)*100000000)));\n    -&gt;  SET v_i = v_i+1;\n    -&gt; END WHILE;\n    -&gt; commit;\n    -&gt; END $$\nQuery OK, 0 rows affected (0.01 sec)\nmysql&gt; DELIMITER ;\n\n#插入10w数据\nmysql&gt; call insert_user_data(100000);\nQuery OK, 0 rows affected (6.69 sec)\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n<li>17</li>\n</ul>\n<pre class=\"prettyprint\"><code class=\"prism language-shell has-numbering\"><span class=\"token comment\"># ls -lh user.ibd</span>\n-rw-r----- 1 mysql mysql 14M Nov 6 10:58 /data2/mysql/test/user.ibd\n\n<span class=\"token comment\"># python2 py_innodb_page_info.py -v /data2/mysql/test/user.ibd</span>\npage offset 00000000, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>File Space Header<span class=\"token operator\">&gt;</span>\npage offset 00000001, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>Insert Buffer Bitmap<span class=\"token operator\">&gt;</span>\npage offset 00000002, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>File Segment inode<span class=\"token operator\">&gt;</span>\npage offset 00000003, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>B-tree Node<span class=\"token operator\">&gt;</span>, page level <span class=\"token operator\">&lt;</span>0001<span class=\"token operator\">&gt;</span>   <span class=\"token comment\">#增加了一个非叶子节点，树的高度从1变为2.</span>\n<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>\npage offset 00000000, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>Freshly Allocated Page<span class=\"token operator\">&gt;</span>\nTotal number of page: 896:\nFreshly Allocated Page: 493\nInsert Buffer Bitmap: 1\nFile Space Header: 1\nB-tree Node: 400\nFile Segment inode: 1\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n</ul>\n<h3><a name=\"t6\"></a><a name=\"t6\"></a><a id=\"delete_149\"></a>delete数据后的空间变化</h3>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">mysql&gt; select min(id),max(id),count(*) from user;\n+---------+---------+----------+\n| min(id) | max(id) | count(*) |\n+---------+---------+----------+\n|       1 |  100000 |   100000 |\n+---------+---------+----------+\n1 row in set (0.05 sec)\n#删除50000条数据，理论上空间应该从14MB变长7MB左右。\nmysql&gt; delete from user limit 50000;\nQuery OK, 50000 rows affected (0.25 sec)\n\n#数据文件大小依然是14MB，没有缩小。\n# ls -lh /data2/mysql/test/user1.ibd \n-rw-r----- 1 mysql mysql 14M Nov  6 13:22 /data2/mysql/test/user.ibd\n\n#数据页没有被回收。\n# python2 py_innodb_page_info.py -v /data2/mysql/test/user.ibd\npage offset 00000000, page type &lt;File Space Header&gt;\npage offset 00000001, page type &lt;Insert Buffer Bitmap&gt;\npage offset 00000002, page type &lt;File Segment inode&gt;\npage offset 00000003, page type &lt;B-tree Node&gt;, page level &lt;0001&gt;\n........................................................\npage offset 00000000, page type &lt;Freshly Allocated Page&gt;\nTotal number of page: 896:\nFreshly Allocated Page: 493\nInsert Buffer Bitmap: 1\nFile Space Header: 1\nB-tree Node: 400\nFile Segment inode: 1\n#在MySQL内部是标记删除，\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n<li>17</li>\n<li>18</li>\n<li>19</li>\n<li>20</li>\n<li>21</li>\n<li>22</li>\n<li>23</li>\n<li>24</li>\n<li>25</li>\n<li>26</li>\n<li>27</li>\n<li>28</li>\n<li>29</li>\n<li>30</li>\n</ul>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">mysql&gt; use information_schema;\n\nDatabase changed\nmysql&gt; SELECT A.SPACE AS TBL_SPACEID, A.TABLE_ID, A.NAME AS TABLE_NAME, FILE_FORMAT, ROW_FORMAT, SPACE_TYPE,  B.INDEX_ID , B.NAME AS INDEX_NAME, PAGE_NO, B.TYPE AS INDEX_TYPE FROM INNODB_SYS_TABLES A LEFT JOIN INNODB_SYS_INDEXES B ON A.TABLE_ID =B.TABLE_ID WHERE A.NAME = 'test/user1';\n+-------------+----------+------------+-------------+------------+------------+----------+------------+---------+------------+\n| TBL_SPACEID | TABLE_ID | TABLE_NAME | FILE_FORMAT | ROW_FORMAT | SPACE_TYPE | INDEX_ID | INDEX_NAME | PAGE_NO | INDEX_TYPE |\n+-------------+----------+------------+-------------+------------+------------+----------+------------+---------+------------+\n|        1283 |     1207 | test/user | Barracuda   | Dynamic    | Single     |     2236 | PRIMARY    |       3 |          3 |\n+-------------+----------+------------+-------------+------------+------------+----------+------------+---------+------------+\n1 row in set (0.01 sec)\n\nPAGE_NO = 3 标识B-tree的root page是3号页，INDEX_TYPE = 3是聚集索引。 INDEX_TYPE取值如下：\n0 = nonunique secondary index; \n1 = automatically generated clustered index (GEN_CLUST_INDEX); \n2 = unique nonclustered index; \n3 = clustered index; \n32 = full-text index;\n#收缩空间再后进行观察\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n<li>17</li>\n<li>18</li>\n</ul>\n<p>MySQL内部不会真正删除空间，而且做标记删除，即将delflag:N修改为delflag:Y，commit之后会会被purge进入删除链表，如果下一次insert更大的记录，delete之后的空间不会被重用，如果插入的记录小于等于delete的记录空会被重用，这块内容可以通过知数堂的innblock工具进行分析。</p>\n<h2><a name=\"t7\"></a><a name=\"t7\"></a><a id=\"Innodb_207\"></a>Innodb中的碎片</h2>\n<h3><a name=\"t8\"></a><a name=\"t8\"></a><a id=\"_209\"></a>碎片的产生</h3>\n<p>我们知道数据存储在文件系统上的，总是不能100%利用分配给它的物理空间，删除数据会在页面上留下一些&rdquo;空洞&rdquo;，或者随机写入（聚集索引非线性增加）会导致页分裂，页分裂导致页面的利用空间少于50%，另外对表进行增删改会引起对应的二级索引值的随机的增删改，也会导致索引结构中的数据页面上留下一些\"空洞\"，虽然这些空洞有可能会被重复利用，但终究会导致部分物理空间未被使用，也就是碎片。</p>\n<p>同时，即便是设置了填充因子为100%，Innodb也会主动留下page页面1/16的空间作为预留使用（An innodb_fill_factor setting of 100 leaves 1/16 of the space in clustered index pages free for future index growth）防止update带来的行溢出。</p>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">mysql&gt; select table_schema,\n    -&gt;        table_name,ENGINE,\n    -&gt;        round(DATA_LENGTH/1024/1024+ INDEX_LENGTH/1024/1024) total_mb,TABLE_ROWS,\n    -&gt;        round(DATA_LENGTH/1024/1024) data_mb, round(INDEX_LENGTH/1024/1024) index_mb, round(DATA_FREE/1024/1024) free_mb, round(DATA_FREE/DATA_LENGTH*100,2) free_ratio\n    -&gt; from information_schema.TABLES where  TABLE_SCHEMA= 'test'\n    -&gt; and TABLE_NAME= 'user';\n+--------------+------------+--------+----------+------------+---------+----------+---------+------------+\n| table_schema | table_name | ENGINE | total_mb | TABLE_ROWS | data_mb | index_mb | free_mb | free_ratio |\n+--------------+------------+--------+----------+------------+---------+----------+---------+------------+\n| test         | user      | InnoDB |        4 |      50000 |       4 |        0 |       6 |     149.42 |\n+--------------+------------+--------+----------+------------+---------+----------+---------+------------+\n1 row in set (0.00 sec)\n\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n</ul>\n<p>其中data_free是分配了未使用的字节数，并不能说明完全是碎片空间。</p>\n<h3><a name=\"t9\"></a><a name=\"t9\"></a><a id=\"_233\"></a>碎片的回收</h3>\n<p>对于InnoDB的表，可以通过以下命令来回收碎片，释放空间，这个是随机读IO操作，会比较耗时，也会阻塞表上正常的DML运行，同时需要占用额外更多的磁盘空间，对于RDS来说，可能会导致磁盘空间瞬间爆满，实例瞬间被锁定，应用无法做DML操作，所以禁止在线上环境去执行。</p>\n<pre class=\"prettyprint\"><code class=\"prism language-shell has-numbering\"><span class=\"token comment\">#执行InnoDB的碎片回收</span>\nmysql<span class=\"token operator\">&gt;</span> alter table user engine<span class=\"token operator\">=</span>InnoDB<span class=\"token punctuation\">;</span>\nQuery OK, 0 rows affected <span class=\"token punctuation\">(</span>9.00 sec<span class=\"token punctuation\">)</span>\nRecords: 0  Duplicates: 0  Warnings: 0\n\n<span class=\"token comment\">##执行完之后，数据文件大小从14MB降低到10M。</span>\n<span class=\"token comment\"># ls -lh /data2/mysql/test/user1.ibd </span>\n-rw-r----- 1 mysql mysql 10M Nov 6 16:18 /data2/mysql/test/user.ibd\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n</ul>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">mysql&gt; select table_schema,        table_name,ENGINE,        round(DATA_LENGTH/1024/1024+ INDEX_LENGTH/1024/1024) total_mb,TABLE_ROWS,        round(DATA_LENGTH/1024/1024) data_mb, round(INDEX_LENGTH/1024/1024) index_mb, round(DATA_FREE/1024/1024) free_mb, round(DATA_FREE/DATA_LENGTH*100,2) free_ratio from information_schema.TABLES where  TABLE_SCHEMA= 'test' and TABLE_NAME= 'user';\n+--------------+------------+--------+----------+------------+---------+----------+---------+------------+\n| table_schema | table_name | ENGINE | total_mb | TABLE_ROWS | data_mb | index_mb | free_mb | free_ratio |\n+--------------+------------+--------+----------+------------+---------+----------+---------+------------+\n| test         | user      | InnoDB |        5 |      50000 |       5 |        0 |       2 |      44.29 |\n+--------------+------------+--------+----------+------------+---------+----------+---------+------------+\n1 row in set (0.00 sec)\n\n\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n</ul>\n<h2><a name=\"t10\"></a><a name=\"t10\"></a><a id=\"deleteSQL_260\"></a>delete对SQL的影响</h2>\n<h3><a name=\"t11\"></a><a name=\"t11\"></a><a id=\"SQL_262\"></a>未删除前的SQL执行情况</h3>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">#插入100W数据\nmysql&gt; call insert_user_data(1000000);\nQuery OK, 0 rows affected (35.99 sec)\n\n#添加相关索引\nmysql&gt; alter table user add index idx_name(name), add index idx_phone(phone);\nQuery OK, 0 rows affected (6.00 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\n#表上索引统计信息\nmysql&gt; show index from user;\n+-------+------------+-----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+\n| Table | Non_unique | Key_name  | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment |\n+-------+------------+-----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+\n| user  |          0 | PRIMARY   |            1 | id          | A         |      996757 |     NULL | NULL   |      | BTREE      |         |               |\n| user  |          1 | idx_name  |            1 | name        | A         |      996757 |     NULL | NULL   |      | BTREE      |         |               |\n| user  |          1 | idx_phone |            1 | phone       | A         |           2 |     NULL | NULL   |      | BTREE      |         |               |\n+-------+------------+-----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+\n3 rows in set (0.00 sec)\n\n#重置状态变量计数\nmysql&gt; flush status;\nQuery OK, 0 rows affected (0.00 sec)\n\n#执行SQL语句\nmysql&gt; select id, age ,phone from user where name like 'lyn12%';\n+--------+-----+-------------+\n| id     | age | phone       |\n+--------+-----+-------------+\n|    124 |   3 | 15240540354 |\n|   1231 |  30 | 15240540354 |\n|  12301 |  60 | 15240540354 |\n.............................\n| 129998 |  37 | 15240540354 |\n| 129999 |  38 | 15240540354 |\n| 130000 |  39 | 15240540354 |\n+--------+-----+-------------+\n11111 rows in set (0.03 sec)\n\nmysql&gt; explain select id, age ,phone from user where name like 'lyn12%';\n+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+\n| id | select_type | table | type  | possible_keys | key      | key_len | ref  | rows  | Extra                 |\n+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+\n|  1 | SIMPLE      | user  | range | idx_name      | idx_name | 82      | NULL | 22226 | Using index condition |\n+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+\n1 row in set (0.00 sec)\n\n#查看相关状态呢变量\nmysql&gt; select * from information_schema.session_status where variable_name in('Last_query_cost','Handler_read_next','Innodb_pages_read','Innodb_data_reads','Innodb_pages_read');\n+-------------------+----------------+\n| VARIABLE_NAME     | VARIABLE_VALUE |\n+-------------------+----------------+\n| HANDLER_READ_NEXT | 11111          |    #请求读的行数\n| INNODB_DATA_READS | 7868409        |    #数据物理读的总数\n| INNODB_PAGES_READ | 7855239        |    #逻辑读的总数\n| LAST_QUERY_COST   | 10.499000      |    #SQL语句的成本COST，主要包括IO_COST和CPU_COST。\n+-------------------+----------------+\n4 rows in set (0.00 sec)\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n<li>17</li>\n<li>18</li>\n<li>19</li>\n<li>20</li>\n<li>21</li>\n<li>22</li>\n<li>23</li>\n<li>24</li>\n<li>25</li>\n<li>26</li>\n<li>27</li>\n<li>28</li>\n<li>29</li>\n<li>30</li>\n<li>31</li>\n<li>32</li>\n<li>33</li>\n<li>34</li>\n<li>35</li>\n<li>36</li>\n<li>37</li>\n<li>38</li>\n<li>39</li>\n<li>40</li>\n<li>41</li>\n<li>42</li>\n<li>43</li>\n<li>44</li>\n<li>45</li>\n<li>46</li>\n<li>47</li>\n<li>48</li>\n<li>49</li>\n<li>50</li>\n<li>51</li>\n<li>52</li>\n<li>53</li>\n<li>54</li>\n<li>55</li>\n<li>56</li>\n<li>57</li>\n<li>58</li>\n</ul>\n<h3><a name=\"t12\"></a><a name=\"t12\"></a><a id=\"SQL_325\"></a>删除后的SQL执行情况</h3>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">#删除50w数据\nmysql&gt; delete from user limit 500000;\nQuery OK, 500000 rows affected (3.70 sec)\n\n#分析表统计信息\nmysql&gt; analyze table user;\n+-----------+---------+----------+----------+\n| Table     | Op      | Msg_type | Msg_text |\n+-----------+---------+----------+----------+\n| test.user | analyze | status   | OK       |\n+-----------+---------+----------+----------+\n1 row in set (0.01 sec)\n\n#重置状态变量计数\nmysql&gt; flush status;\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql&gt; select id, age ,phone from user where name like 'lyn12%';\nEmpty set (0.05 sec)\n\nmysql&gt; explain select id, age ,phone from user where name like 'lyn12%';\n+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+\n| id | select_type | table | type  | possible_keys | key      | key_len | ref  | rows  | Extra                 |\n+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+\n|  1 | SIMPLE      | user  | range | idx_name      | idx_name | 82      | NULL | 22226 | Using index condition |\n+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+\n1 row in set (0.00 sec)\n\nmysql&gt; select * from information_schema.session_status where variable_name in('Last_query_cost','Handler_read_next','Innodb_pages_read','Innodb_data_reads','Innodb_pages_read');\n+-------------------+----------------+\n| VARIABLE_NAME     | VARIABLE_VALUE |\n+-------------------+----------------+\n| HANDLER_READ_NEXT | 0              |\n| INNODB_DATA_READS | 7868409        |\n| INNODB_PAGES_READ | 7855239        |\n| LAST_QUERY_COST   | 10.499000      |\n+-------------------+----------------+\n4 rows in set (0.00 sec)\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n<li>17</li>\n<li>18</li>\n<li>19</li>\n<li>20</li>\n<li>21</li>\n<li>22</li>\n<li>23</li>\n<li>24</li>\n<li>25</li>\n<li>26</li>\n<li>27</li>\n<li>28</li>\n<li>29</li>\n<li>30</li>\n<li>31</li>\n<li>32</li>\n<li>33</li>\n<li>34</li>\n<li>35</li>\n<li>36</li>\n<li>37</li>\n<li>38</li>\n</ul>\n<h3><a name=\"t13\"></a><a name=\"t13\"></a><a id=\"_368\"></a>结果统计分析</h3>\n<div class=\"table-box\">\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>COST</th>\n<th>物理读次数</th>\n<th>逻辑读次数</th>\n<th>扫描行数</th>\n<th>返回行数</th>\n<th>执行时间</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>初始化插入100W</td>\n<td>10.499000</td>\n<td>7868409</td>\n<td>7855239</td>\n<td>22226</td>\n<td>11111</td>\n<td>30ms</td>\n</tr>\n<tr>\n<td>100W随机删除50W</td>\n<td>10.499000</td>\n<td>7868409</td>\n<td>7855239</td>\n<td>22226</td>\n<td>0</td>\n<td>50ms</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>这也说明对普通的大表，想要通过delete数据来对表进行瘦身是不现实的，所以在任何时候不要用delete去删除数据，应该使用优雅的标记删除。</p>\n<h2><a name=\"t14\"></a><a name=\"t14\"></a><a id=\"delete_377\"></a>delete优化建议</h2>\n<h3><a name=\"t15\"></a><a name=\"t15\"></a><a id=\"_379\"></a>控制业务账号权限</h3>\n<p>对于一个大的系统来说，需要根据业务特点去拆分子系统，每个子系统可以看做是一个service，例如美团APP，上面有很多服务，核心的服务有用户服务user-service，搜索服务search-service，商品product-service，位置服务location-service，价格服务price-service等。每个服务对应一个数据库，为该数据库创建单独账号，同时只授予DML权限且没有delete权限，同时禁止跨库访问。</p>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">#创建用户数据库并授权\ncreate database mt_user charset utf8mb4;\ngrant USAGE, SELECT, INSERT, UPDATE ON mt_user.*  to 'w_user'@'%' identified by 't$W*g@gaHTGi123456';\nflush privileges;\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n</ul>\n<h3><a name=\"t16\"></a><a name=\"t16\"></a><a id=\"delete_390\"></a>delete改为标记删除</h3>\n<p>在MySQL数据库建模规范中有4个公共字段，基本上每个表必须有的，同时在create_time列要创建索引，有两方面的好处：</p>\n<ol>\n<li>一些查询业务场景都会有一个默认的时间段，比如7天或者一个月，都是通过create_time去过滤，走索引扫描更快。</li>\n<li>一些核心的业务表需要以T +1的方式抽取数据仓库中，比如每天晚上00:30抽取前一天的数据，都是通过create_time过滤的。</li>\n</ol>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">`id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '主键id',\n`is_deleted` tinyint(4) NOT NULL DEFAULT '0' COMMENT '是否逻辑删除：0：未删除，1：已删除',\n`create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',\n`update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间'\n\n#有了删除标记，业务接口的delete操作就可以转换为update\nupdate user set is_deleted = 1 where user_id = 1213;\n\n#查询的时候需要带上is_deleted过滤\nselect id, age ,phone from user where is_deleted = 0 and name like 'lyn12%';\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n</ul>\n<h2><a name=\"t17\"></a><a name=\"t17\"></a><a id=\"_410\"></a>数据归档方式</h2>\n<h3><a name=\"t18\"></a><a name=\"t18\"></a><a id=\"_412\"></a>通用数据归档方法</h3>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">#1. 创建归档表，一般在原表名后面添加_bak。\nCREATE TABLE `ota_order_bak` (\n  `id` bigint(11) NOT NULL AUTO_INCREMENT COMMENT '主键',\n  `order_id` varchar(255) DEFAULT NULL COMMENT '订单id',\n  `ota_id` varchar(255) DEFAULT NULL COMMENT 'ota',\n  `check_in_date` varchar(255) DEFAULT NULL COMMENT '入住日期',\n  `check_out_date` varchar(255) DEFAULT NULL COMMENT '离店日期',\n  `hotel_id` varchar(255) DEFAULT NULL COMMENT '酒店ID',\n  `guest_name` varchar(255) DEFAULT NULL COMMENT '顾客',\n  `purcharse_time` timestamp NULL DEFAULT NULL COMMENT '购买时间',\n  `create_time` datetime DEFAULT NULL,\n  `update_time` datetime DEFAULT NULL,\n  `create_user` varchar(255) DEFAULT NULL,\n  `update_user` varchar(255) DEFAULT NULL,\n  `status` int(4) DEFAULT '1' COMMENT '状态 ： 1 正常 ， 0 删除',\n  `hotel_name` varchar(255) DEFAULT NULL,\n  `price` decimal(10,0) DEFAULT NULL,\n  `remark` longtext,\n  PRIMARY KEY (`id`),\n  KEY `IDX_order_id` (`order_id`) USING BTREE,\n  KEY `hotel_name` (`hotel_name`) USING BTREE,\n  KEY `ota_id` (`ota_id`) USING BTREE,\n  KEY `IDX_purcharse_time` (`purcharse_time`) USING BTREE,\n  KEY `IDX_create_time` (`create_time`) USING BTREE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\nPARTITION BY RANGE (to_days(create_time)) ( \nPARTITION p201808 VALUES LESS THAN (to_days('2018-09-01')), \nPARTITION p201809 VALUES LESS THAN (to_days('2018-10-01')), \nPARTITION p201810 VALUES LESS THAN (to_days('2018-11-01')), \nPARTITION p201811 VALUES LESS THAN (to_days('2018-12-01')), \nPARTITION p201812 VALUES LESS THAN (to_days('2019-01-01')), \nPARTITION p201901 VALUES LESS THAN (to_days('2019-02-01')), \nPARTITION p201902 VALUES LESS THAN (to_days('2019-03-01')), \nPARTITION p201903 VALUES LESS THAN (to_days('2019-04-01')), \nPARTITION p201904 VALUES LESS THAN (to_days('2019-05-01')), \nPARTITION p201905 VALUES LESS THAN (to_days('2019-06-01')), \nPARTITION p201906 VALUES LESS THAN (to_days('2019-07-01')), \nPARTITION p201907 VALUES LESS THAN (to_days('2019-08-01')), \nPARTITION p201908 VALUES LESS THAN (to_days('2019-09-01')), \nPARTITION p201909 VALUES LESS THAN (to_days('2019-10-01')), \nPARTITION p201910 VALUES LESS THAN (to_days('2019-11-01')), \nPARTITION p201911 VALUES LESS THAN (to_days('2019-12-01')), \nPARTITION p201912 VALUES LESS THAN (to_days('2020-01-01')));\n\n#2. 插入原表中无效的数据（需要跟开发同学确认数据保留范围）\ncreate table tbl_p201808 as select * from ota_order where create_time between '2018-08-01 00:00:00' and '2018-08-31 23:59:59';\n\n#3. 跟归档表分区做分区交换\nalter table ota_order_bak exchange partition p201808 with table tbl_p201808; \n\n#4. 删除原表中已经规范的数据\ndelete from ota_order where create_time between '2018-08-01 00:00:00' and '2018-08-31 23:59:59' limit 3000;\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n<li>17</li>\n<li>18</li>\n<li>19</li>\n<li>20</li>\n<li>21</li>\n<li>22</li>\n<li>23</li>\n<li>24</li>\n<li>25</li>\n<li>26</li>\n<li>27</li>\n<li>28</li>\n<li>29</li>\n<li>30</li>\n<li>31</li>\n<li>32</li>\n<li>33</li>\n<li>34</li>\n<li>35</li>\n<li>36</li>\n<li>37</li>\n<li>38</li>\n<li>39</li>\n<li>40</li>\n<li>41</li>\n<li>42</li>\n<li>43</li>\n<li>44</li>\n<li>45</li>\n<li>46</li>\n<li>47</li>\n<li>48</li>\n<li>49</li>\n<li>50</li>\n<li>51</li>\n<li>52</li>\n</ul>\n<h3><a name=\"t19\"></a><a name=\"t19\"></a><a id=\"_469\"></a>优化后的归档方式</h3>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">#1. 创建中间表\nCREATE TABLE `ota_order_2020` (........) ENGINE=InnoDB DEFAULT CHARSET=utf8\nPARTITION BY RANGE (to_days(create_time)) ( \nPARTITION p201808 VALUES LESS THAN (to_days('2018-09-01')), \nPARTITION p201809 VALUES LESS THAN (to_days('2018-10-01')), \nPARTITION p201810 VALUES LESS THAN (to_days('2018-11-01')), \nPARTITION p201811 VALUES LESS THAN (to_days('2018-12-01')), \nPARTITION p201812 VALUES LESS THAN (to_days('2019-01-01')), \nPARTITION p201901 VALUES LESS THAN (to_days('2019-02-01')), \nPARTITION p201902 VALUES LESS THAN (to_days('2019-03-01')), \nPARTITION p201903 VALUES LESS THAN (to_days('2019-04-01')), \nPARTITION p201904 VALUES LESS THAN (to_days('2019-05-01')), \nPARTITION p201905 VALUES LESS THAN (to_days('2019-06-01')), \nPARTITION p201906 VALUES LESS THAN (to_days('2019-07-01')), \nPARTITION p201907 VALUES LESS THAN (to_days('2019-08-01')), \nPARTITION p201908 VALUES LESS THAN (to_days('2019-09-01')), \nPARTITION p201909 VALUES LESS THAN (to_days('2019-10-01')), \nPARTITION p201910 VALUES LESS THAN (to_days('2019-11-01')), \nPARTITION p201911 VALUES LESS THAN (to_days('2019-12-01')), \nPARTITION p201912 VALUES LESS THAN (to_days('2020-01-01')));\n\n#2. 插入原表中有效的数据，如果数据量在100W左右可以在业务低峰期直接插入，如果比较大，建议采用dataX来做，可以控制频率和大小，之前我这边用Go封装了dataX可以实现自动生成json文件，自定义大小去执行。\ninsert into ota_order_2020 select * from ota_order where create_time between '2020-08-01 00:00:00' and '2020-08-31 23:59:59';\n\n#3. 表重命名\nalter table ota_order rename to ota_order_bak;  \nalter table ota_order_2020 rename to ota_order;\n#4. 插入差异数据\ninsert into ota_order select * from ota_order_bak a where not exists (select 1 from ota_order b where a.id = b.id);\n#5. ota_order_bak改造成分区表，如果表比较大不建议直接改造，可以先创建好分区表，通过dataX把导入进去即可。\n\n#6. 后续的归档方法\n#创建中间普遍表\ncreate table ota_order_mid like ota_order;\n#交换原表无效数据分区到普通表\nalter table ota_order exchange partition p201808 with table ota_order_mid; \n##交换普通表数据到归档表的相应分区\nalter table ota_order_bak exchange partition p201808 with table ota_order_mid; \n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n<li>17</li>\n<li>18</li>\n<li>19</li>\n<li>20</li>\n<li>21</li>\n<li>22</li>\n<li>23</li>\n<li>24</li>\n<li>25</li>\n<li>26</li>\n<li>27</li>\n<li>28</li>\n<li>29</li>\n<li>30</li>\n<li>31</li>\n<li>32</li>\n<li>33</li>\n<li>34</li>\n<li>35</li>\n<li>36</li>\n<li>37</li>\n<li>38</li>\n</ul>\n<p>这样原表和归档表都是按月的分区表，只需要创建一个中间普通表，在业务低峰期做两次分区交换，既可以删除无效数据，又能回收空，而且没有空间碎片，不会影响表上的索引及SQL的执行计划。</p>\n<h2><a name=\"t20\"></a><a name=\"t20\"></a><a id=\"_514\"></a>总结</h2>\n<p>通过从InnoDB存储空间分布，delete对性能的影响可以看到，delete物理删除既不能释放磁盘空间，而且会产生大量的碎片，导致索引频繁分裂，影响SQL执行计划的稳定性；</p>\n<p>同时在碎片回收时，会耗用大量的CPU，磁盘空间，影响表上正常的DML操作。</p>\n<p>在业务代码层面，应该做逻辑标记删除，避免物理删除；为了实现数据归档需求，可以用采用MySQL分区表特性来实现，都是DDL操作，没有碎片产生。</p>\n<p>另外一个比较好的方案采用Clickhouse，对有生命周期的数据表可以使用Clickhouse存储，利用其TTL特性实现无效数据自动清理。</p>\n<p>&nbsp;</p>","blogGoods":0,"blogId":"1330877084339478528","blogRead":0,"blogRemark":"aaaaa","blogTitle":"","blogType":1,"createdTime":1606111997000,"version":1},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 22:14:26.110 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 22:14:39.690 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlBlogMapper.getById.debug:159 -==>  Preparing: select blog_id, blog_title, blog_content, blog_goods, blog_image, blog_read, blog_collection, blog_type, blog_remark, blog_comment, blog_source, created_time, version from bl_blog where blog_id = ? and deleted = 0 
2020-11-23 22:14:39.691 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlBlogMapper.getById.debug:159 -==> Parameters: 1330877080455553024(String)
2020-11-23 22:14:39.766 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlBlogMapper.getById.debug:159 -<==      Total: 1
2020-11-23 22:14:39.808 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 22:14:39.810 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/get/1330877080455553024(String), [1330877080455553024](String), 1(Integer), null, GET(String), 123(Long), {"code":20000,"data":{"blogCollection":0,"blogComment":0,"blogContent":"<h2>前言</h2>\n<p>我负责的有几个系统随着业务量的增长，存储在MySQL中的数据日益剧增，我当时就想现在的业务方不讲武德，搞偷袭，趁我没反应过来把很多表，很快，很快啊都打到了亿级别，我大意了，没有闪，这就导致跟其Join的表的SQL变得很慢，对的应用接口的response time也变长了，影响了用户体验。</p>\n<p>事后我找到业务方，我批评了他们跟他们说要讲武德，连忙跟我道歉，这个事情才就此作罢，走的时候我对他们说下次不要这样了，耗子尾汁，好好反思。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/3c93aececcb9e763f5476362c4e88710.png\" alt=\"\" /></p>\n<p>骂归骂，事情还是得解决，时候我分析原因发现，发现有些表的数据量增长很快，对应SQL扫描了很多无效数据，导致SQL慢了下来，通过确认之后，这些大表都是一些流水、记录、日志类型数据，只需要保留1到3个月，此时需要对表做数据清理实现瘦身，一般都会想到用insert + delete的方式去清理。</p>\n<p>这篇文章我会从InnoDB存储空间分布，delete对性能的影响，以及优化建议方面解释为什么不建议delete删除数据。</p>\n<h2><a name=\"t1\"></a><a name=\"t1\"></a><a id=\"InnoDB_16\"></a>InnoDB存储架构</h2>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/5c66ffe9749c58e1613d2519f7ea7211.png\" alt=\"\" /></p>\n<p>从这张图可以看到，InnoDB存储结构主要包括两部分：逻辑存储结构和物理存储结构。</p>\n<p>逻辑上是由表空间tablespace &mdash;&gt; 段segment或者inode &mdash;&gt; 区Extent &mdash;&mdash;&gt;数据页Page构成，Innodb逻辑管理单位是segment，空间分配的最小单位是extent，每个segment都会从表空间FREE_PAGE中分配32个page，当这32个page不够用时，会按照以下原则进行扩展：如果当前小于1个extent，则扩展到1个extent；当表空间小于32MB时，每次扩展一个extent；表空间大于32MB，每次扩展4个extent。</p>\n<p>物理上主要由系统用户数据文件，日志文件组成，数据文件主要存储MySQL字典数据和用户数据，日志文件记录的是data page的变更记录，用于MySQL Crash时的恢复。</p>\n<h2><a name=\"t2\"></a><a name=\"t2\"></a><a id=\"Innodb_26\"></a>Innodb表空间</h2>\n<p>InnoDB存储包括三类表空间：系统表空间，用户表空间，Undo表空间。</p>\n<p><strong>系统表空间：</strong>&nbsp;主要存储MySQL内部的数据字典数据，如information_schema下的数据。</p>\n<p><strong>用户表空间：</strong>&nbsp;当开启innodb_file_per_table=1时，数据表从系统表空间独立出来存储在以table_name.ibd命令的数据文件中，结构信息存储在table_name.frm文件中。</p>\n<p><strong>Undo表空间：</strong>&nbsp;存储Undo信息，如快照一致读和flashback都是利用undo信息。</p>\n<p>从MySQL 8.0开始允许用户自定义表空间，具体语法如下：</p>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">CREATE TABLESPACE tablespace_name\n    ADD DATAFILE 'file_name'               #数据文件名\n    USE LOGFILE GROUP logfile_group        #自定义日志文件组，一般每组2个logfile。\n    [EXTENT_SIZE [=] extent_size]          #区大小\n    [INITIAL_SIZE [=] initial_size]        #初始化大小 \n    [AUTOEXTEND_SIZE [=] autoextend_size]  #自动扩宽尺寸\n    [MAX_SIZE [=] max_size]                #单个文件最大size，最大是32G。\n    [NODEGROUP [=] nodegroup_id]           #节点组\n    [WAIT]\n    [COMMENT [=] comment_text]\n    ENGINE [=] engine_name\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n</ul>\n<p>这样的好处是可以做到数据的冷热分离，分别用HDD和SSD来存储，既能实现数据的高效访问，又能节约成本，比如可以添加两块500G硬盘，经过创建卷组vg，划分逻辑卷lv，创建数据目录并mount相应的lv，假设划分的两个目录分别是/hot_data 和 /cold_data。</p>\n<p>这样就可以将核心的业务表如用户表，订单表存储在高性能SSD盘上，一些日志，流水表存储在普通的HDD上，主要的操作步骤如下：</p>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">#创建热数据表空间\ncreate tablespace tbs_data_hot add datafile '/hot_data/tbs_data_hot01.dbf' max_size 20G;\n#创建核心业务表存储在热数据表空间\ncreate table booking(id bigint not null primary key auto_increment, &hellip;&hellip; ) tablespace tbs_data_hot;\n#创建冷数据表空间\ncreate tablespace tbs_data_cold add datafile '/hot_data/tbs_data_cold01.dbf' max_size 20G;\n#创建日志，流水，备份类的表存储在冷数据表空间\ncreate table payment_log(id bigint not null primary key auto_increment, &hellip;&hellip; ) tablespace tbs_data_cold;\n#可以移动表到另一个表空间\nalter table payment_log tablespace tbs_data_hot;\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n</ul>\n<h2><a name=\"t3\"></a><a name=\"t3\"></a><a id=\"Inndob_69\"></a>Inndob存储分布</h2>\n<h3><a name=\"t4\"></a><a name=\"t4\"></a><a id=\"_71\"></a>创建空表查看空间变化</h3>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">mysql&gt; create table user(id bigint not null primary key auto_increment, \n    -&gt; name varchar(20) not null default '' comment '姓名', \n    -&gt; age tinyint not null default 0 comment 'age', \n    -&gt; gender char(1) not null default 'M'  comment '性别',\n    -&gt; phone varchar(16) not null default '' comment '手机号',\n    -&gt; create_time datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',\n    -&gt; update_time datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间'\n    -&gt; ) engine = InnoDB DEFAULT CHARSET=utf8mb4 COMMENT '用户信息表';\nQuery OK, 0 rows affected (0.26 sec)\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n</ul>\n<pre class=\"prettyprint\"><code class=\"prism language-bash has-numbering\"><span class=\"token comment\"># ls -lh user1.ibd </span>\n-rw-r----- 1 mysql mysql 96K Nov  6 12:48 user.ibd\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n</ul>\n<p>设置参数innodb_file_per_table=1时，创建表时会自动创建一个segment，同时分配一个extent，包含32个data page的来存储数据，这样创建的空表默认大小就是96KB，extent使用完之后会申请64个连接页，这样对于一些小表，或者undo segment，可以在开始时申请较少的空间，节省磁盘容量的开销。</p>\n<pre class=\"prettyprint\"><code class=\"prism language-shell has-numbering\"><span class=\"token comment\"># python2 py_innodb_page_info.py -v /data2/mysql/test/user.ibd</span>\npage offset 00000000, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>File Space Header<span class=\"token operator\">&gt;</span>\npage offset 00000001, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>Insert Buffer Bitmap<span class=\"token operator\">&gt;</span>\npage offset 00000002, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>File Segment inode<span class=\"token operator\">&gt;</span>\npage offset 00000003, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>B-tree Node<span class=\"token operator\">&gt;</span>, page level <span class=\"token operator\">&lt;</span>0000<span class=\"token operator\">&gt;</span>\npage offset 00000000, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>Freshly Allocated Page<span class=\"token operator\">&gt;</span>\npage offset 00000000, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>Freshly Allocated Page<span class=\"token operator\">&gt;</span>\nTotal number of page: 6:      <span class=\"token comment\">#总共分配的页数</span>\nFreshly Allocated Page: 2     <span class=\"token comment\">#可用的数据页</span>\nInsert Buffer Bitmap: 1       <span class=\"token comment\">#插入缓冲页</span>\nFile Space Header: 1          <span class=\"token comment\">#文件空间头</span>\nB-tree Node: 1                <span class=\"token comment\">#数据页</span>\nFile Segment inode: 1         <span class=\"token comment\">#文件端inonde，如果是在ibdata1.ibd上会有多个inode。</span>\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n</ul>\n<h3><a name=\"t5\"></a><a name=\"t5\"></a><a id=\"_108\"></a>插入数据后的空间变化</h3>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">mysql&gt; DELIMITER $$\nmysql&gt; CREATE PROCEDURE insert_user_data(num INTEGER) \n    -&gt; BEGIN\n    -&gt;     DECLARE v_i int unsigned DEFAULT 0;\n    -&gt; set autocommit= 0;\n    -&gt; WHILE v_i &lt; num DO\n    -&gt;    insert into user(`name`, age, gender, phone) values (CONCAT('lyn',v_i), mod(v_i,120), 'M', CONCAT('152',ROUND(RAND(1)*100000000)));\n    -&gt;  SET v_i = v_i+1;\n    -&gt; END WHILE;\n    -&gt; commit;\n    -&gt; END $$\nQuery OK, 0 rows affected (0.01 sec)\nmysql&gt; DELIMITER ;\n\n#插入10w数据\nmysql&gt; call insert_user_data(100000);\nQuery OK, 0 rows affected (6.69 sec)\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n<li>17</li>\n</ul>\n<pre class=\"prettyprint\"><code class=\"prism language-shell has-numbering\"><span class=\"token comment\"># ls -lh user.ibd</span>\n-rw-r----- 1 mysql mysql 14M Nov 6 10:58 /data2/mysql/test/user.ibd\n\n<span class=\"token comment\"># python2 py_innodb_page_info.py -v /data2/mysql/test/user.ibd</span>\npage offset 00000000, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>File Space Header<span class=\"token operator\">&gt;</span>\npage offset 00000001, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>Insert Buffer Bitmap<span class=\"token operator\">&gt;</span>\npage offset 00000002, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>File Segment inode<span class=\"token operator\">&gt;</span>\npage offset 00000003, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>B-tree Node<span class=\"token operator\">&gt;</span>, page level <span class=\"token operator\">&lt;</span>0001<span class=\"token operator\">&gt;</span>   <span class=\"token comment\">#增加了一个非叶子节点，树的高度从1变为2.</span>\n<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>\npage offset 00000000, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>Freshly Allocated Page<span class=\"token operator\">&gt;</span>\nTotal number of page: 896:\nFreshly Allocated Page: 493\nInsert Buffer Bitmap: 1\nFile Space Header: 1\nB-tree Node: 400\nFile Segment inode: 1\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n</ul>\n<h3><a name=\"t6\"></a><a name=\"t6\"></a><a id=\"delete_149\"></a>delete数据后的空间变化</h3>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">mysql&gt; select min(id),max(id),count(*) from user;\n+---------+---------+----------+\n| min(id) | max(id) | count(*) |\n+---------+---------+----------+\n|       1 |  100000 |   100000 |\n+---------+---------+----------+\n1 row in set (0.05 sec)\n#删除50000条数据，理论上空间应该从14MB变长7MB左右。\nmysql&gt; delete from user limit 50000;\nQuery OK, 50000 rows affected (0.25 sec)\n\n#数据文件大小依然是14MB，没有缩小。\n# ls -lh /data2/mysql/test/user1.ibd \n-rw-r----- 1 mysql mysql 14M Nov  6 13:22 /data2/mysql/test/user.ibd\n\n#数据页没有被回收。\n# python2 py_innodb_page_info.py -v /data2/mysql/test/user.ibd\npage offset 00000000, page type &lt;File Space Header&gt;\npage offset 00000001, page type &lt;Insert Buffer Bitmap&gt;\npage offset 00000002, page type &lt;File Segment inode&gt;\npage offset 00000003, page type &lt;B-tree Node&gt;, page level &lt;0001&gt;\n........................................................\npage offset 00000000, page type &lt;Freshly Allocated Page&gt;\nTotal number of page: 896:\nFreshly Allocated Page: 493\nInsert Buffer Bitmap: 1\nFile Space Header: 1\nB-tree Node: 400\nFile Segment inode: 1\n#在MySQL内部是标记删除，\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n<li>17</li>\n<li>18</li>\n<li>19</li>\n<li>20</li>\n<li>21</li>\n<li>22</li>\n<li>23</li>\n<li>24</li>\n<li>25</li>\n<li>26</li>\n<li>27</li>\n<li>28</li>\n<li>29</li>\n<li>30</li>\n</ul>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">mysql&gt; use information_schema;\n\nDatabase changed\nmysql&gt; SELECT A.SPACE AS TBL_SPACEID, A.TABLE_ID, A.NAME AS TABLE_NAME, FILE_FORMAT, ROW_FORMAT, SPACE_TYPE,  B.INDEX_ID , B.NAME AS INDEX_NAME, PAGE_NO, B.TYPE AS INDEX_TYPE FROM INNODB_SYS_TABLES A LEFT JOIN INNODB_SYS_INDEXES B ON A.TABLE_ID =B.TABLE_ID WHERE A.NAME = 'test/user1';\n+-------------+----------+------------+-------------+------------+------------+----------+------------+---------+------------+\n| TBL_SPACEID | TABLE_ID | TABLE_NAME | FILE_FORMAT | ROW_FORMAT | SPACE_TYPE | INDEX_ID | INDEX_NAME | PAGE_NO | INDEX_TYPE |\n+-------------+----------+------------+-------------+------------+------------+----------+------------+---------+------------+\n|        1283 |     1207 | test/user | Barracuda   | Dynamic    | Single     |     2236 | PRIMARY    |       3 |          3 |\n+-------------+----------+------------+-------------+------------+------------+----------+------------+---------+------------+\n1 row in set (0.01 sec)\n\nPAGE_NO = 3 标识B-tree的root page是3号页，INDEX_TYPE = 3是聚集索引。 INDEX_TYPE取值如下：\n0 = nonunique secondary index; \n1 = automatically generated clustered index (GEN_CLUST_INDEX); \n2 = unique nonclustered index; \n3 = clustered index; \n32 = full-text index;\n#收缩空间再后进行观察\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n<li>17</li>\n<li>18</li>\n</ul>\n<p>MySQL内部不会真正删除空间，而且做标记删除，即将delflag:N修改为delflag:Y，commit之后会会被purge进入删除链表，如果下一次insert更大的记录，delete之后的空间不会被重用，如果插入的记录小于等于delete的记录空会被重用，这块内容可以通过知数堂的innblock工具进行分析。</p>\n<h2><a name=\"t7\"></a><a name=\"t7\"></a><a id=\"Innodb_207\"></a>Innodb中的碎片</h2>\n<h3><a name=\"t8\"></a><a name=\"t8\"></a><a id=\"_209\"></a>碎片的产生</h3>\n<p>我们知道数据存储在文件系统上的，总是不能100%利用分配给它的物理空间，删除数据会在页面上留下一些&rdquo;空洞&rdquo;，或者随机写入（聚集索引非线性增加）会导致页分裂，页分裂导致页面的利用空间少于50%，另外对表进行增删改会引起对应的二级索引值的随机的增删改，也会导致索引结构中的数据页面上留下一些\"空洞\"，虽然这些空洞有可能会被重复利用，但终究会导致部分物理空间未被使用，也就是碎片。</p>\n<p>同时，即便是设置了填充因子为100%，Innodb也会主动留下page页面1/16的空间作为预留使用（An innodb_fill_factor setting of 100 leaves 1/16 of the space in clustered index pages free for future index growth）防止update带来的行溢出。</p>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">mysql&gt; select table_schema,\n    -&gt;        table_name,ENGINE,\n    -&gt;        round(DATA_LENGTH/1024/1024+ INDEX_LENGTH/1024/1024) total_mb,TABLE_ROWS,\n    -&gt;        round(DATA_LENGTH/1024/1024) data_mb, round(INDEX_LENGTH/1024/1024) index_mb, round(DATA_FREE/1024/1024) free_mb, round(DATA_FREE/DATA_LENGTH*100,2) free_ratio\n    -&gt; from information_schema.TABLES where  TABLE_SCHEMA= 'test'\n    -&gt; and TABLE_NAME= 'user';\n+--------------+------------+--------+----------+------------+---------+----------+---------+------------+\n| table_schema | table_name | ENGINE | total_mb | TABLE_ROWS | data_mb | index_mb | free_mb | free_ratio |\n+--------------+------------+--------+----------+------------+---------+----------+---------+------------+\n| test         | user      | InnoDB |        4 |      50000 |       4 |        0 |       6 |     149.42 |\n+--------------+------------+--------+----------+------------+---------+----------+---------+------------+\n1 row in set (0.00 sec)\n\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n</ul>\n<p>其中data_free是分配了未使用的字节数，并不能说明完全是碎片空间。</p>\n<h3><a name=\"t9\"></a><a name=\"t9\"></a><a id=\"_233\"></a>碎片的回收</h3>\n<p>对于InnoDB的表，可以通过以下命令来回收碎片，释放空间，这个是随机读IO操作，会比较耗时，也会阻塞表上正常的DML运行，同时需要占用额外更多的磁盘空间，对于RDS来说，可能会导致磁盘空间瞬间爆满，实例瞬间被锁定，应用无法做DML操作，所以禁止在线上环境去执行。</p>\n<pre class=\"prettyprint\"><code class=\"prism language-shell has-numbering\"><span class=\"token comment\">#执行InnoDB的碎片回收</span>\nmysql<span class=\"token operator\">&gt;</span> alter table user engine<span class=\"token operator\">=</span>InnoDB<span class=\"token punctuation\">;</span>\nQuery OK, 0 rows affected <span class=\"token punctuation\">(</span>9.00 sec<span class=\"token punctuation\">)</span>\nRecords: 0  Duplicates: 0  Warnings: 0\n\n<span class=\"token comment\">##执行完之后，数据文件大小从14MB降低到10M。</span>\n<span class=\"token comment\"># ls -lh /data2/mysql/test/user1.ibd </span>\n-rw-r----- 1 mysql mysql 10M Nov 6 16:18 /data2/mysql/test/user.ibd\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n</ul>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">mysql&gt; select table_schema,        table_name,ENGINE,        round(DATA_LENGTH/1024/1024+ INDEX_LENGTH/1024/1024) total_mb,TABLE_ROWS,        round(DATA_LENGTH/1024/1024) data_mb, round(INDEX_LENGTH/1024/1024) index_mb, round(DATA_FREE/1024/1024) free_mb, round(DATA_FREE/DATA_LENGTH*100,2) free_ratio from information_schema.TABLES where  TABLE_SCHEMA= 'test' and TABLE_NAME= 'user';\n+--------------+------------+--------+----------+------------+---------+----------+---------+------------+\n| table_schema | table_name | ENGINE | total_mb | TABLE_ROWS | data_mb | index_mb | free_mb | free_ratio |\n+--------------+------------+--------+----------+------------+---------+----------+---------+------------+\n| test         | user      | InnoDB |        5 |      50000 |       5 |        0 |       2 |      44.29 |\n+--------------+------------+--------+----------+------------+---------+----------+---------+------------+\n1 row in set (0.00 sec)\n\n\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n</ul>\n<h2><a name=\"t10\"></a><a name=\"t10\"></a><a id=\"deleteSQL_260\"></a>delete对SQL的影响</h2>\n<h3><a name=\"t11\"></a><a name=\"t11\"></a><a id=\"SQL_262\"></a>未删除前的SQL执行情况</h3>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">#插入100W数据\nmysql&gt; call insert_user_data(1000000);\nQuery OK, 0 rows affected (35.99 sec)\n\n#添加相关索引\nmysql&gt; alter table user add index idx_name(name), add index idx_phone(phone);\nQuery OK, 0 rows affected (6.00 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\n#表上索引统计信息\nmysql&gt; show index from user;\n+-------+------------+-----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+\n| Table | Non_unique | Key_name  | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment |\n+-------+------------+-----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+\n| user  |          0 | PRIMARY   |            1 | id          | A         |      996757 |     NULL | NULL   |      | BTREE      |         |               |\n| user  |          1 | idx_name  |            1 | name        | A         |      996757 |     NULL | NULL   |      | BTREE      |         |               |\n| user  |          1 | idx_phone |            1 | phone       | A         |           2 |     NULL | NULL   |      | BTREE      |         |               |\n+-------+------------+-----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+\n3 rows in set (0.00 sec)\n\n#重置状态变量计数\nmysql&gt; flush status;\nQuery OK, 0 rows affected (0.00 sec)\n\n#执行SQL语句\nmysql&gt; select id, age ,phone from user where name like 'lyn12%';\n+--------+-----+-------------+\n| id     | age | phone       |\n+--------+-----+-------------+\n|    124 |   3 | 15240540354 |\n|   1231 |  30 | 15240540354 |\n|  12301 |  60 | 15240540354 |\n.............................\n| 129998 |  37 | 15240540354 |\n| 129999 |  38 | 15240540354 |\n| 130000 |  39 | 15240540354 |\n+--------+-----+-------------+\n11111 rows in set (0.03 sec)\n\nmysql&gt; explain select id, age ,phone from user where name like 'lyn12%';\n+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+\n| id | select_type | table | type  | possible_keys | key      | key_len | ref  | rows  | Extra                 |\n+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+\n|  1 | SIMPLE      | user  | range | idx_name      | idx_name | 82      | NULL | 22226 | Using index condition |\n+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+\n1 row in set (0.00 sec)\n\n#查看相关状态呢变量\nmysql&gt; select * from information_schema.session_status where variable_name in('Last_query_cost','Handler_read_next','Innodb_pages_read','Innodb_data_reads','Innodb_pages_read');\n+-------------------+----------------+\n| VARIABLE_NAME     | VARIABLE_VALUE |\n+-------------------+----------------+\n| HANDLER_READ_NEXT | 11111          |    #请求读的行数\n| INNODB_DATA_READS | 7868409        |    #数据物理读的总数\n| INNODB_PAGES_READ | 7855239        |    #逻辑读的总数\n| LAST_QUERY_COST   | 10.499000      |    #SQL语句的成本COST，主要包括IO_COST和CPU_COST。\n+-------------------+----------------+\n4 rows in set (0.00 sec)\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n<li>17</li>\n<li>18</li>\n<li>19</li>\n<li>20</li>\n<li>21</li>\n<li>22</li>\n<li>23</li>\n<li>24</li>\n<li>25</li>\n<li>26</li>\n<li>27</li>\n<li>28</li>\n<li>29</li>\n<li>30</li>\n<li>31</li>\n<li>32</li>\n<li>33</li>\n<li>34</li>\n<li>35</li>\n<li>36</li>\n<li>37</li>\n<li>38</li>\n<li>39</li>\n<li>40</li>\n<li>41</li>\n<li>42</li>\n<li>43</li>\n<li>44</li>\n<li>45</li>\n<li>46</li>\n<li>47</li>\n<li>48</li>\n<li>49</li>\n<li>50</li>\n<li>51</li>\n<li>52</li>\n<li>53</li>\n<li>54</li>\n<li>55</li>\n<li>56</li>\n<li>57</li>\n<li>58</li>\n</ul>\n<h3><a name=\"t12\"></a><a name=\"t12\"></a><a id=\"SQL_325\"></a>删除后的SQL执行情况</h3>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">#删除50w数据\nmysql&gt; delete from user limit 500000;\nQuery OK, 500000 rows affected (3.70 sec)\n\n#分析表统计信息\nmysql&gt; analyze table user;\n+-----------+---------+----------+----------+\n| Table     | Op      | Msg_type | Msg_text |\n+-----------+---------+----------+----------+\n| test.user | analyze | status   | OK       |\n+-----------+---------+----------+----------+\n1 row in set (0.01 sec)\n\n#重置状态变量计数\nmysql&gt; flush status;\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql&gt; select id, age ,phone from user where name like 'lyn12%';\nEmpty set (0.05 sec)\n\nmysql&gt; explain select id, age ,phone from user where name like 'lyn12%';\n+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+\n| id | select_type | table | type  | possible_keys | key      | key_len | ref  | rows  | Extra                 |\n+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+\n|  1 | SIMPLE      | user  | range | idx_name      | idx_name | 82      | NULL | 22226 | Using index condition |\n+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+\n1 row in set (0.00 sec)\n\nmysql&gt; select * from information_schema.session_status where variable_name in('Last_query_cost','Handler_read_next','Innodb_pages_read','Innodb_data_reads','Innodb_pages_read');\n+-------------------+----------------+\n| VARIABLE_NAME     | VARIABLE_VALUE |\n+-------------------+----------------+\n| HANDLER_READ_NEXT | 0              |\n| INNODB_DATA_READS | 7868409        |\n| INNODB_PAGES_READ | 7855239        |\n| LAST_QUERY_COST   | 10.499000      |\n+-------------------+----------------+\n4 rows in set (0.00 sec)\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n<li>17</li>\n<li>18</li>\n<li>19</li>\n<li>20</li>\n<li>21</li>\n<li>22</li>\n<li>23</li>\n<li>24</li>\n<li>25</li>\n<li>26</li>\n<li>27</li>\n<li>28</li>\n<li>29</li>\n<li>30</li>\n<li>31</li>\n<li>32</li>\n<li>33</li>\n<li>34</li>\n<li>35</li>\n<li>36</li>\n<li>37</li>\n<li>38</li>\n</ul>\n<h3><a name=\"t13\"></a><a name=\"t13\"></a><a id=\"_368\"></a>结果统计分析</h3>\n<div class=\"table-box\">\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>COST</th>\n<th>物理读次数</th>\n<th>逻辑读次数</th>\n<th>扫描行数</th>\n<th>返回行数</th>\n<th>执行时间</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>初始化插入100W</td>\n<td>10.499000</td>\n<td>7868409</td>\n<td>7855239</td>\n<td>22226</td>\n<td>11111</td>\n<td>30ms</td>\n</tr>\n<tr>\n<td>100W随机删除50W</td>\n<td>10.499000</td>\n<td>7868409</td>\n<td>7855239</td>\n<td>22226</td>\n<td>0</td>\n<td>50ms</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>这也说明对普通的大表，想要通过delete数据来对表进行瘦身是不现实的，所以在任何时候不要用delete去删除数据，应该使用优雅的标记删除。</p>\n<h2><a name=\"t14\"></a><a name=\"t14\"></a><a id=\"delete_377\"></a>delete优化建议</h2>\n<h3><a name=\"t15\"></a><a name=\"t15\"></a><a id=\"_379\"></a>控制业务账号权限</h3>\n<p>对于一个大的系统来说，需要根据业务特点去拆分子系统，每个子系统可以看做是一个service，例如美团APP，上面有很多服务，核心的服务有用户服务user-service，搜索服务search-service，商品product-service，位置服务location-service，价格服务price-service等。每个服务对应一个数据库，为该数据库创建单独账号，同时只授予DML权限且没有delete权限，同时禁止跨库访问。</p>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">#创建用户数据库并授权\ncreate database mt_user charset utf8mb4;\ngrant USAGE, SELECT, INSERT, UPDATE ON mt_user.*  to 'w_user'@'%' identified by 't$W*g@gaHTGi123456';\nflush privileges;\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n</ul>\n<h3><a name=\"t16\"></a><a name=\"t16\"></a><a id=\"delete_390\"></a>delete改为标记删除</h3>\n<p>在MySQL数据库建模规范中有4个公共字段，基本上每个表必须有的，同时在create_time列要创建索引，有两方面的好处：</p>\n<ol>\n<li>一些查询业务场景都会有一个默认的时间段，比如7天或者一个月，都是通过create_time去过滤，走索引扫描更快。</li>\n<li>一些核心的业务表需要以T +1的方式抽取数据仓库中，比如每天晚上00:30抽取前一天的数据，都是通过create_time过滤的。</li>\n</ol>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">`id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '主键id',\n`is_deleted` tinyint(4) NOT NULL DEFAULT '0' COMMENT '是否逻辑删除：0：未删除，1：已删除',\n`create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',\n`update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间'\n\n#有了删除标记，业务接口的delete操作就可以转换为update\nupdate user set is_deleted = 1 where user_id = 1213;\n\n#查询的时候需要带上is_deleted过滤\nselect id, age ,phone from user where is_deleted = 0 and name like 'lyn12%';\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n</ul>\n<h2><a name=\"t17\"></a><a name=\"t17\"></a><a id=\"_410\"></a>数据归档方式</h2>\n<h3><a name=\"t18\"></a><a name=\"t18\"></a><a id=\"_412\"></a>通用数据归档方法</h3>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">#1. 创建归档表，一般在原表名后面添加_bak。\nCREATE TABLE `ota_order_bak` (\n  `id` bigint(11) NOT NULL AUTO_INCREMENT COMMENT '主键',\n  `order_id` varchar(255) DEFAULT NULL COMMENT '订单id',\n  `ota_id` varchar(255) DEFAULT NULL COMMENT 'ota',\n  `check_in_date` varchar(255) DEFAULT NULL COMMENT '入住日期',\n  `check_out_date` varchar(255) DEFAULT NULL COMMENT '离店日期',\n  `hotel_id` varchar(255) DEFAULT NULL COMMENT '酒店ID',\n  `guest_name` varchar(255) DEFAULT NULL COMMENT '顾客',\n  `purcharse_time` timestamp NULL DEFAULT NULL COMMENT '购买时间',\n  `create_time` datetime DEFAULT NULL,\n  `update_time` datetime DEFAULT NULL,\n  `create_user` varchar(255) DEFAULT NULL,\n  `update_user` varchar(255) DEFAULT NULL,\n  `status` int(4) DEFAULT '1' COMMENT '状态 ： 1 正常 ， 0 删除',\n  `hotel_name` varchar(255) DEFAULT NULL,\n  `price` decimal(10,0) DEFAULT NULL,\n  `remark` longtext,\n  PRIMARY KEY (`id`),\n  KEY `IDX_order_id` (`order_id`) USING BTREE,\n  KEY `hotel_name` (`hotel_name`) USING BTREE,\n  KEY `ota_id` (`ota_id`) USING BTREE,\n  KEY `IDX_purcharse_time` (`purcharse_time`) USING BTREE,\n  KEY `IDX_create_time` (`create_time`) USING BTREE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\nPARTITION BY RANGE (to_days(create_time)) ( \nPARTITION p201808 VALUES LESS THAN (to_days('2018-09-01')), \nPARTITION p201809 VALUES LESS THAN (to_days('2018-10-01')), \nPARTITION p201810 VALUES LESS THAN (to_days('2018-11-01')), \nPARTITION p201811 VALUES LESS THAN (to_days('2018-12-01')), \nPARTITION p201812 VALUES LESS THAN (to_days('2019-01-01')), \nPARTITION p201901 VALUES LESS THAN (to_days('2019-02-01')), \nPARTITION p201902 VALUES LESS THAN (to_days('2019-03-01')), \nPARTITION p201903 VALUES LESS THAN (to_days('2019-04-01')), \nPARTITION p201904 VALUES LESS THAN (to_days('2019-05-01')), \nPARTITION p201905 VALUES LESS THAN (to_days('2019-06-01')), \nPARTITION p201906 VALUES LESS THAN (to_days('2019-07-01')), \nPARTITION p201907 VALUES LESS THAN (to_days('2019-08-01')), \nPARTITION p201908 VALUES LESS THAN (to_days('2019-09-01')), \nPARTITION p201909 VALUES LESS THAN (to_days('2019-10-01')), \nPARTITION p201910 VALUES LESS THAN (to_days('2019-11-01')), \nPARTITION p201911 VALUES LESS THAN (to_days('2019-12-01')), \nPARTITION p201912 VALUES LESS THAN (to_days('2020-01-01')));\n\n#2. 插入原表中无效的数据（需要跟开发同学确认数据保留范围）\ncreate table tbl_p201808 as select * from ota_order where create_time between '2018-08-01 00:00:00' and '2018-08-31 23:59:59';\n\n#3. 跟归档表分区做分区交换\nalter table ota_order_bak exchange partition p201808 with table tbl_p201808; \n\n#4. 删除原表中已经规范的数据\ndelete from ota_order where create_time between '2018-08-01 00:00:00' and '2018-08-31 23:59:59' limit 3000;\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n<li>17</li>\n<li>18</li>\n<li>19</li>\n<li>20</li>\n<li>21</li>\n<li>22</li>\n<li>23</li>\n<li>24</li>\n<li>25</li>\n<li>26</li>\n<li>27</li>\n<li>28</li>\n<li>29</li>\n<li>30</li>\n<li>31</li>\n<li>32</li>\n<li>33</li>\n<li>34</li>\n<li>35</li>\n<li>36</li>\n<li>37</li>\n<li>38</li>\n<li>39</li>\n<li>40</li>\n<li>41</li>\n<li>42</li>\n<li>43</li>\n<li>44</li>\n<li>45</li>\n<li>46</li>\n<li>47</li>\n<li>48</li>\n<li>49</li>\n<li>50</li>\n<li>51</li>\n<li>52</li>\n</ul>\n<h3><a name=\"t19\"></a><a name=\"t19\"></a><a id=\"_469\"></a>优化后的归档方式</h3>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">#1. 创建中间表\nCREATE TABLE `ota_order_2020` (........) ENGINE=InnoDB DEFAULT CHARSET=utf8\nPARTITION BY RANGE (to_days(create_time)) ( \nPARTITION p201808 VALUES LESS THAN (to_days('2018-09-01')), \nPARTITION p201809 VALUES LESS THAN (to_days('2018-10-01')), \nPARTITION p201810 VALUES LESS THAN (to_days('2018-11-01')), \nPARTITION p201811 VALUES LESS THAN (to_days('2018-12-01')), \nPARTITION p201812 VALUES LESS THAN (to_days('2019-01-01')), \nPARTITION p201901 VALUES LESS THAN (to_days('2019-02-01')), \nPARTITION p201902 VALUES LESS THAN (to_days('2019-03-01')), \nPARTITION p201903 VALUES LESS THAN (to_days('2019-04-01')), \nPARTITION p201904 VALUES LESS THAN (to_days('2019-05-01')), \nPARTITION p201905 VALUES LESS THAN (to_days('2019-06-01')), \nPARTITION p201906 VALUES LESS THAN (to_days('2019-07-01')), \nPARTITION p201907 VALUES LESS THAN (to_days('2019-08-01')), \nPARTITION p201908 VALUES LESS THAN (to_days('2019-09-01')), \nPARTITION p201909 VALUES LESS THAN (to_days('2019-10-01')), \nPARTITION p201910 VALUES LESS THAN (to_days('2019-11-01')), \nPARTITION p201911 VALUES LESS THAN (to_days('2019-12-01')), \nPARTITION p201912 VALUES LESS THAN (to_days('2020-01-01')));\n\n#2. 插入原表中有效的数据，如果数据量在100W左右可以在业务低峰期直接插入，如果比较大，建议采用dataX来做，可以控制频率和大小，之前我这边用Go封装了dataX可以实现自动生成json文件，自定义大小去执行。\ninsert into ota_order_2020 select * from ota_order where create_time between '2020-08-01 00:00:00' and '2020-08-31 23:59:59';\n\n#3. 表重命名\nalter table ota_order rename to ota_order_bak;  \nalter table ota_order_2020 rename to ota_order;\n#4. 插入差异数据\ninsert into ota_order select * from ota_order_bak a where not exists (select 1 from ota_order b where a.id = b.id);\n#5. ota_order_bak改造成分区表，如果表比较大不建议直接改造，可以先创建好分区表，通过dataX把导入进去即可。\n\n#6. 后续的归档方法\n#创建中间普遍表\ncreate table ota_order_mid like ota_order;\n#交换原表无效数据分区到普通表\nalter table ota_order exchange partition p201808 with table ota_order_mid; \n##交换普通表数据到归档表的相应分区\nalter table ota_order_bak exchange partition p201808 with table ota_order_mid; \n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n<li>17</li>\n<li>18</li>\n<li>19</li>\n<li>20</li>\n<li>21</li>\n<li>22</li>\n<li>23</li>\n<li>24</li>\n<li>25</li>\n<li>26</li>\n<li>27</li>\n<li>28</li>\n<li>29</li>\n<li>30</li>\n<li>31</li>\n<li>32</li>\n<li>33</li>\n<li>34</li>\n<li>35</li>\n<li>36</li>\n<li>37</li>\n<li>38</li>\n</ul>\n<p>这样原表和归档表都是按月的分区表，只需要创建一个中间普通表，在业务低峰期做两次分区交换，既可以删除无效数据，又能回收空，而且没有空间碎片，不会影响表上的索引及SQL的执行计划。</p>\n<h2><a name=\"t20\"></a><a name=\"t20\"></a><a id=\"_514\"></a>总结</h2>\n<p>通过从InnoDB存储空间分布，delete对性能的影响可以看到，delete物理删除既不能释放磁盘空间，而且会产生大量的碎片，导致索引频繁分裂，影响SQL执行计划的稳定性；</p>\n<p>同时在碎片回收时，会耗用大量的CPU，磁盘空间，影响表上正常的DML操作。</p>\n<p>在业务代码层面，应该做逻辑标记删除，避免物理删除；为了实现数据归档需求，可以用采用MySQL分区表特性来实现，都是DDL操作，没有碎片产生。</p>\n<p>另外一个比较好的方案采用Clickhouse，对有生命周期的数据表可以使用Clickhouse存储，利用其TTL特性实现无效数据自动清理。</p>\n<p>&nbsp;</p>","blogGoods":0,"blogId":"1330877080455553024","blogRead":0,"blogRemark":"aaaaa","blogTitle":"","blogType":1,"createdTime":1606111996000,"version":1},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 22:14:40.448 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 22:15:06.421 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlBlogMapper.getById.debug:159 -==>  Preparing: select blog_id, blog_title, blog_content, blog_goods, blog_image, blog_read, blog_collection, blog_type, blog_remark, blog_comment, blog_source, created_time, version from bl_blog where blog_id = ? and deleted = 0 
2020-11-23 22:15:06.422 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlBlogMapper.getById.debug:159 -==> Parameters: 1330877084339478528(String)
2020-11-23 22:15:06.527 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlBlogMapper.getById.debug:159 -<==      Total: 1
2020-11-23 22:15:06.568 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 22:15:06.569 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/get/1330877084339478528(String), [1330877084339478528](String), 1(Integer), null, GET(String), 144(Long), {"code":20000,"data":{"blogCollection":0,"blogComment":0,"blogContent":"<h2>前言</h2>\n<p>我负责的有几个系统随着业务量的增长，存储在MySQL中的数据日益剧增，我当时就想现在的业务方不讲武德，搞偷袭，趁我没反应过来把很多表，很快，很快啊都打到了亿级别，我大意了，没有闪，这就导致跟其Join的表的SQL变得很慢，对的应用接口的response time也变长了，影响了用户体验。</p>\n<p>事后我找到业务方，我批评了他们跟他们说要讲武德，连忙跟我道歉，这个事情才就此作罢，走的时候我对他们说下次不要这样了，耗子尾汁，好好反思。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/3c93aececcb9e763f5476362c4e88710.png\" alt=\"\" /></p>\n<p>骂归骂，事情还是得解决，时候我分析原因发现，发现有些表的数据量增长很快，对应SQL扫描了很多无效数据，导致SQL慢了下来，通过确认之后，这些大表都是一些流水、记录、日志类型数据，只需要保留1到3个月，此时需要对表做数据清理实现瘦身，一般都会想到用insert + delete的方式去清理。</p>\n<p>这篇文章我会从InnoDB存储空间分布，delete对性能的影响，以及优化建议方面解释为什么不建议delete删除数据。</p>\n<h2><a name=\"t1\"></a><a name=\"t1\"></a><a id=\"InnoDB_16\"></a>InnoDB存储架构</h2>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/5c66ffe9749c58e1613d2519f7ea7211.png\" alt=\"\" /></p>\n<p>从这张图可以看到，InnoDB存储结构主要包括两部分：逻辑存储结构和物理存储结构。</p>\n<p>逻辑上是由表空间tablespace &mdash;&gt; 段segment或者inode &mdash;&gt; 区Extent &mdash;&mdash;&gt;数据页Page构成，Innodb逻辑管理单位是segment，空间分配的最小单位是extent，每个segment都会从表空间FREE_PAGE中分配32个page，当这32个page不够用时，会按照以下原则进行扩展：如果当前小于1个extent，则扩展到1个extent；当表空间小于32MB时，每次扩展一个extent；表空间大于32MB，每次扩展4个extent。</p>\n<p>物理上主要由系统用户数据文件，日志文件组成，数据文件主要存储MySQL字典数据和用户数据，日志文件记录的是data page的变更记录，用于MySQL Crash时的恢复。</p>\n<h2><a name=\"t2\"></a><a name=\"t2\"></a><a id=\"Innodb_26\"></a>Innodb表空间</h2>\n<p>InnoDB存储包括三类表空间：系统表空间，用户表空间，Undo表空间。</p>\n<p><strong>系统表空间：</strong>&nbsp;主要存储MySQL内部的数据字典数据，如information_schema下的数据。</p>\n<p><strong>用户表空间：</strong>&nbsp;当开启innodb_file_per_table=1时，数据表从系统表空间独立出来存储在以table_name.ibd命令的数据文件中，结构信息存储在table_name.frm文件中。</p>\n<p><strong>Undo表空间：</strong>&nbsp;存储Undo信息，如快照一致读和flashback都是利用undo信息。</p>\n<p>从MySQL 8.0开始允许用户自定义表空间，具体语法如下：</p>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">CREATE TABLESPACE tablespace_name\n    ADD DATAFILE 'file_name'               #数据文件名\n    USE LOGFILE GROUP logfile_group        #自定义日志文件组，一般每组2个logfile。\n    [EXTENT_SIZE [=] extent_size]          #区大小\n    [INITIAL_SIZE [=] initial_size]        #初始化大小 \n    [AUTOEXTEND_SIZE [=] autoextend_size]  #自动扩宽尺寸\n    [MAX_SIZE [=] max_size]                #单个文件最大size，最大是32G。\n    [NODEGROUP [=] nodegroup_id]           #节点组\n    [WAIT]\n    [COMMENT [=] comment_text]\n    ENGINE [=] engine_name\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n</ul>\n<p>这样的好处是可以做到数据的冷热分离，分别用HDD和SSD来存储，既能实现数据的高效访问，又能节约成本，比如可以添加两块500G硬盘，经过创建卷组vg，划分逻辑卷lv，创建数据目录并mount相应的lv，假设划分的两个目录分别是/hot_data 和 /cold_data。</p>\n<p>这样就可以将核心的业务表如用户表，订单表存储在高性能SSD盘上，一些日志，流水表存储在普通的HDD上，主要的操作步骤如下：</p>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">#创建热数据表空间\ncreate tablespace tbs_data_hot add datafile '/hot_data/tbs_data_hot01.dbf' max_size 20G;\n#创建核心业务表存储在热数据表空间\ncreate table booking(id bigint not null primary key auto_increment, &hellip;&hellip; ) tablespace tbs_data_hot;\n#创建冷数据表空间\ncreate tablespace tbs_data_cold add datafile '/hot_data/tbs_data_cold01.dbf' max_size 20G;\n#创建日志，流水，备份类的表存储在冷数据表空间\ncreate table payment_log(id bigint not null primary key auto_increment, &hellip;&hellip; ) tablespace tbs_data_cold;\n#可以移动表到另一个表空间\nalter table payment_log tablespace tbs_data_hot;\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n</ul>\n<h2><a name=\"t3\"></a><a name=\"t3\"></a><a id=\"Inndob_69\"></a>Inndob存储分布</h2>\n<h3><a name=\"t4\"></a><a name=\"t4\"></a><a id=\"_71\"></a>创建空表查看空间变化</h3>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">mysql&gt; create table user(id bigint not null primary key auto_increment, \n    -&gt; name varchar(20) not null default '' comment '姓名', \n    -&gt; age tinyint not null default 0 comment 'age', \n    -&gt; gender char(1) not null default 'M'  comment '性别',\n    -&gt; phone varchar(16) not null default '' comment '手机号',\n    -&gt; create_time datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',\n    -&gt; update_time datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间'\n    -&gt; ) engine = InnoDB DEFAULT CHARSET=utf8mb4 COMMENT '用户信息表';\nQuery OK, 0 rows affected (0.26 sec)\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n</ul>\n<pre class=\"prettyprint\"><code class=\"prism language-bash has-numbering\"><span class=\"token comment\"># ls -lh user1.ibd </span>\n-rw-r----- 1 mysql mysql 96K Nov  6 12:48 user.ibd\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n</ul>\n<p>设置参数innodb_file_per_table=1时，创建表时会自动创建一个segment，同时分配一个extent，包含32个data page的来存储数据，这样创建的空表默认大小就是96KB，extent使用完之后会申请64个连接页，这样对于一些小表，或者undo segment，可以在开始时申请较少的空间，节省磁盘容量的开销。</p>\n<pre class=\"prettyprint\"><code class=\"prism language-shell has-numbering\"><span class=\"token comment\"># python2 py_innodb_page_info.py -v /data2/mysql/test/user.ibd</span>\npage offset 00000000, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>File Space Header<span class=\"token operator\">&gt;</span>\npage offset 00000001, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>Insert Buffer Bitmap<span class=\"token operator\">&gt;</span>\npage offset 00000002, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>File Segment inode<span class=\"token operator\">&gt;</span>\npage offset 00000003, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>B-tree Node<span class=\"token operator\">&gt;</span>, page level <span class=\"token operator\">&lt;</span>0000<span class=\"token operator\">&gt;</span>\npage offset 00000000, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>Freshly Allocated Page<span class=\"token operator\">&gt;</span>\npage offset 00000000, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>Freshly Allocated Page<span class=\"token operator\">&gt;</span>\nTotal number of page: 6:      <span class=\"token comment\">#总共分配的页数</span>\nFreshly Allocated Page: 2     <span class=\"token comment\">#可用的数据页</span>\nInsert Buffer Bitmap: 1       <span class=\"token comment\">#插入缓冲页</span>\nFile Space Header: 1          <span class=\"token comment\">#文件空间头</span>\nB-tree Node: 1                <span class=\"token comment\">#数据页</span>\nFile Segment inode: 1         <span class=\"token comment\">#文件端inonde，如果是在ibdata1.ibd上会有多个inode。</span>\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n</ul>\n<h3><a name=\"t5\"></a><a name=\"t5\"></a><a id=\"_108\"></a>插入数据后的空间变化</h3>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">mysql&gt; DELIMITER $$\nmysql&gt; CREATE PROCEDURE insert_user_data(num INTEGER) \n    -&gt; BEGIN\n    -&gt;     DECLARE v_i int unsigned DEFAULT 0;\n    -&gt; set autocommit= 0;\n    -&gt; WHILE v_i &lt; num DO\n    -&gt;    insert into user(`name`, age, gender, phone) values (CONCAT('lyn',v_i), mod(v_i,120), 'M', CONCAT('152',ROUND(RAND(1)*100000000)));\n    -&gt;  SET v_i = v_i+1;\n    -&gt; END WHILE;\n    -&gt; commit;\n    -&gt; END $$\nQuery OK, 0 rows affected (0.01 sec)\nmysql&gt; DELIMITER ;\n\n#插入10w数据\nmysql&gt; call insert_user_data(100000);\nQuery OK, 0 rows affected (6.69 sec)\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n<li>17</li>\n</ul>\n<pre class=\"prettyprint\"><code class=\"prism language-shell has-numbering\"><span class=\"token comment\"># ls -lh user.ibd</span>\n-rw-r----- 1 mysql mysql 14M Nov 6 10:58 /data2/mysql/test/user.ibd\n\n<span class=\"token comment\"># python2 py_innodb_page_info.py -v /data2/mysql/test/user.ibd</span>\npage offset 00000000, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>File Space Header<span class=\"token operator\">&gt;</span>\npage offset 00000001, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>Insert Buffer Bitmap<span class=\"token operator\">&gt;</span>\npage offset 00000002, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>File Segment inode<span class=\"token operator\">&gt;</span>\npage offset 00000003, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>B-tree Node<span class=\"token operator\">&gt;</span>, page level <span class=\"token operator\">&lt;</span>0001<span class=\"token operator\">&gt;</span>   <span class=\"token comment\">#增加了一个非叶子节点，树的高度从1变为2.</span>\n<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>\npage offset 00000000, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>Freshly Allocated Page<span class=\"token operator\">&gt;</span>\nTotal number of page: 896:\nFreshly Allocated Page: 493\nInsert Buffer Bitmap: 1\nFile Space Header: 1\nB-tree Node: 400\nFile Segment inode: 1\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n</ul>\n<h3><a name=\"t6\"></a><a name=\"t6\"></a><a id=\"delete_149\"></a>delete数据后的空间变化</h3>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">mysql&gt; select min(id),max(id),count(*) from user;\n+---------+---------+----------+\n| min(id) | max(id) | count(*) |\n+---------+---------+----------+\n|       1 |  100000 |   100000 |\n+---------+---------+----------+\n1 row in set (0.05 sec)\n#删除50000条数据，理论上空间应该从14MB变长7MB左右。\nmysql&gt; delete from user limit 50000;\nQuery OK, 50000 rows affected (0.25 sec)\n\n#数据文件大小依然是14MB，没有缩小。\n# ls -lh /data2/mysql/test/user1.ibd \n-rw-r----- 1 mysql mysql 14M Nov  6 13:22 /data2/mysql/test/user.ibd\n\n#数据页没有被回收。\n# python2 py_innodb_page_info.py -v /data2/mysql/test/user.ibd\npage offset 00000000, page type &lt;File Space Header&gt;\npage offset 00000001, page type &lt;Insert Buffer Bitmap&gt;\npage offset 00000002, page type &lt;File Segment inode&gt;\npage offset 00000003, page type &lt;B-tree Node&gt;, page level &lt;0001&gt;\n........................................................\npage offset 00000000, page type &lt;Freshly Allocated Page&gt;\nTotal number of page: 896:\nFreshly Allocated Page: 493\nInsert Buffer Bitmap: 1\nFile Space Header: 1\nB-tree Node: 400\nFile Segment inode: 1\n#在MySQL内部是标记删除，\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n<li>17</li>\n<li>18</li>\n<li>19</li>\n<li>20</li>\n<li>21</li>\n<li>22</li>\n<li>23</li>\n<li>24</li>\n<li>25</li>\n<li>26</li>\n<li>27</li>\n<li>28</li>\n<li>29</li>\n<li>30</li>\n</ul>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">mysql&gt; use information_schema;\n\nDatabase changed\nmysql&gt; SELECT A.SPACE AS TBL_SPACEID, A.TABLE_ID, A.NAME AS TABLE_NAME, FILE_FORMAT, ROW_FORMAT, SPACE_TYPE,  B.INDEX_ID , B.NAME AS INDEX_NAME, PAGE_NO, B.TYPE AS INDEX_TYPE FROM INNODB_SYS_TABLES A LEFT JOIN INNODB_SYS_INDEXES B ON A.TABLE_ID =B.TABLE_ID WHERE A.NAME = 'test/user1';\n+-------------+----------+------------+-------------+------------+------------+----------+------------+---------+------------+\n| TBL_SPACEID | TABLE_ID | TABLE_NAME | FILE_FORMAT | ROW_FORMAT | SPACE_TYPE | INDEX_ID | INDEX_NAME | PAGE_NO | INDEX_TYPE |\n+-------------+----------+------------+-------------+------------+------------+----------+------------+---------+------------+\n|        1283 |     1207 | test/user | Barracuda   | Dynamic    | Single     |     2236 | PRIMARY    |       3 |          3 |\n+-------------+----------+------------+-------------+------------+------------+----------+------------+---------+------------+\n1 row in set (0.01 sec)\n\nPAGE_NO = 3 标识B-tree的root page是3号页，INDEX_TYPE = 3是聚集索引。 INDEX_TYPE取值如下：\n0 = nonunique secondary index; \n1 = automatically generated clustered index (GEN_CLUST_INDEX); \n2 = unique nonclustered index; \n3 = clustered index; \n32 = full-text index;\n#收缩空间再后进行观察\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n<li>17</li>\n<li>18</li>\n</ul>\n<p>MySQL内部不会真正删除空间，而且做标记删除，即将delflag:N修改为delflag:Y，commit之后会会被purge进入删除链表，如果下一次insert更大的记录，delete之后的空间不会被重用，如果插入的记录小于等于delete的记录空会被重用，这块内容可以通过知数堂的innblock工具进行分析。</p>\n<h2><a name=\"t7\"></a><a name=\"t7\"></a><a id=\"Innodb_207\"></a>Innodb中的碎片</h2>\n<h3><a name=\"t8\"></a><a name=\"t8\"></a><a id=\"_209\"></a>碎片的产生</h3>\n<p>我们知道数据存储在文件系统上的，总是不能100%利用分配给它的物理空间，删除数据会在页面上留下一些&rdquo;空洞&rdquo;，或者随机写入（聚集索引非线性增加）会导致页分裂，页分裂导致页面的利用空间少于50%，另外对表进行增删改会引起对应的二级索引值的随机的增删改，也会导致索引结构中的数据页面上留下一些\"空洞\"，虽然这些空洞有可能会被重复利用，但终究会导致部分物理空间未被使用，也就是碎片。</p>\n<p>同时，即便是设置了填充因子为100%，Innodb也会主动留下page页面1/16的空间作为预留使用（An innodb_fill_factor setting of 100 leaves 1/16 of the space in clustered index pages free for future index growth）防止update带来的行溢出。</p>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">mysql&gt; select table_schema,\n    -&gt;        table_name,ENGINE,\n    -&gt;        round(DATA_LENGTH/1024/1024+ INDEX_LENGTH/1024/1024) total_mb,TABLE_ROWS,\n    -&gt;        round(DATA_LENGTH/1024/1024) data_mb, round(INDEX_LENGTH/1024/1024) index_mb, round(DATA_FREE/1024/1024) free_mb, round(DATA_FREE/DATA_LENGTH*100,2) free_ratio\n    -&gt; from information_schema.TABLES where  TABLE_SCHEMA= 'test'\n    -&gt; and TABLE_NAME= 'user';\n+--------------+------------+--------+----------+------------+---------+----------+---------+------------+\n| table_schema | table_name | ENGINE | total_mb | TABLE_ROWS | data_mb | index_mb | free_mb | free_ratio |\n+--------------+------------+--------+----------+------------+---------+----------+---------+------------+\n| test         | user      | InnoDB |        4 |      50000 |       4 |        0 |       6 |     149.42 |\n+--------------+------------+--------+----------+------------+---------+----------+---------+------------+\n1 row in set (0.00 sec)\n\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n</ul>\n<p>其中data_free是分配了未使用的字节数，并不能说明完全是碎片空间。</p>\n<h3><a name=\"t9\"></a><a name=\"t9\"></a><a id=\"_233\"></a>碎片的回收</h3>\n<p>对于InnoDB的表，可以通过以下命令来回收碎片，释放空间，这个是随机读IO操作，会比较耗时，也会阻塞表上正常的DML运行，同时需要占用额外更多的磁盘空间，对于RDS来说，可能会导致磁盘空间瞬间爆满，实例瞬间被锁定，应用无法做DML操作，所以禁止在线上环境去执行。</p>\n<pre class=\"prettyprint\"><code class=\"prism language-shell has-numbering\"><span class=\"token comment\">#执行InnoDB的碎片回收</span>\nmysql<span class=\"token operator\">&gt;</span> alter table user engine<span class=\"token operator\">=</span>InnoDB<span class=\"token punctuation\">;</span>\nQuery OK, 0 rows affected <span class=\"token punctuation\">(</span>9.00 sec<span class=\"token punctuation\">)</span>\nRecords: 0  Duplicates: 0  Warnings: 0\n\n<span class=\"token comment\">##执行完之后，数据文件大小从14MB降低到10M。</span>\n<span class=\"token comment\"># ls -lh /data2/mysql/test/user1.ibd </span>\n-rw-r----- 1 mysql mysql 10M Nov 6 16:18 /data2/mysql/test/user.ibd\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n</ul>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">mysql&gt; select table_schema,        table_name,ENGINE,        round(DATA_LENGTH/1024/1024+ INDEX_LENGTH/1024/1024) total_mb,TABLE_ROWS,        round(DATA_LENGTH/1024/1024) data_mb, round(INDEX_LENGTH/1024/1024) index_mb, round(DATA_FREE/1024/1024) free_mb, round(DATA_FREE/DATA_LENGTH*100,2) free_ratio from information_schema.TABLES where  TABLE_SCHEMA= 'test' and TABLE_NAME= 'user';\n+--------------+------------+--------+----------+------------+---------+----------+---------+------------+\n| table_schema | table_name | ENGINE | total_mb | TABLE_ROWS | data_mb | index_mb | free_mb | free_ratio |\n+--------------+------------+--------+----------+------------+---------+----------+---------+------------+\n| test         | user      | InnoDB |        5 |      50000 |       5 |        0 |       2 |      44.29 |\n+--------------+------------+--------+----------+------------+---------+----------+---------+------------+\n1 row in set (0.00 sec)\n\n\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n</ul>\n<h2><a name=\"t10\"></a><a name=\"t10\"></a><a id=\"deleteSQL_260\"></a>delete对SQL的影响</h2>\n<h3><a name=\"t11\"></a><a name=\"t11\"></a><a id=\"SQL_262\"></a>未删除前的SQL执行情况</h3>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">#插入100W数据\nmysql&gt; call insert_user_data(1000000);\nQuery OK, 0 rows affected (35.99 sec)\n\n#添加相关索引\nmysql&gt; alter table user add index idx_name(name), add index idx_phone(phone);\nQuery OK, 0 rows affected (6.00 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\n#表上索引统计信息\nmysql&gt; show index from user;\n+-------+------------+-----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+\n| Table | Non_unique | Key_name  | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment |\n+-------+------------+-----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+\n| user  |          0 | PRIMARY   |            1 | id          | A         |      996757 |     NULL | NULL   |      | BTREE      |         |               |\n| user  |          1 | idx_name  |            1 | name        | A         |      996757 |     NULL | NULL   |      | BTREE      |         |               |\n| user  |          1 | idx_phone |            1 | phone       | A         |           2 |     NULL | NULL   |      | BTREE      |         |               |\n+-------+------------+-----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+\n3 rows in set (0.00 sec)\n\n#重置状态变量计数\nmysql&gt; flush status;\nQuery OK, 0 rows affected (0.00 sec)\n\n#执行SQL语句\nmysql&gt; select id, age ,phone from user where name like 'lyn12%';\n+--------+-----+-------------+\n| id     | age | phone       |\n+--------+-----+-------------+\n|    124 |   3 | 15240540354 |\n|   1231 |  30 | 15240540354 |\n|  12301 |  60 | 15240540354 |\n.............................\n| 129998 |  37 | 15240540354 |\n| 129999 |  38 | 15240540354 |\n| 130000 |  39 | 15240540354 |\n+--------+-----+-------------+\n11111 rows in set (0.03 sec)\n\nmysql&gt; explain select id, age ,phone from user where name like 'lyn12%';\n+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+\n| id | select_type | table | type  | possible_keys | key      | key_len | ref  | rows  | Extra                 |\n+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+\n|  1 | SIMPLE      | user  | range | idx_name      | idx_name | 82      | NULL | 22226 | Using index condition |\n+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+\n1 row in set (0.00 sec)\n\n#查看相关状态呢变量\nmysql&gt; select * from information_schema.session_status where variable_name in('Last_query_cost','Handler_read_next','Innodb_pages_read','Innodb_data_reads','Innodb_pages_read');\n+-------------------+----------------+\n| VARIABLE_NAME     | VARIABLE_VALUE |\n+-------------------+----------------+\n| HANDLER_READ_NEXT | 11111          |    #请求读的行数\n| INNODB_DATA_READS | 7868409        |    #数据物理读的总数\n| INNODB_PAGES_READ | 7855239        |    #逻辑读的总数\n| LAST_QUERY_COST   | 10.499000      |    #SQL语句的成本COST，主要包括IO_COST和CPU_COST。\n+-------------------+----------------+\n4 rows in set (0.00 sec)\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n<li>17</li>\n<li>18</li>\n<li>19</li>\n<li>20</li>\n<li>21</li>\n<li>22</li>\n<li>23</li>\n<li>24</li>\n<li>25</li>\n<li>26</li>\n<li>27</li>\n<li>28</li>\n<li>29</li>\n<li>30</li>\n<li>31</li>\n<li>32</li>\n<li>33</li>\n<li>34</li>\n<li>35</li>\n<li>36</li>\n<li>37</li>\n<li>38</li>\n<li>39</li>\n<li>40</li>\n<li>41</li>\n<li>42</li>\n<li>43</li>\n<li>44</li>\n<li>45</li>\n<li>46</li>\n<li>47</li>\n<li>48</li>\n<li>49</li>\n<li>50</li>\n<li>51</li>\n<li>52</li>\n<li>53</li>\n<li>54</li>\n<li>55</li>\n<li>56</li>\n<li>57</li>\n<li>58</li>\n</ul>\n<h3><a name=\"t12\"></a><a name=\"t12\"></a><a id=\"SQL_325\"></a>删除后的SQL执行情况</h3>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">#删除50w数据\nmysql&gt; delete from user limit 500000;\nQuery OK, 500000 rows affected (3.70 sec)\n\n#分析表统计信息\nmysql&gt; analyze table user;\n+-----------+---------+----------+----------+\n| Table     | Op      | Msg_type | Msg_text |\n+-----------+---------+----------+----------+\n| test.user | analyze | status   | OK       |\n+-----------+---------+----------+----------+\n1 row in set (0.01 sec)\n\n#重置状态变量计数\nmysql&gt; flush status;\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql&gt; select id, age ,phone from user where name like 'lyn12%';\nEmpty set (0.05 sec)\n\nmysql&gt; explain select id, age ,phone from user where name like 'lyn12%';\n+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+\n| id | select_type | table | type  | possible_keys | key      | key_len | ref  | rows  | Extra                 |\n+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+\n|  1 | SIMPLE      | user  | range | idx_name      | idx_name | 82      | NULL | 22226 | Using index condition |\n+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+\n1 row in set (0.00 sec)\n\nmysql&gt; select * from information_schema.session_status where variable_name in('Last_query_cost','Handler_read_next','Innodb_pages_read','Innodb_data_reads','Innodb_pages_read');\n+-------------------+----------------+\n| VARIABLE_NAME     | VARIABLE_VALUE |\n+-------------------+----------------+\n| HANDLER_READ_NEXT | 0              |\n| INNODB_DATA_READS | 7868409        |\n| INNODB_PAGES_READ | 7855239        |\n| LAST_QUERY_COST   | 10.499000      |\n+-------------------+----------------+\n4 rows in set (0.00 sec)\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n<li>17</li>\n<li>18</li>\n<li>19</li>\n<li>20</li>\n<li>21</li>\n<li>22</li>\n<li>23</li>\n<li>24</li>\n<li>25</li>\n<li>26</li>\n<li>27</li>\n<li>28</li>\n<li>29</li>\n<li>30</li>\n<li>31</li>\n<li>32</li>\n<li>33</li>\n<li>34</li>\n<li>35</li>\n<li>36</li>\n<li>37</li>\n<li>38</li>\n</ul>\n<h3><a name=\"t13\"></a><a name=\"t13\"></a><a id=\"_368\"></a>结果统计分析</h3>\n<div class=\"table-box\">\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>COST</th>\n<th>物理读次数</th>\n<th>逻辑读次数</th>\n<th>扫描行数</th>\n<th>返回行数</th>\n<th>执行时间</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>初始化插入100W</td>\n<td>10.499000</td>\n<td>7868409</td>\n<td>7855239</td>\n<td>22226</td>\n<td>11111</td>\n<td>30ms</td>\n</tr>\n<tr>\n<td>100W随机删除50W</td>\n<td>10.499000</td>\n<td>7868409</td>\n<td>7855239</td>\n<td>22226</td>\n<td>0</td>\n<td>50ms</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>这也说明对普通的大表，想要通过delete数据来对表进行瘦身是不现实的，所以在任何时候不要用delete去删除数据，应该使用优雅的标记删除。</p>\n<h2><a name=\"t14\"></a><a name=\"t14\"></a><a id=\"delete_377\"></a>delete优化建议</h2>\n<h3><a name=\"t15\"></a><a name=\"t15\"></a><a id=\"_379\"></a>控制业务账号权限</h3>\n<p>对于一个大的系统来说，需要根据业务特点去拆分子系统，每个子系统可以看做是一个service，例如美团APP，上面有很多服务，核心的服务有用户服务user-service，搜索服务search-service，商品product-service，位置服务location-service，价格服务price-service等。每个服务对应一个数据库，为该数据库创建单独账号，同时只授予DML权限且没有delete权限，同时禁止跨库访问。</p>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">#创建用户数据库并授权\ncreate database mt_user charset utf8mb4;\ngrant USAGE, SELECT, INSERT, UPDATE ON mt_user.*  to 'w_user'@'%' identified by 't$W*g@gaHTGi123456';\nflush privileges;\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n</ul>\n<h3><a name=\"t16\"></a><a name=\"t16\"></a><a id=\"delete_390\"></a>delete改为标记删除</h3>\n<p>在MySQL数据库建模规范中有4个公共字段，基本上每个表必须有的，同时在create_time列要创建索引，有两方面的好处：</p>\n<ol>\n<li>一些查询业务场景都会有一个默认的时间段，比如7天或者一个月，都是通过create_time去过滤，走索引扫描更快。</li>\n<li>一些核心的业务表需要以T +1的方式抽取数据仓库中，比如每天晚上00:30抽取前一天的数据，都是通过create_time过滤的。</li>\n</ol>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">`id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '主键id',\n`is_deleted` tinyint(4) NOT NULL DEFAULT '0' COMMENT '是否逻辑删除：0：未删除，1：已删除',\n`create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',\n`update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间'\n\n#有了删除标记，业务接口的delete操作就可以转换为update\nupdate user set is_deleted = 1 where user_id = 1213;\n\n#查询的时候需要带上is_deleted过滤\nselect id, age ,phone from user where is_deleted = 0 and name like 'lyn12%';\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n</ul>\n<h2><a name=\"t17\"></a><a name=\"t17\"></a><a id=\"_410\"></a>数据归档方式</h2>\n<h3><a name=\"t18\"></a><a name=\"t18\"></a><a id=\"_412\"></a>通用数据归档方法</h3>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">#1. 创建归档表，一般在原表名后面添加_bak。\nCREATE TABLE `ota_order_bak` (\n  `id` bigint(11) NOT NULL AUTO_INCREMENT COMMENT '主键',\n  `order_id` varchar(255) DEFAULT NULL COMMENT '订单id',\n  `ota_id` varchar(255) DEFAULT NULL COMMENT 'ota',\n  `check_in_date` varchar(255) DEFAULT NULL COMMENT '入住日期',\n  `check_out_date` varchar(255) DEFAULT NULL COMMENT '离店日期',\n  `hotel_id` varchar(255) DEFAULT NULL COMMENT '酒店ID',\n  `guest_name` varchar(255) DEFAULT NULL COMMENT '顾客',\n  `purcharse_time` timestamp NULL DEFAULT NULL COMMENT '购买时间',\n  `create_time` datetime DEFAULT NULL,\n  `update_time` datetime DEFAULT NULL,\n  `create_user` varchar(255) DEFAULT NULL,\n  `update_user` varchar(255) DEFAULT NULL,\n  `status` int(4) DEFAULT '1' COMMENT '状态 ： 1 正常 ， 0 删除',\n  `hotel_name` varchar(255) DEFAULT NULL,\n  `price` decimal(10,0) DEFAULT NULL,\n  `remark` longtext,\n  PRIMARY KEY (`id`),\n  KEY `IDX_order_id` (`order_id`) USING BTREE,\n  KEY `hotel_name` (`hotel_name`) USING BTREE,\n  KEY `ota_id` (`ota_id`) USING BTREE,\n  KEY `IDX_purcharse_time` (`purcharse_time`) USING BTREE,\n  KEY `IDX_create_time` (`create_time`) USING BTREE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\nPARTITION BY RANGE (to_days(create_time)) ( \nPARTITION p201808 VALUES LESS THAN (to_days('2018-09-01')), \nPARTITION p201809 VALUES LESS THAN (to_days('2018-10-01')), \nPARTITION p201810 VALUES LESS THAN (to_days('2018-11-01')), \nPARTITION p201811 VALUES LESS THAN (to_days('2018-12-01')), \nPARTITION p201812 VALUES LESS THAN (to_days('2019-01-01')), \nPARTITION p201901 VALUES LESS THAN (to_days('2019-02-01')), \nPARTITION p201902 VALUES LESS THAN (to_days('2019-03-01')), \nPARTITION p201903 VALUES LESS THAN (to_days('2019-04-01')), \nPARTITION p201904 VALUES LESS THAN (to_days('2019-05-01')), \nPARTITION p201905 VALUES LESS THAN (to_days('2019-06-01')), \nPARTITION p201906 VALUES LESS THAN (to_days('2019-07-01')), \nPARTITION p201907 VALUES LESS THAN (to_days('2019-08-01')), \nPARTITION p201908 VALUES LESS THAN (to_days('2019-09-01')), \nPARTITION p201909 VALUES LESS THAN (to_days('2019-10-01')), \nPARTITION p201910 VALUES LESS THAN (to_days('2019-11-01')), \nPARTITION p201911 VALUES LESS THAN (to_days('2019-12-01')), \nPARTITION p201912 VALUES LESS THAN (to_days('2020-01-01')));\n\n#2. 插入原表中无效的数据（需要跟开发同学确认数据保留范围）\ncreate table tbl_p201808 as select * from ota_order where create_time between '2018-08-01 00:00:00' and '2018-08-31 23:59:59';\n\n#3. 跟归档表分区做分区交换\nalter table ota_order_bak exchange partition p201808 with table tbl_p201808; \n\n#4. 删除原表中已经规范的数据\ndelete from ota_order where create_time between '2018-08-01 00:00:00' and '2018-08-31 23:59:59' limit 3000;\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n<li>17</li>\n<li>18</li>\n<li>19</li>\n<li>20</li>\n<li>21</li>\n<li>22</li>\n<li>23</li>\n<li>24</li>\n<li>25</li>\n<li>26</li>\n<li>27</li>\n<li>28</li>\n<li>29</li>\n<li>30</li>\n<li>31</li>\n<li>32</li>\n<li>33</li>\n<li>34</li>\n<li>35</li>\n<li>36</li>\n<li>37</li>\n<li>38</li>\n<li>39</li>\n<li>40</li>\n<li>41</li>\n<li>42</li>\n<li>43</li>\n<li>44</li>\n<li>45</li>\n<li>46</li>\n<li>47</li>\n<li>48</li>\n<li>49</li>\n<li>50</li>\n<li>51</li>\n<li>52</li>\n</ul>\n<h3><a name=\"t19\"></a><a name=\"t19\"></a><a id=\"_469\"></a>优化后的归档方式</h3>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">#1. 创建中间表\nCREATE TABLE `ota_order_2020` (........) ENGINE=InnoDB DEFAULT CHARSET=utf8\nPARTITION BY RANGE (to_days(create_time)) ( \nPARTITION p201808 VALUES LESS THAN (to_days('2018-09-01')), \nPARTITION p201809 VALUES LESS THAN (to_days('2018-10-01')), \nPARTITION p201810 VALUES LESS THAN (to_days('2018-11-01')), \nPARTITION p201811 VALUES LESS THAN (to_days('2018-12-01')), \nPARTITION p201812 VALUES LESS THAN (to_days('2019-01-01')), \nPARTITION p201901 VALUES LESS THAN (to_days('2019-02-01')), \nPARTITION p201902 VALUES LESS THAN (to_days('2019-03-01')), \nPARTITION p201903 VALUES LESS THAN (to_days('2019-04-01')), \nPARTITION p201904 VALUES LESS THAN (to_days('2019-05-01')), \nPARTITION p201905 VALUES LESS THAN (to_days('2019-06-01')), \nPARTITION p201906 VALUES LESS THAN (to_days('2019-07-01')), \nPARTITION p201907 VALUES LESS THAN (to_days('2019-08-01')), \nPARTITION p201908 VALUES LESS THAN (to_days('2019-09-01')), \nPARTITION p201909 VALUES LESS THAN (to_days('2019-10-01')), \nPARTITION p201910 VALUES LESS THAN (to_days('2019-11-01')), \nPARTITION p201911 VALUES LESS THAN (to_days('2019-12-01')), \nPARTITION p201912 VALUES LESS THAN (to_days('2020-01-01')));\n\n#2. 插入原表中有效的数据，如果数据量在100W左右可以在业务低峰期直接插入，如果比较大，建议采用dataX来做，可以控制频率和大小，之前我这边用Go封装了dataX可以实现自动生成json文件，自定义大小去执行。\ninsert into ota_order_2020 select * from ota_order where create_time between '2020-08-01 00:00:00' and '2020-08-31 23:59:59';\n\n#3. 表重命名\nalter table ota_order rename to ota_order_bak;  \nalter table ota_order_2020 rename to ota_order;\n#4. 插入差异数据\ninsert into ota_order select * from ota_order_bak a where not exists (select 1 from ota_order b where a.id = b.id);\n#5. ota_order_bak改造成分区表，如果表比较大不建议直接改造，可以先创建好分区表，通过dataX把导入进去即可。\n\n#6. 后续的归档方法\n#创建中间普遍表\ncreate table ota_order_mid like ota_order;\n#交换原表无效数据分区到普通表\nalter table ota_order exchange partition p201808 with table ota_order_mid; \n##交换普通表数据到归档表的相应分区\nalter table ota_order_bak exchange partition p201808 with table ota_order_mid; \n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n<li>17</li>\n<li>18</li>\n<li>19</li>\n<li>20</li>\n<li>21</li>\n<li>22</li>\n<li>23</li>\n<li>24</li>\n<li>25</li>\n<li>26</li>\n<li>27</li>\n<li>28</li>\n<li>29</li>\n<li>30</li>\n<li>31</li>\n<li>32</li>\n<li>33</li>\n<li>34</li>\n<li>35</li>\n<li>36</li>\n<li>37</li>\n<li>38</li>\n</ul>\n<p>这样原表和归档表都是按月的分区表，只需要创建一个中间普通表，在业务低峰期做两次分区交换，既可以删除无效数据，又能回收空，而且没有空间碎片，不会影响表上的索引及SQL的执行计划。</p>\n<h2><a name=\"t20\"></a><a name=\"t20\"></a><a id=\"_514\"></a>总结</h2>\n<p>通过从InnoDB存储空间分布，delete对性能的影响可以看到，delete物理删除既不能释放磁盘空间，而且会产生大量的碎片，导致索引频繁分裂，影响SQL执行计划的稳定性；</p>\n<p>同时在碎片回收时，会耗用大量的CPU，磁盘空间，影响表上正常的DML操作。</p>\n<p>在业务代码层面，应该做逻辑标记删除，避免物理删除；为了实现数据归档需求，可以用采用MySQL分区表特性来实现，都是DDL操作，没有碎片产生。</p>\n<p>另外一个比较好的方案采用Clickhouse，对有生命周期的数据表可以使用Clickhouse存储，利用其TTL特性实现无效数据自动清理。</p>\n<p>&nbsp;</p>","blogGoods":0,"blogId":"1330877084339478528","blogRead":0,"blogRemark":"aaaaa","blogTitle":"","blogType":1,"createdTime":1606111997000,"version":1},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 22:15:06.746 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 22:15:29.835 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlBlogMapper.getById.debug:159 -==>  Preparing: select blog_id, blog_title, blog_content, blog_goods, blog_image, blog_read, blog_collection, blog_type, blog_remark, blog_comment, blog_source, created_time, version from bl_blog where blog_id = ? and deleted = 0 
2020-11-23 22:15:29.836 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlBlogMapper.getById.debug:159 -==> Parameters: 1330877080455553024(String)
2020-11-23 22:15:29.914 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlBlogMapper.getById.debug:159 -<==      Total: 1
2020-11-23 22:15:29.956 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 22:15:29.959 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/get/1330877080455553024(String), [1330877080455553024](String), 1(Integer), null, GET(String), 125(Long), {"code":20000,"data":{"blogCollection":0,"blogComment":0,"blogContent":"<h2>前言</h2>\n<p>我负责的有几个系统随着业务量的增长，存储在MySQL中的数据日益剧增，我当时就想现在的业务方不讲武德，搞偷袭，趁我没反应过来把很多表，很快，很快啊都打到了亿级别，我大意了，没有闪，这就导致跟其Join的表的SQL变得很慢，对的应用接口的response time也变长了，影响了用户体验。</p>\n<p>事后我找到业务方，我批评了他们跟他们说要讲武德，连忙跟我道歉，这个事情才就此作罢，走的时候我对他们说下次不要这样了，耗子尾汁，好好反思。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/3c93aececcb9e763f5476362c4e88710.png\" alt=\"\" /></p>\n<p>骂归骂，事情还是得解决，时候我分析原因发现，发现有些表的数据量增长很快，对应SQL扫描了很多无效数据，导致SQL慢了下来，通过确认之后，这些大表都是一些流水、记录、日志类型数据，只需要保留1到3个月，此时需要对表做数据清理实现瘦身，一般都会想到用insert + delete的方式去清理。</p>\n<p>这篇文章我会从InnoDB存储空间分布，delete对性能的影响，以及优化建议方面解释为什么不建议delete删除数据。</p>\n<h2><a name=\"t1\"></a><a name=\"t1\"></a><a id=\"InnoDB_16\"></a>InnoDB存储架构</h2>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/5c66ffe9749c58e1613d2519f7ea7211.png\" alt=\"\" /></p>\n<p>从这张图可以看到，InnoDB存储结构主要包括两部分：逻辑存储结构和物理存储结构。</p>\n<p>逻辑上是由表空间tablespace &mdash;&gt; 段segment或者inode &mdash;&gt; 区Extent &mdash;&mdash;&gt;数据页Page构成，Innodb逻辑管理单位是segment，空间分配的最小单位是extent，每个segment都会从表空间FREE_PAGE中分配32个page，当这32个page不够用时，会按照以下原则进行扩展：如果当前小于1个extent，则扩展到1个extent；当表空间小于32MB时，每次扩展一个extent；表空间大于32MB，每次扩展4个extent。</p>\n<p>物理上主要由系统用户数据文件，日志文件组成，数据文件主要存储MySQL字典数据和用户数据，日志文件记录的是data page的变更记录，用于MySQL Crash时的恢复。</p>\n<h2><a name=\"t2\"></a><a name=\"t2\"></a><a id=\"Innodb_26\"></a>Innodb表空间</h2>\n<p>InnoDB存储包括三类表空间：系统表空间，用户表空间，Undo表空间。</p>\n<p><strong>系统表空间：</strong>&nbsp;主要存储MySQL内部的数据字典数据，如information_schema下的数据。</p>\n<p><strong>用户表空间：</strong>&nbsp;当开启innodb_file_per_table=1时，数据表从系统表空间独立出来存储在以table_name.ibd命令的数据文件中，结构信息存储在table_name.frm文件中。</p>\n<p><strong>Undo表空间：</strong>&nbsp;存储Undo信息，如快照一致读和flashback都是利用undo信息。</p>\n<p>从MySQL 8.0开始允许用户自定义表空间，具体语法如下：</p>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">CREATE TABLESPACE tablespace_name\n    ADD DATAFILE 'file_name'               #数据文件名\n    USE LOGFILE GROUP logfile_group        #自定义日志文件组，一般每组2个logfile。\n    [EXTENT_SIZE [=] extent_size]          #区大小\n    [INITIAL_SIZE [=] initial_size]        #初始化大小 \n    [AUTOEXTEND_SIZE [=] autoextend_size]  #自动扩宽尺寸\n    [MAX_SIZE [=] max_size]                #单个文件最大size，最大是32G。\n    [NODEGROUP [=] nodegroup_id]           #节点组\n    [WAIT]\n    [COMMENT [=] comment_text]\n    ENGINE [=] engine_name\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n</ul>\n<p>这样的好处是可以做到数据的冷热分离，分别用HDD和SSD来存储，既能实现数据的高效访问，又能节约成本，比如可以添加两块500G硬盘，经过创建卷组vg，划分逻辑卷lv，创建数据目录并mount相应的lv，假设划分的两个目录分别是/hot_data 和 /cold_data。</p>\n<p>这样就可以将核心的业务表如用户表，订单表存储在高性能SSD盘上，一些日志，流水表存储在普通的HDD上，主要的操作步骤如下：</p>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">#创建热数据表空间\ncreate tablespace tbs_data_hot add datafile '/hot_data/tbs_data_hot01.dbf' max_size 20G;\n#创建核心业务表存储在热数据表空间\ncreate table booking(id bigint not null primary key auto_increment, &hellip;&hellip; ) tablespace tbs_data_hot;\n#创建冷数据表空间\ncreate tablespace tbs_data_cold add datafile '/hot_data/tbs_data_cold01.dbf' max_size 20G;\n#创建日志，流水，备份类的表存储在冷数据表空间\ncreate table payment_log(id bigint not null primary key auto_increment, &hellip;&hellip; ) tablespace tbs_data_cold;\n#可以移动表到另一个表空间\nalter table payment_log tablespace tbs_data_hot;\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n</ul>\n<h2><a name=\"t3\"></a><a name=\"t3\"></a><a id=\"Inndob_69\"></a>Inndob存储分布</h2>\n<h3><a name=\"t4\"></a><a name=\"t4\"></a><a id=\"_71\"></a>创建空表查看空间变化</h3>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">mysql&gt; create table user(id bigint not null primary key auto_increment, \n    -&gt; name varchar(20) not null default '' comment '姓名', \n    -&gt; age tinyint not null default 0 comment 'age', \n    -&gt; gender char(1) not null default 'M'  comment '性别',\n    -&gt; phone varchar(16) not null default '' comment '手机号',\n    -&gt; create_time datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',\n    -&gt; update_time datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间'\n    -&gt; ) engine = InnoDB DEFAULT CHARSET=utf8mb4 COMMENT '用户信息表';\nQuery OK, 0 rows affected (0.26 sec)\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n</ul>\n<pre class=\"prettyprint\"><code class=\"prism language-bash has-numbering\"><span class=\"token comment\"># ls -lh user1.ibd </span>\n-rw-r----- 1 mysql mysql 96K Nov  6 12:48 user.ibd\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n</ul>\n<p>设置参数innodb_file_per_table=1时，创建表时会自动创建一个segment，同时分配一个extent，包含32个data page的来存储数据，这样创建的空表默认大小就是96KB，extent使用完之后会申请64个连接页，这样对于一些小表，或者undo segment，可以在开始时申请较少的空间，节省磁盘容量的开销。</p>\n<pre class=\"prettyprint\"><code class=\"prism language-shell has-numbering\"><span class=\"token comment\"># python2 py_innodb_page_info.py -v /data2/mysql/test/user.ibd</span>\npage offset 00000000, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>File Space Header<span class=\"token operator\">&gt;</span>\npage offset 00000001, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>Insert Buffer Bitmap<span class=\"token operator\">&gt;</span>\npage offset 00000002, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>File Segment inode<span class=\"token operator\">&gt;</span>\npage offset 00000003, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>B-tree Node<span class=\"token operator\">&gt;</span>, page level <span class=\"token operator\">&lt;</span>0000<span class=\"token operator\">&gt;</span>\npage offset 00000000, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>Freshly Allocated Page<span class=\"token operator\">&gt;</span>\npage offset 00000000, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>Freshly Allocated Page<span class=\"token operator\">&gt;</span>\nTotal number of page: 6:      <span class=\"token comment\">#总共分配的页数</span>\nFreshly Allocated Page: 2     <span class=\"token comment\">#可用的数据页</span>\nInsert Buffer Bitmap: 1       <span class=\"token comment\">#插入缓冲页</span>\nFile Space Header: 1          <span class=\"token comment\">#文件空间头</span>\nB-tree Node: 1                <span class=\"token comment\">#数据页</span>\nFile Segment inode: 1         <span class=\"token comment\">#文件端inonde，如果是在ibdata1.ibd上会有多个inode。</span>\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n</ul>\n<h3><a name=\"t5\"></a><a name=\"t5\"></a><a id=\"_108\"></a>插入数据后的空间变化</h3>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">mysql&gt; DELIMITER $$\nmysql&gt; CREATE PROCEDURE insert_user_data(num INTEGER) \n    -&gt; BEGIN\n    -&gt;     DECLARE v_i int unsigned DEFAULT 0;\n    -&gt; set autocommit= 0;\n    -&gt; WHILE v_i &lt; num DO\n    -&gt;    insert into user(`name`, age, gender, phone) values (CONCAT('lyn',v_i), mod(v_i,120), 'M', CONCAT('152',ROUND(RAND(1)*100000000)));\n    -&gt;  SET v_i = v_i+1;\n    -&gt; END WHILE;\n    -&gt; commit;\n    -&gt; END $$\nQuery OK, 0 rows affected (0.01 sec)\nmysql&gt; DELIMITER ;\n\n#插入10w数据\nmysql&gt; call insert_user_data(100000);\nQuery OK, 0 rows affected (6.69 sec)\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n<li>17</li>\n</ul>\n<pre class=\"prettyprint\"><code class=\"prism language-shell has-numbering\"><span class=\"token comment\"># ls -lh user.ibd</span>\n-rw-r----- 1 mysql mysql 14M Nov 6 10:58 /data2/mysql/test/user.ibd\n\n<span class=\"token comment\"># python2 py_innodb_page_info.py -v /data2/mysql/test/user.ibd</span>\npage offset 00000000, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>File Space Header<span class=\"token operator\">&gt;</span>\npage offset 00000001, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>Insert Buffer Bitmap<span class=\"token operator\">&gt;</span>\npage offset 00000002, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>File Segment inode<span class=\"token operator\">&gt;</span>\npage offset 00000003, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>B-tree Node<span class=\"token operator\">&gt;</span>, page level <span class=\"token operator\">&lt;</span>0001<span class=\"token operator\">&gt;</span>   <span class=\"token comment\">#增加了一个非叶子节点，树的高度从1变为2.</span>\n<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>\npage offset 00000000, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>Freshly Allocated Page<span class=\"token operator\">&gt;</span>\nTotal number of page: 896:\nFreshly Allocated Page: 493\nInsert Buffer Bitmap: 1\nFile Space Header: 1\nB-tree Node: 400\nFile Segment inode: 1\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n</ul>\n<h3><a name=\"t6\"></a><a name=\"t6\"></a><a id=\"delete_149\"></a>delete数据后的空间变化</h3>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">mysql&gt; select min(id),max(id),count(*) from user;\n+---------+---------+----------+\n| min(id) | max(id) | count(*) |\n+---------+---------+----------+\n|       1 |  100000 |   100000 |\n+---------+---------+----------+\n1 row in set (0.05 sec)\n#删除50000条数据，理论上空间应该从14MB变长7MB左右。\nmysql&gt; delete from user limit 50000;\nQuery OK, 50000 rows affected (0.25 sec)\n\n#数据文件大小依然是14MB，没有缩小。\n# ls -lh /data2/mysql/test/user1.ibd \n-rw-r----- 1 mysql mysql 14M Nov  6 13:22 /data2/mysql/test/user.ibd\n\n#数据页没有被回收。\n# python2 py_innodb_page_info.py -v /data2/mysql/test/user.ibd\npage offset 00000000, page type &lt;File Space Header&gt;\npage offset 00000001, page type &lt;Insert Buffer Bitmap&gt;\npage offset 00000002, page type &lt;File Segment inode&gt;\npage offset 00000003, page type &lt;B-tree Node&gt;, page level &lt;0001&gt;\n........................................................\npage offset 00000000, page type &lt;Freshly Allocated Page&gt;\nTotal number of page: 896:\nFreshly Allocated Page: 493\nInsert Buffer Bitmap: 1\nFile Space Header: 1\nB-tree Node: 400\nFile Segment inode: 1\n#在MySQL内部是标记删除，\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n<li>17</li>\n<li>18</li>\n<li>19</li>\n<li>20</li>\n<li>21</li>\n<li>22</li>\n<li>23</li>\n<li>24</li>\n<li>25</li>\n<li>26</li>\n<li>27</li>\n<li>28</li>\n<li>29</li>\n<li>30</li>\n</ul>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">mysql&gt; use information_schema;\n\nDatabase changed\nmysql&gt; SELECT A.SPACE AS TBL_SPACEID, A.TABLE_ID, A.NAME AS TABLE_NAME, FILE_FORMAT, ROW_FORMAT, SPACE_TYPE,  B.INDEX_ID , B.NAME AS INDEX_NAME, PAGE_NO, B.TYPE AS INDEX_TYPE FROM INNODB_SYS_TABLES A LEFT JOIN INNODB_SYS_INDEXES B ON A.TABLE_ID =B.TABLE_ID WHERE A.NAME = 'test/user1';\n+-------------+----------+------------+-------------+------------+------------+----------+------------+---------+------------+\n| TBL_SPACEID | TABLE_ID | TABLE_NAME | FILE_FORMAT | ROW_FORMAT | SPACE_TYPE | INDEX_ID | INDEX_NAME | PAGE_NO | INDEX_TYPE |\n+-------------+----------+------------+-------------+------------+------------+----------+------------+---------+------------+\n|        1283 |     1207 | test/user | Barracuda   | Dynamic    | Single     |     2236 | PRIMARY    |       3 |          3 |\n+-------------+----------+------------+-------------+------------+------------+----------+------------+---------+------------+\n1 row in set (0.01 sec)\n\nPAGE_NO = 3 标识B-tree的root page是3号页，INDEX_TYPE = 3是聚集索引。 INDEX_TYPE取值如下：\n0 = nonunique secondary index; \n1 = automatically generated clustered index (GEN_CLUST_INDEX); \n2 = unique nonclustered index; \n3 = clustered index; \n32 = full-text index;\n#收缩空间再后进行观察\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n<li>17</li>\n<li>18</li>\n</ul>\n<p>MySQL内部不会真正删除空间，而且做标记删除，即将delflag:N修改为delflag:Y，commit之后会会被purge进入删除链表，如果下一次insert更大的记录，delete之后的空间不会被重用，如果插入的记录小于等于delete的记录空会被重用，这块内容可以通过知数堂的innblock工具进行分析。</p>\n<h2><a name=\"t7\"></a><a name=\"t7\"></a><a id=\"Innodb_207\"></a>Innodb中的碎片</h2>\n<h3><a name=\"t8\"></a><a name=\"t8\"></a><a id=\"_209\"></a>碎片的产生</h3>\n<p>我们知道数据存储在文件系统上的，总是不能100%利用分配给它的物理空间，删除数据会在页面上留下一些&rdquo;空洞&rdquo;，或者随机写入（聚集索引非线性增加）会导致页分裂，页分裂导致页面的利用空间少于50%，另外对表进行增删改会引起对应的二级索引值的随机的增删改，也会导致索引结构中的数据页面上留下一些\"空洞\"，虽然这些空洞有可能会被重复利用，但终究会导致部分物理空间未被使用，也就是碎片。</p>\n<p>同时，即便是设置了填充因子为100%，Innodb也会主动留下page页面1/16的空间作为预留使用（An innodb_fill_factor setting of 100 leaves 1/16 of the space in clustered index pages free for future index growth）防止update带来的行溢出。</p>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">mysql&gt; select table_schema,\n    -&gt;        table_name,ENGINE,\n    -&gt;        round(DATA_LENGTH/1024/1024+ INDEX_LENGTH/1024/1024) total_mb,TABLE_ROWS,\n    -&gt;        round(DATA_LENGTH/1024/1024) data_mb, round(INDEX_LENGTH/1024/1024) index_mb, round(DATA_FREE/1024/1024) free_mb, round(DATA_FREE/DATA_LENGTH*100,2) free_ratio\n    -&gt; from information_schema.TABLES where  TABLE_SCHEMA= 'test'\n    -&gt; and TABLE_NAME= 'user';\n+--------------+------------+--------+----------+------------+---------+----------+---------+------------+\n| table_schema | table_name | ENGINE | total_mb | TABLE_ROWS | data_mb | index_mb | free_mb | free_ratio |\n+--------------+------------+--------+----------+------------+---------+----------+---------+------------+\n| test         | user      | InnoDB |        4 |      50000 |       4 |        0 |       6 |     149.42 |\n+--------------+------------+--------+----------+------------+---------+----------+---------+------------+\n1 row in set (0.00 sec)\n\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n</ul>\n<p>其中data_free是分配了未使用的字节数，并不能说明完全是碎片空间。</p>\n<h3><a name=\"t9\"></a><a name=\"t9\"></a><a id=\"_233\"></a>碎片的回收</h3>\n<p>对于InnoDB的表，可以通过以下命令来回收碎片，释放空间，这个是随机读IO操作，会比较耗时，也会阻塞表上正常的DML运行，同时需要占用额外更多的磁盘空间，对于RDS来说，可能会导致磁盘空间瞬间爆满，实例瞬间被锁定，应用无法做DML操作，所以禁止在线上环境去执行。</p>\n<pre class=\"prettyprint\"><code class=\"prism language-shell has-numbering\"><span class=\"token comment\">#执行InnoDB的碎片回收</span>\nmysql<span class=\"token operator\">&gt;</span> alter table user engine<span class=\"token operator\">=</span>InnoDB<span class=\"token punctuation\">;</span>\nQuery OK, 0 rows affected <span class=\"token punctuation\">(</span>9.00 sec<span class=\"token punctuation\">)</span>\nRecords: 0  Duplicates: 0  Warnings: 0\n\n<span class=\"token comment\">##执行完之后，数据文件大小从14MB降低到10M。</span>\n<span class=\"token comment\"># ls -lh /data2/mysql/test/user1.ibd </span>\n-rw-r----- 1 mysql mysql 10M Nov 6 16:18 /data2/mysql/test/user.ibd\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n</ul>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">mysql&gt; select table_schema,        table_name,ENGINE,        round(DATA_LENGTH/1024/1024+ INDEX_LENGTH/1024/1024) total_mb,TABLE_ROWS,        round(DATA_LENGTH/1024/1024) data_mb, round(INDEX_LENGTH/1024/1024) index_mb, round(DATA_FREE/1024/1024) free_mb, round(DATA_FREE/DATA_LENGTH*100,2) free_ratio from information_schema.TABLES where  TABLE_SCHEMA= 'test' and TABLE_NAME= 'user';\n+--------------+------------+--------+----------+------------+---------+----------+---------+------------+\n| table_schema | table_name | ENGINE | total_mb | TABLE_ROWS | data_mb | index_mb | free_mb | free_ratio |\n+--------------+------------+--------+----------+------------+---------+----------+---------+------------+\n| test         | user      | InnoDB |        5 |      50000 |       5 |        0 |       2 |      44.29 |\n+--------------+------------+--------+----------+------------+---------+----------+---------+------------+\n1 row in set (0.00 sec)\n\n\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n</ul>\n<h2><a name=\"t10\"></a><a name=\"t10\"></a><a id=\"deleteSQL_260\"></a>delete对SQL的影响</h2>\n<h3><a name=\"t11\"></a><a name=\"t11\"></a><a id=\"SQL_262\"></a>未删除前的SQL执行情况</h3>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">#插入100W数据\nmysql&gt; call insert_user_data(1000000);\nQuery OK, 0 rows affected (35.99 sec)\n\n#添加相关索引\nmysql&gt; alter table user add index idx_name(name), add index idx_phone(phone);\nQuery OK, 0 rows affected (6.00 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\n#表上索引统计信息\nmysql&gt; show index from user;\n+-------+------------+-----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+\n| Table | Non_unique | Key_name  | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment |\n+-------+------------+-----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+\n| user  |          0 | PRIMARY   |            1 | id          | A         |      996757 |     NULL | NULL   |      | BTREE      |         |               |\n| user  |          1 | idx_name  |            1 | name        | A         |      996757 |     NULL | NULL   |      | BTREE      |         |               |\n| user  |          1 | idx_phone |            1 | phone       | A         |           2 |     NULL | NULL   |      | BTREE      |         |               |\n+-------+------------+-----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+\n3 rows in set (0.00 sec)\n\n#重置状态变量计数\nmysql&gt; flush status;\nQuery OK, 0 rows affected (0.00 sec)\n\n#执行SQL语句\nmysql&gt; select id, age ,phone from user where name like 'lyn12%';\n+--------+-----+-------------+\n| id     | age | phone       |\n+--------+-----+-------------+\n|    124 |   3 | 15240540354 |\n|   1231 |  30 | 15240540354 |\n|  12301 |  60 | 15240540354 |\n.............................\n| 129998 |  37 | 15240540354 |\n| 129999 |  38 | 15240540354 |\n| 130000 |  39 | 15240540354 |\n+--------+-----+-------------+\n11111 rows in set (0.03 sec)\n\nmysql&gt; explain select id, age ,phone from user where name like 'lyn12%';\n+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+\n| id | select_type | table | type  | possible_keys | key      | key_len | ref  | rows  | Extra                 |\n+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+\n|  1 | SIMPLE      | user  | range | idx_name      | idx_name | 82      | NULL | 22226 | Using index condition |\n+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+\n1 row in set (0.00 sec)\n\n#查看相关状态呢变量\nmysql&gt; select * from information_schema.session_status where variable_name in('Last_query_cost','Handler_read_next','Innodb_pages_read','Innodb_data_reads','Innodb_pages_read');\n+-------------------+----------------+\n| VARIABLE_NAME     | VARIABLE_VALUE |\n+-------------------+----------------+\n| HANDLER_READ_NEXT | 11111          |    #请求读的行数\n| INNODB_DATA_READS | 7868409        |    #数据物理读的总数\n| INNODB_PAGES_READ | 7855239        |    #逻辑读的总数\n| LAST_QUERY_COST   | 10.499000      |    #SQL语句的成本COST，主要包括IO_COST和CPU_COST。\n+-------------------+----------------+\n4 rows in set (0.00 sec)\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n<li>17</li>\n<li>18</li>\n<li>19</li>\n<li>20</li>\n<li>21</li>\n<li>22</li>\n<li>23</li>\n<li>24</li>\n<li>25</li>\n<li>26</li>\n<li>27</li>\n<li>28</li>\n<li>29</li>\n<li>30</li>\n<li>31</li>\n<li>32</li>\n<li>33</li>\n<li>34</li>\n<li>35</li>\n<li>36</li>\n<li>37</li>\n<li>38</li>\n<li>39</li>\n<li>40</li>\n<li>41</li>\n<li>42</li>\n<li>43</li>\n<li>44</li>\n<li>45</li>\n<li>46</li>\n<li>47</li>\n<li>48</li>\n<li>49</li>\n<li>50</li>\n<li>51</li>\n<li>52</li>\n<li>53</li>\n<li>54</li>\n<li>55</li>\n<li>56</li>\n<li>57</li>\n<li>58</li>\n</ul>\n<h3><a name=\"t12\"></a><a name=\"t12\"></a><a id=\"SQL_325\"></a>删除后的SQL执行情况</h3>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">#删除50w数据\nmysql&gt; delete from user limit 500000;\nQuery OK, 500000 rows affected (3.70 sec)\n\n#分析表统计信息\nmysql&gt; analyze table user;\n+-----------+---------+----------+----------+\n| Table     | Op      | Msg_type | Msg_text |\n+-----------+---------+----------+----------+\n| test.user | analyze | status   | OK       |\n+-----------+---------+----------+----------+\n1 row in set (0.01 sec)\n\n#重置状态变量计数\nmysql&gt; flush status;\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql&gt; select id, age ,phone from user where name like 'lyn12%';\nEmpty set (0.05 sec)\n\nmysql&gt; explain select id, age ,phone from user where name like 'lyn12%';\n+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+\n| id | select_type | table | type  | possible_keys | key      | key_len | ref  | rows  | Extra                 |\n+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+\n|  1 | SIMPLE      | user  | range | idx_name      | idx_name | 82      | NULL | 22226 | Using index condition |\n+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+\n1 row in set (0.00 sec)\n\nmysql&gt; select * from information_schema.session_status where variable_name in('Last_query_cost','Handler_read_next','Innodb_pages_read','Innodb_data_reads','Innodb_pages_read');\n+-------------------+----------------+\n| VARIABLE_NAME     | VARIABLE_VALUE |\n+-------------------+----------------+\n| HANDLER_READ_NEXT | 0              |\n| INNODB_DATA_READS | 7868409        |\n| INNODB_PAGES_READ | 7855239        |\n| LAST_QUERY_COST   | 10.499000      |\n+-------------------+----------------+\n4 rows in set (0.00 sec)\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n<li>17</li>\n<li>18</li>\n<li>19</li>\n<li>20</li>\n<li>21</li>\n<li>22</li>\n<li>23</li>\n<li>24</li>\n<li>25</li>\n<li>26</li>\n<li>27</li>\n<li>28</li>\n<li>29</li>\n<li>30</li>\n<li>31</li>\n<li>32</li>\n<li>33</li>\n<li>34</li>\n<li>35</li>\n<li>36</li>\n<li>37</li>\n<li>38</li>\n</ul>\n<h3><a name=\"t13\"></a><a name=\"t13\"></a><a id=\"_368\"></a>结果统计分析</h3>\n<div class=\"table-box\">\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>COST</th>\n<th>物理读次数</th>\n<th>逻辑读次数</th>\n<th>扫描行数</th>\n<th>返回行数</th>\n<th>执行时间</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>初始化插入100W</td>\n<td>10.499000</td>\n<td>7868409</td>\n<td>7855239</td>\n<td>22226</td>\n<td>11111</td>\n<td>30ms</td>\n</tr>\n<tr>\n<td>100W随机删除50W</td>\n<td>10.499000</td>\n<td>7868409</td>\n<td>7855239</td>\n<td>22226</td>\n<td>0</td>\n<td>50ms</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>这也说明对普通的大表，想要通过delete数据来对表进行瘦身是不现实的，所以在任何时候不要用delete去删除数据，应该使用优雅的标记删除。</p>\n<h2><a name=\"t14\"></a><a name=\"t14\"></a><a id=\"delete_377\"></a>delete优化建议</h2>\n<h3><a name=\"t15\"></a><a name=\"t15\"></a><a id=\"_379\"></a>控制业务账号权限</h3>\n<p>对于一个大的系统来说，需要根据业务特点去拆分子系统，每个子系统可以看做是一个service，例如美团APP，上面有很多服务，核心的服务有用户服务user-service，搜索服务search-service，商品product-service，位置服务location-service，价格服务price-service等。每个服务对应一个数据库，为该数据库创建单独账号，同时只授予DML权限且没有delete权限，同时禁止跨库访问。</p>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">#创建用户数据库并授权\ncreate database mt_user charset utf8mb4;\ngrant USAGE, SELECT, INSERT, UPDATE ON mt_user.*  to 'w_user'@'%' identified by 't$W*g@gaHTGi123456';\nflush privileges;\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n</ul>\n<h3><a name=\"t16\"></a><a name=\"t16\"></a><a id=\"delete_390\"></a>delete改为标记删除</h3>\n<p>在MySQL数据库建模规范中有4个公共字段，基本上每个表必须有的，同时在create_time列要创建索引，有两方面的好处：</p>\n<ol>\n<li>一些查询业务场景都会有一个默认的时间段，比如7天或者一个月，都是通过create_time去过滤，走索引扫描更快。</li>\n<li>一些核心的业务表需要以T +1的方式抽取数据仓库中，比如每天晚上00:30抽取前一天的数据，都是通过create_time过滤的。</li>\n</ol>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">`id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '主键id',\n`is_deleted` tinyint(4) NOT NULL DEFAULT '0' COMMENT '是否逻辑删除：0：未删除，1：已删除',\n`create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',\n`update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间'\n\n#有了删除标记，业务接口的delete操作就可以转换为update\nupdate user set is_deleted = 1 where user_id = 1213;\n\n#查询的时候需要带上is_deleted过滤\nselect id, age ,phone from user where is_deleted = 0 and name like 'lyn12%';\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n</ul>\n<h2><a name=\"t17\"></a><a name=\"t17\"></a><a id=\"_410\"></a>数据归档方式</h2>\n<h3><a name=\"t18\"></a><a name=\"t18\"></a><a id=\"_412\"></a>通用数据归档方法</h3>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">#1. 创建归档表，一般在原表名后面添加_bak。\nCREATE TABLE `ota_order_bak` (\n  `id` bigint(11) NOT NULL AUTO_INCREMENT COMMENT '主键',\n  `order_id` varchar(255) DEFAULT NULL COMMENT '订单id',\n  `ota_id` varchar(255) DEFAULT NULL COMMENT 'ota',\n  `check_in_date` varchar(255) DEFAULT NULL COMMENT '入住日期',\n  `check_out_date` varchar(255) DEFAULT NULL COMMENT '离店日期',\n  `hotel_id` varchar(255) DEFAULT NULL COMMENT '酒店ID',\n  `guest_name` varchar(255) DEFAULT NULL COMMENT '顾客',\n  `purcharse_time` timestamp NULL DEFAULT NULL COMMENT '购买时间',\n  `create_time` datetime DEFAULT NULL,\n  `update_time` datetime DEFAULT NULL,\n  `create_user` varchar(255) DEFAULT NULL,\n  `update_user` varchar(255) DEFAULT NULL,\n  `status` int(4) DEFAULT '1' COMMENT '状态 ： 1 正常 ， 0 删除',\n  `hotel_name` varchar(255) DEFAULT NULL,\n  `price` decimal(10,0) DEFAULT NULL,\n  `remark` longtext,\n  PRIMARY KEY (`id`),\n  KEY `IDX_order_id` (`order_id`) USING BTREE,\n  KEY `hotel_name` (`hotel_name`) USING BTREE,\n  KEY `ota_id` (`ota_id`) USING BTREE,\n  KEY `IDX_purcharse_time` (`purcharse_time`) USING BTREE,\n  KEY `IDX_create_time` (`create_time`) USING BTREE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\nPARTITION BY RANGE (to_days(create_time)) ( \nPARTITION p201808 VALUES LESS THAN (to_days('2018-09-01')), \nPARTITION p201809 VALUES LESS THAN (to_days('2018-10-01')), \nPARTITION p201810 VALUES LESS THAN (to_days('2018-11-01')), \nPARTITION p201811 VALUES LESS THAN (to_days('2018-12-01')), \nPARTITION p201812 VALUES LESS THAN (to_days('2019-01-01')), \nPARTITION p201901 VALUES LESS THAN (to_days('2019-02-01')), \nPARTITION p201902 VALUES LESS THAN (to_days('2019-03-01')), \nPARTITION p201903 VALUES LESS THAN (to_days('2019-04-01')), \nPARTITION p201904 VALUES LESS THAN (to_days('2019-05-01')), \nPARTITION p201905 VALUES LESS THAN (to_days('2019-06-01')), \nPARTITION p201906 VALUES LESS THAN (to_days('2019-07-01')), \nPARTITION p201907 VALUES LESS THAN (to_days('2019-08-01')), \nPARTITION p201908 VALUES LESS THAN (to_days('2019-09-01')), \nPARTITION p201909 VALUES LESS THAN (to_days('2019-10-01')), \nPARTITION p201910 VALUES LESS THAN (to_days('2019-11-01')), \nPARTITION p201911 VALUES LESS THAN (to_days('2019-12-01')), \nPARTITION p201912 VALUES LESS THAN (to_days('2020-01-01')));\n\n#2. 插入原表中无效的数据（需要跟开发同学确认数据保留范围）\ncreate table tbl_p201808 as select * from ota_order where create_time between '2018-08-01 00:00:00' and '2018-08-31 23:59:59';\n\n#3. 跟归档表分区做分区交换\nalter table ota_order_bak exchange partition p201808 with table tbl_p201808; \n\n#4. 删除原表中已经规范的数据\ndelete from ota_order where create_time between '2018-08-01 00:00:00' and '2018-08-31 23:59:59' limit 3000;\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n<li>17</li>\n<li>18</li>\n<li>19</li>\n<li>20</li>\n<li>21</li>\n<li>22</li>\n<li>23</li>\n<li>24</li>\n<li>25</li>\n<li>26</li>\n<li>27</li>\n<li>28</li>\n<li>29</li>\n<li>30</li>\n<li>31</li>\n<li>32</li>\n<li>33</li>\n<li>34</li>\n<li>35</li>\n<li>36</li>\n<li>37</li>\n<li>38</li>\n<li>39</li>\n<li>40</li>\n<li>41</li>\n<li>42</li>\n<li>43</li>\n<li>44</li>\n<li>45</li>\n<li>46</li>\n<li>47</li>\n<li>48</li>\n<li>49</li>\n<li>50</li>\n<li>51</li>\n<li>52</li>\n</ul>\n<h3><a name=\"t19\"></a><a name=\"t19\"></a><a id=\"_469\"></a>优化后的归档方式</h3>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">#1. 创建中间表\nCREATE TABLE `ota_order_2020` (........) ENGINE=InnoDB DEFAULT CHARSET=utf8\nPARTITION BY RANGE (to_days(create_time)) ( \nPARTITION p201808 VALUES LESS THAN (to_days('2018-09-01')), \nPARTITION p201809 VALUES LESS THAN (to_days('2018-10-01')), \nPARTITION p201810 VALUES LESS THAN (to_days('2018-11-01')), \nPARTITION p201811 VALUES LESS THAN (to_days('2018-12-01')), \nPARTITION p201812 VALUES LESS THAN (to_days('2019-01-01')), \nPARTITION p201901 VALUES LESS THAN (to_days('2019-02-01')), \nPARTITION p201902 VALUES LESS THAN (to_days('2019-03-01')), \nPARTITION p201903 VALUES LESS THAN (to_days('2019-04-01')), \nPARTITION p201904 VALUES LESS THAN (to_days('2019-05-01')), \nPARTITION p201905 VALUES LESS THAN (to_days('2019-06-01')), \nPARTITION p201906 VALUES LESS THAN (to_days('2019-07-01')), \nPARTITION p201907 VALUES LESS THAN (to_days('2019-08-01')), \nPARTITION p201908 VALUES LESS THAN (to_days('2019-09-01')), \nPARTITION p201909 VALUES LESS THAN (to_days('2019-10-01')), \nPARTITION p201910 VALUES LESS THAN (to_days('2019-11-01')), \nPARTITION p201911 VALUES LESS THAN (to_days('2019-12-01')), \nPARTITION p201912 VALUES LESS THAN (to_days('2020-01-01')));\n\n#2. 插入原表中有效的数据，如果数据量在100W左右可以在业务低峰期直接插入，如果比较大，建议采用dataX来做，可以控制频率和大小，之前我这边用Go封装了dataX可以实现自动生成json文件，自定义大小去执行。\ninsert into ota_order_2020 select * from ota_order where create_time between '2020-08-01 00:00:00' and '2020-08-31 23:59:59';\n\n#3. 表重命名\nalter table ota_order rename to ota_order_bak;  \nalter table ota_order_2020 rename to ota_order;\n#4. 插入差异数据\ninsert into ota_order select * from ota_order_bak a where not exists (select 1 from ota_order b where a.id = b.id);\n#5. ota_order_bak改造成分区表，如果表比较大不建议直接改造，可以先创建好分区表，通过dataX把导入进去即可。\n\n#6. 后续的归档方法\n#创建中间普遍表\ncreate table ota_order_mid like ota_order;\n#交换原表无效数据分区到普通表\nalter table ota_order exchange partition p201808 with table ota_order_mid; \n##交换普通表数据到归档表的相应分区\nalter table ota_order_bak exchange partition p201808 with table ota_order_mid; \n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n<li>17</li>\n<li>18</li>\n<li>19</li>\n<li>20</li>\n<li>21</li>\n<li>22</li>\n<li>23</li>\n<li>24</li>\n<li>25</li>\n<li>26</li>\n<li>27</li>\n<li>28</li>\n<li>29</li>\n<li>30</li>\n<li>31</li>\n<li>32</li>\n<li>33</li>\n<li>34</li>\n<li>35</li>\n<li>36</li>\n<li>37</li>\n<li>38</li>\n</ul>\n<p>这样原表和归档表都是按月的分区表，只需要创建一个中间普通表，在业务低峰期做两次分区交换，既可以删除无效数据，又能回收空，而且没有空间碎片，不会影响表上的索引及SQL的执行计划。</p>\n<h2><a name=\"t20\"></a><a name=\"t20\"></a><a id=\"_514\"></a>总结</h2>\n<p>通过从InnoDB存储空间分布，delete对性能的影响可以看到，delete物理删除既不能释放磁盘空间，而且会产生大量的碎片，导致索引频繁分裂，影响SQL执行计划的稳定性；</p>\n<p>同时在碎片回收时，会耗用大量的CPU，磁盘空间，影响表上正常的DML操作。</p>\n<p>在业务代码层面，应该做逻辑标记删除，避免物理删除；为了实现数据归档需求，可以用采用MySQL分区表特性来实现，都是DDL操作，没有碎片产生。</p>\n<p>另外一个比较好的方案采用Clickhouse，对有生命周期的数据表可以使用Clickhouse存储，利用其TTL特性实现无效数据自动清理。</p>\n<p>&nbsp;</p>","blogGoods":0,"blogId":"1330877080455553024","blogRead":0,"blogRemark":"aaaaa","blogTitle":"","blogType":1,"createdTime":1606111996000,"version":1},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 22:15:30.117 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 22:15:40.599 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlBlogMapper.getById.debug:159 -==>  Preparing: select blog_id, blog_title, blog_content, blog_goods, blog_image, blog_read, blog_collection, blog_type, blog_remark, blog_comment, blog_source, created_time, version from bl_blog where blog_id = ? and deleted = 0 
2020-11-23 22:15:40.601 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlBlogMapper.getById.debug:159 -==> Parameters: 1330877080455553024(String)
2020-11-23 22:15:40.674 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlBlogMapper.getById.debug:159 -<==      Total: 1
2020-11-23 22:15:40.680 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlBlogMapper.update.debug:159 -==>  Preparing: update bl_blog set version = version + 1 ,blog_title = ? ,blog_content = ? ,blog_goods = ? ,blog_read = ? ,blog_collection = ? ,blog_type = ? ,blog_remark = ? ,blog_comment = ? where blog_id = ? and version = ? 
2020-11-23 22:15:40.683 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlBlogMapper.update.debug:159 -==> Parameters: 面试官不讲武德问我：为什么MySQL不建议使用delete删除数据？(String), <h2>前言</h2>
<p>我负责的有几个系统随着业务量的增长，存储在MySQL中的数据日益剧增，我当时就想现在的业务方不讲武德，搞偷袭，趁我没反应过来把很多表，很快，很快啊都打到了亿级别，我大意了，没有闪，这就导致跟其Join的表的SQL变得很慢，对的应用接口的response time也变长了，影响了用户体验。</p>
<p>事后我找到业务方，我批评了他们跟他们说要讲武德，连忙跟我道歉，这个事情才就此作罢，走的时候我对他们说下次不要这样了，耗子尾汁，好好反思。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/3c93aececcb9e763f5476362c4e88710.png" alt="" /></p>
<p>骂归骂，事情还是得解决，时候我分析原因发现，发现有些表的数据量增长很快，对应SQL扫描了很多无效数据，导致SQL慢了下来，通过确认之后，这些大表都是一些流水、记录、日志类型数据，只需要保留1到3个月，此时需要对表做数据清理实现瘦身，一般都会想到用insert + delete的方式去清理。</p>
<p>这篇文章我会从InnoDB存储空间分布，delete对性能的影响，以及优化建议方面解释为什么不建议delete删除数据。</p>
<h2><a name="t1"></a><a name="t1"></a><a id="InnoDB_16"></a>InnoDB存储架构</h2>
<p><img src="https://img-blog.csdnimg.cn/img_convert/5c66ffe9749c58e1613d2519f7ea7211.png" alt="" /></p>
<p>从这张图可以看到，InnoDB存储结构主要包括两部分：逻辑存储结构和物理存储结构。</p>
<p>逻辑上是由表空间tablespace &mdash;&gt; 段segment或者inode &mdash;&gt; 区Extent &mdash;&mdash;&gt;数据页Page构成，Innodb逻辑管理单位是segment，空间分配的最小单位是extent，每个segment都会从表空间FREE_PAGE中分配32个page，当这32个page不够用时，会按照以下原则进行扩展：如果当前小于1个extent，则扩展到1个extent；当表空间小于32MB时，每次扩展一个extent；表空间大于32MB，每次扩展4个extent。</p>
<p>物理上主要由系统用户数据文件，日志文件组成，数据文件主要存储MySQL字典数据和用户数据，日志文件记录的是data page的变更记录，用于MySQL Crash时的恢复。</p>
<h2><a name="t2"></a><a name="t2"></a><a id="Innodb_26"></a>Innodb表空间</h2>
<p>InnoDB存储包括三类表空间：系统表空间，用户表空间，Undo表空间。</p>
<p><strong>系统表空间：</strong>&nbsp;主要存储MySQL内部的数据字典数据，如information_schema下的数据。</p>
<p><strong>用户表空间：</strong>&nbsp;当开启innodb_file_per_table=1时，数据表从系统表空间独立出来存储在以table_name.ibd命令的数据文件中，结构信息存储在table_name.frm文件中。</p>
<p><strong>Undo表空间：</strong>&nbsp;存储Undo信息，如快照一致读和flashback都是利用undo信息。</p>
<p>从MySQL 8.0开始允许用户自定义表空间，具体语法如下：</p>
<pre class="prettyprint"><code class="prism language-mysql has-numbering">CREATE TABLESPACE tablespace_name
    ADD DATAFILE 'file_name'               #数据文件名
    USE LOGFILE GROUP logfile_group        #自定义日志文件组，一般每组2个logfile。
    [EXTENT_SIZE [=] extent_size]          #区大小
    [INITIAL_SIZE [=] initial_size]        #初始化大小 
    [AUTOEXTEND_SIZE [=] autoextend_size]  #自动扩宽尺寸
    [MAX_SIZE [=] max_size]                #单个文件最大size，最大是32G。
    [NODEGROUP [=] nodegroup_id]           #节点组
    [WAIT]
    [COMMENT [=] comment_text]
    ENGINE [=] engine_name
</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
<li>9</li>
<li>10</li>
<li>11</li>
</ul>
<p>这样的好处是可以做到数据的冷热分离，分别用HDD和SSD来存储，既能实现数据的高效访问，又能节约成本，比如可以添加两块500G硬盘，经过创建卷组vg，划分逻辑卷lv，创建数据目录并mount相应的lv，假设划分的两个目录分别是/hot_data 和 /cold_data。</p>
<p>这样就可以将核心的业务表如用户表，订单表存储在高性能SSD盘上，一些日志，流水表存储在普通的HDD上，主要的操作步骤如下：</p>
<pre class="prettyprint"><code class="prism language-mysql has-numbering">#创建热数据表空间
create tablespace tbs_data_hot add datafile '/hot_data/tbs_data_hot01.dbf' max_size 20G;
#创建核心业务表存储在热数据表空间
create table booking(id bigint not null primary key auto_increment, &hellip;&hellip; ) tablespace tbs_data_hot;
#创建冷数据表空间
create tablespace tbs_data_cold add datafile '/hot_data/tbs_data_cold01.dbf' max_size 20G;
#创建日志，流水，备份类的表存储在冷数据表空间
create table payment_log(id bigint not null primary key auto_increment, &hellip;&hellip; ) tablespace tbs_data_cold;
#可以移动表到另一个表空间
alter table payment_log tablespace tbs_data_hot;
</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
<li>9</li>
<li>10</li>
</ul>
<h2><a name="t3"></a><a name="t3"></a><a id="Inndob_69"></a>Inndob存储分布</h2>
<h3><a name="t4"></a><a name="t4"></a><a id="_71"></a>创建空表查看空间变化</h3>
<pre class="prettyprint"><code class="prism language-mysql has-numbering">mysql&gt; create table user(id bigint not null primary key auto_increment, 
    -&gt; name varchar(20) not null default '' comment '姓名', 
    -&gt; age tinyint not null default 0 comment 'age', 
    -&gt; gender char(1) not null default 'M'  comment '性别',
    -&gt; phone varchar(16) not null default '' comment '手机号',
    -&gt; create_time datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
    -&gt; update_time datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间'
    -&gt; ) engine = InnoDB DEFAULT CHARSET=utf8mb4 COMMENT '用户信息表';
Query OK, 0 rows affected (0.26 sec)
</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
<li>9</li>
</ul>
<pre class="prettyprint"><code class="prism language-bash has-numbering"><span class="token comment"># ls -lh user1.ibd </span>
-rw-r----- 1 mysql mysql 96K Nov  6 12:48 user.ibd
</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
</ul>
<p>设置参数innodb_file_per_table=1时，创建表时会自动创建一个segment，同时分配一个extent，包含32个data page的来存储数据，这样创建的空表默认大小就是96KB，extent使用完之后会申请64个连接页，这样对于一些小表，或者undo segment，可以在开始时申请较少的空间，节省磁盘容量的开销。</p>
<pre class="prettyprint"><code class="prism language-shell has-numbering"><span class="token comment"># python2 py_innodb_page_info.py -v /data2/mysql/test/user.ibd</span>
page offset 00000000, page <span class="token function">type</span> <span class="token operator">&lt;</span>File Space Header<span class="token operator">&gt;</span>
page offset 00000001, page <span class="token function">type</span> <span class="token operator">&lt;</span>Insert Buffer Bitmap<span class="token operator">&gt;</span>
page offset 00000002, page <span class="token function">type</span> <span class="token operator">&lt;</span>File Segment inode<span class="token operator">&gt;</span>
page offset 00000003, page <span class="token function">type</span> <span class="token operator">&lt;</span>B-tree Node<span class="token operator">&gt;</span>, page level <span class="token operator">&lt;</span>0000<span class="token operator">&gt;</span>
page offset 00000000, page <span class="token function">type</span> <span class="token operator">&lt;</span>Freshly Allocated Page<span class="token operator">&gt;</span>
page offset 00000000, page <span class="token function">type</span> <span class="token operator">&lt;</span>Freshly Allocated Page<span class="token operator">&gt;</span>
Total number of page: 6:      <span class="token comment">#总共分配的页数</span>
Freshly Allocated Page: 2     <span class="token comment">#可用的数据页</span>
Insert Buffer Bitmap: 1       <span class="token comment">#插入缓冲页</span>
File Space Header: 1          <span class="token comment">#文件空间头</span>
B-tree Node: 1                <span class="token comment">#数据页</span>
File Segment inode: 1         <span class="token comment">#文件端inonde，如果是在ibdata1.ibd上会有多个inode。</span>
</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
<li>9</li>
<li>10</li>
<li>11</li>
<li>12</li>
<li>13</li>
</ul>
<h3><a name="t5"></a><a name="t5"></a><a id="_108"></a>插入数据后的空间变化</h3>
<pre class="prettyprint"><code class="prism language-mysql has-numbering">mysql&gt; DELIMITER $$
mysql&gt; CREATE PROCEDURE insert_user_data(num INTEGER) 
    -&gt; BEGIN
    -&gt;     DECLARE v_i int unsigned DEFAULT 0;
    -&gt; set autocommit= 0;
    -&gt; WHILE v_i &lt; num DO
    -&gt;    insert into user(`name`, age, gender, phone) values (CONCAT('lyn',v_i), mod(v_i,120), 'M', CONCAT('152',ROUND(RAND(1)*100000000)));
    -&gt;  SET v_i = v_i+1;
    -&gt; END WHILE;
    -&gt; commit;
    -&gt; END $$
Query OK, 0 rows affected (0.01 sec)
mysql&gt; DELIMITER ;

#插入10w数据
mysql&gt; call insert_user_data(100000);
Query OK, 0 rows affected (6.69 sec)
</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
<li>9</li>
<li>10</li>
<li>11</li>
<li>12</li>
<li>13</li>
<li>14</li>
<li>15</li>
<li>16</li>
<li>17</li>
</ul>
<pre class="prettyprint"><code class="prism language-shell has-numbering"><span class="token comment"># ls -lh user.ibd</span>
-rw-r----- 1 mysql mysql 14M Nov 6 10:58 /data2/mysql/test/user.ibd

<span class="token comment"># python2 py_innodb_page_info.py -v /data2/mysql/test/user.ibd</span>
page offset 00000000, page <span class="token function">type</span> <span class="token operator">&lt;</span>File Space Header<span class="token operator">&gt;</span>
page offset 00000001, page <span class="token function">type</span> <span class="token operator">&lt;</span>Insert Buffer Bitmap<span class="token operator">&gt;</span>
page offset 00000002, page <span class="token function">type</span> <span class="token operator">&lt;</span>File Segment inode<span class="token operator">&gt;</span>
page offset 00000003, page <span class="token function">type</span> <span class="token operator">&lt;</span>B-tree Node<span class="token operator">&gt;</span>, page level <span class="token operator">&lt;</span>0001<span class="token operator">&gt;</span>   <span class="token comment">#增加了一个非叶子节点，树的高度从1变为2.</span>
<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>
page offset 00000000, page <span class="token function">type</span> <span class="token operator">&lt;</span>Freshly Allocated Page<span class="token operator">&gt;</span>
Total number of page: 896:
Freshly Allocated Page: 493
Insert Buffer Bitmap: 1
File Space Header: 1
B-tree Node: 400
File Segment inode: 1
</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
<li>9</li>
<li>10</li>
<li>11</li>
<li>12</li>
<li>13</li>
<li>14</li>
<li>15</li>
<li>16</li>
</ul>
<h3><a name="t6"></a><a name="t6"></a><a id="delete_149"></a>delete数据后的空间变化</h3>
<pre class="prettyprint"><code class="prism language-mysql has-numbering">mysql&gt; select min(id),max(id),count(*) from user;
+---------+---------+----------+
| min(id) | max(id) | count(*) |
+---------+---------+----------+
|       1 |  100000 |   100000 |
+---------+---------+----------+
1 row in set (0.05 sec)
#删除50000条数据，理论上空间应该从14MB变长7MB左右。
mysql&gt; delete from user limit 50000;
Query OK, 50000 rows affected (0.25 sec)

#数据文件大小依然是14MB，没有缩小。
# ls -lh /data2/mysql/test/user1.ibd 
-rw-r----- 1 mysql mysql 14M Nov  6 13:22 /data2/mysql/test/user.ibd

#数据页没有被回收。
# python2 py_innodb_page_info.py -v /data2/mysql/test/user.ibd
page offset 00000000, page type &lt;File Space Header&gt;
page offset 00000001, page type &lt;Insert Buffer Bitmap&gt;
page offset 00000002, page type &lt;File Segment inode&gt;
page offset 00000003, page type &lt;B-tree Node&gt;, page level &lt;0001&gt;
........................................................
page offset 00000000, page type &lt;Freshly Allocated Page&gt;
Total number of page: 896:
Freshly Allocated Page: 493
Insert Buffer Bitmap: 1
File Space Header: 1
B-tree Node: 400
File Segment inode: 1
#在MySQL内部是标记删除，
</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
<li>9</li>
<li>10</li>
<li>11</li>
<li>12</li>
<li>13</li>
<li>14</li>
<li>15</li>
<li>16</li>
<li>17</li>
<li>18</li>
<li>19</li>
<li>20</li>
<li>21</li>
<li>22</li>
<li>23</li>
<li>24</li>
<li>25</li>
<li>26</li>
<li>27</li>
<li>28</li>
<li>29</li>
<li>30</li>
</ul>
<pre class="prettyprint"><code class="prism language-mysql has-numbering">mysql&gt; use information_schema;

Database changed
mysql&gt; SELECT A.SPACE AS TBL_SPACEID, A.TABLE_ID, A.NAME AS TABLE_NAME, FILE_FORMAT, ROW_FORMAT, SPACE_TYPE,  B.INDEX_ID , B.NAME AS INDEX_NAME, PAGE_NO, B.TYPE AS INDEX_TYPE FROM INNODB_SYS_TABLES A LEFT JOIN INNODB_SYS_INDEXES B ON A.TABLE_ID =B.TABLE_ID WHERE A.NAME = 'test/user1';
+-------------+----------+------------+-------------+------------+------------+----------+------------+---------+------------+
| TBL_SPACEID | TABLE_ID | TABLE_NAME | FILE_FORMAT | ROW_FORMAT | SPACE_TYPE | INDEX_ID | INDEX_NAME | PAGE_NO | INDEX_TYPE |
+-------------+----------+------------+-------------+------------+------------+----------+------------+---------+------------+
|        1283 |     1207 | test/user | Barracuda   | Dynamic    | Single     |     2236 | PRIMARY    |       3 |          3 |
+-------------+----------+------------+-------------+------------+------------+----------+------------+---------+------------+
1 row in set (0.01 sec)

PAGE_NO = 3 标识B-tree的root page是3号页，INDEX_TYPE = 3是聚集索引。 INDEX_TYPE取值如下：
0 = nonunique secondary index; 
1 = automatically generated clustered index (GEN_CLUST_INDEX); 
2 = unique nonclustered index; 
3 = clustered index; 
32 = full-text index;
#收缩空间再后进行观察
</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
<li>9</li>
<li>10</li>
<li>11</li>
<li>12</li>
<li>13</li>
<li>14</li>
<li>15</li>
<li>16</li>
<li>17</li>
<li>18</li>
</ul>
<p>MySQL内部不会真正删除空间，而且做标记删除，即将delflag:N修改为delflag:Y，commit之后会会被purge进入删除链表，如果下一次insert更大的记录，delete之后的空间不会被重用，如果插入的记录小于等于delete的记录空会被重用，这块内容可以通过知数堂的innblock工具进行分析。</p>
<h2><a name="t7"></a><a name="t7"></a><a id="Innodb_207"></a>Innodb中的碎片</h2>
<h3><a name="t8"></a><a name="t8"></a><a id="_209"></a>碎片的产生</h3>
<p>我们知道数据存储在文件系统上的，总是不能100%利用分配给它的物理空间，删除数据会在页面上留下一些&rdquo;空洞&rdquo;，或者随机写入（聚集索引非线性增加）会导致页分裂，页分裂导致页面的利用空间少于50%，另外对表进行增删改会引起对应的二级索引值的随机的增删改，也会导致索引结构中的数据页面上留下一些"空洞"，虽然这些空洞有可能会被重复利用，但终究会导致部分物理空间未被使用，也就是碎片。</p>
<p>同时，即便是设置了填充因子为100%，Innodb也会主动留下page页面1/16的空间作为预留使用（An innodb_fill_factor setting of 100 leaves 1/16 of the space in clustered index pages free for future index growth）防止update带来的行溢出。</p>
<pre class="prettyprint"><code class="prism language-mysql has-numbering">mysql&gt; select table_schema,
    -&gt;        table_name,ENGINE,
    -&gt;        round(DATA_LENGTH/1024/1024+ INDEX_LENGTH/1024/1024) total_mb,TABLE_ROWS,
    -&gt;        round(DATA_LENGTH/1024/1024) data_mb, round(INDEX_LENGTH/1024/1024) index_mb, round(DATA_FREE/1024/1024) free_mb, round(DATA_FREE/DATA_LENGTH*100,2) free_ratio
    -&gt; from information_schema.TABLES where  TABLE_SCHEMA= 'test'
    -&gt; and TABLE_NAME= 'user';
+--------------+------------+--------+----------+------------+---------+----------+---------+------------+
| table_schema | table_name | ENGINE | total_mb | TABLE_ROWS | data_mb | index_mb | free_mb | free_ratio |
+--------------+------------+--------+----------+------------+---------+----------+---------+------------+
| test         | user      | InnoDB |        4 |      50000 |       4 |        0 |       6 |     149.42 |
+--------------+------------+--------+----------+------------+---------+----------+---------+------------+
1 row in set (0.00 sec)

</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
<li>9</li>
<li>10</li>
<li>11</li>
<li>12</li>
<li>13</li>
</ul>
<p>其中data_free是分配了未使用的字节数，并不能说明完全是碎片空间。</p>
<h3><a name="t9"></a><a name="t9"></a><a id="_233"></a>碎片的回收</h3>
<p>对于InnoDB的表，可以通过以下命令来回收碎片，释放空间，这个是随机读IO操作，会比较耗时，也会阻塞表上正常的DML运行，同时需要占用额外更多的磁盘空间，对于RDS来说，可能会导致磁盘空间瞬间爆满，实例瞬间被锁定，应用无法做DML操作，所以禁止在线上环境去执行。</p>
<pre class="prettyprint"><code class="prism language-shell has-numbering"><span class="token comment">#执行InnoDB的碎片回收</span>
mysql<span class="token operator">&gt;</span> alter table user engine<span class="token operator">=</span>InnoDB<span class="token punctuation">;</span>
Query OK, 0 rows affected <span class="token punctuation">(</span>9.00 sec<span class="token punctuation">)</span>
Records: 0  Duplicates: 0  Warnings: 0

<span class="token comment">##执行完之后，数据文件大小从14MB降低到10M。</span>
<span class="token comment"># ls -lh /data2/mysql/test/user1.ibd </span>
-rw-r----- 1 mysql mysql 10M Nov 6 16:18 /data2/mysql/test/user.ibd
</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
</ul>
<pre class="prettyprint"><code class="prism language-mysql has-numbering">mysql&gt; select table_schema,        table_name,ENGINE,        round(DATA_LENGTH/1024/1024+ INDEX_LENGTH/1024/1024) total_mb,TABLE_ROWS,        round(DATA_LENGTH/1024/1024) data_mb, round(INDEX_LENGTH/1024/1024) index_mb, round(DATA_FREE/1024/1024) free_mb, round(DATA_FREE/DATA_LENGTH*100,2) free_ratio from information_schema.TABLES where  TABLE_SCHEMA= 'test' and TABLE_NAME= 'user';
+--------------+------------+--------+----------+------------+---------+----------+---------+------------+
| table_schema | table_name | ENGINE | total_mb | TABLE_ROWS | data_mb | index_mb | free_mb | free_ratio |
+--------------+------------+--------+----------+------------+---------+----------+---------+------------+
| test         | user      | InnoDB |        5 |      50000 |       5 |        0 |       2 |      44.29 |
+--------------+------------+--------+----------+------------+---------+----------+---------+------------+
1 row in set (0.00 sec)


</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
<li>9</li>
</ul>
<h2><a name="t10"></a><a name="t10"></a><a id="deleteSQL_260"></a>delete对SQL的影响</h2>
<h3><a name="t11"></a><a name="t11"></a><a id="SQL_262"></a>未删除前的SQL执行情况</h3>
<pre class="prettyprint"><code class="prism language-mysql has-numbering">#插入100W数据
mysql&gt; call insert_user_data(1000000);
Query OK, 0 rows affected (35.99 sec)

#添加相关索引
mysql&gt; alter table user add index idx_name(name), add index idx_phone(phone);
Query OK, 0 rows affected (6.00 sec)
Records: 0  Duplicates: 0  Warnings: 0

#表上索引统计信息
mysql&gt; show index from user;
+-------+------------+-----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
| Table | Non_unique | Key_name  | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment |
+-------+------------+-----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
| user  |          0 | PRIMARY   |            1 | id          | A         |      996757 |     NULL | NULL   |      | BTREE      |         |               |
| user  |          1 | idx_name  |            1 | name        | A         |      996757 |     NULL | NULL   |      | BTREE      |         |               |
| user  |          1 | idx_phone |            1 | phone       | A         |           2 |     NULL | NULL   |      | BTREE      |         |               |
+-------+------------+-----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
3 rows in set (0.00 sec)

#重置状态变量计数
mysql&gt; flush status;
Query OK, 0 rows affected (0.00 sec)

#执行SQL语句
mysql&gt; select id, age ,phone from user where name like 'lyn12%';
+--------+-----+-------------+
| id     | age | phone       |
+--------+-----+-------------+
|    124 |   3 | 15240540354 |
|   1231 |  30 | 15240540354 |
|  12301 |  60 | 15240540354 |
.............................
| 129998 |  37 | 15240540354 |
| 129999 |  38 | 15240540354 |
| 130000 |  39 | 15240540354 |
+--------+-----+-------------+
11111 rows in set (0.03 sec)

mysql&gt; explain select id, age ,phone from user where name like 'lyn12%';
+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+
| id | select_type | table | type  | possible_keys | key      | key_len | ref  | rows  | Extra                 |
+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+
|  1 | SIMPLE      | user  | range | idx_name      | idx_name | 82      | NULL | 22226 | Using index condition |
+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+
1 row in set (0.00 sec)

#查看相关状态呢变量
mysql&gt; select * from information_schema.session_status where variable_name in('Last_query_cost','Handler_read_next','Innodb_pages_read','Innodb_data_reads','Innodb_pages_read');
+-------------------+----------------+
| VARIABLE_NAME     | VARIABLE_VALUE |
+-------------------+----------------+
| HANDLER_READ_NEXT | 11111          |    #请求读的行数
| INNODB_DATA_READS | 7868409        |    #数据物理读的总数
| INNODB_PAGES_READ | 7855239        |    #逻辑读的总数
| LAST_QUERY_COST   | 10.499000      |    #SQL语句的成本COST，主要包括IO_COST和CPU_COST。
+-------------------+----------------+
4 rows in set (0.00 sec)
</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
<li>9</li>
<li>10</li>
<li>11</li>
<li>12</li>
<li>13</li>
<li>14</li>
<li>15</li>
<li>16</li>
<li>17</li>
<li>18</li>
<li>19</li>
<li>20</li>
<li>21</li>
<li>22</li>
<li>23</li>
<li>24</li>
<li>25</li>
<li>26</li>
<li>27</li>
<li>28</li>
<li>29</li>
<li>30</li>
<li>31</li>
<li>32</li>
<li>33</li>
<li>34</li>
<li>35</li>
<li>36</li>
<li>37</li>
<li>38</li>
<li>39</li>
<li>40</li>
<li>41</li>
<li>42</li>
<li>43</li>
<li>44</li>
<li>45</li>
<li>46</li>
<li>47</li>
<li>48</li>
<li>49</li>
<li>50</li>
<li>51</li>
<li>52</li>
<li>53</li>
<li>54</li>
<li>55</li>
<li>56</li>
<li>57</li>
<li>58</li>
</ul>
<h3><a name="t12"></a><a name="t12"></a><a id="SQL_325"></a>删除后的SQL执行情况</h3>
<pre class="prettyprint"><code class="prism language-mysql has-numbering">#删除50w数据
mysql&gt; delete from user limit 500000;
Query OK, 500000 rows affected (3.70 sec)

#分析表统计信息
mysql&gt; analyze table user;
+-----------+---------+----------+----------+
| Table     | Op      | Msg_type | Msg_text |
+-----------+---------+----------+----------+
| test.user | analyze | status   | OK       |
+-----------+---------+----------+----------+
1 row in set (0.01 sec)

#重置状态变量计数
mysql&gt; flush status;
Query OK, 0 rows affected (0.01 sec)

mysql&gt; select id, age ,phone from user where name like 'lyn12%';
Empty set (0.05 sec)

mysql&gt; explain select id, age ,phone from user where name like 'lyn12%';
+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+
| id | select_type | table | type  | possible_keys | key      | key_len | ref  | rows  | Extra                 |
+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+
|  1 | SIMPLE      | user  | range | idx_name      | idx_name | 82      | NULL | 22226 | Using index condition |
+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+
1 row in set (0.00 sec)

mysql&gt; select * from information_schema.session_status where variable_name in('Last_query_cost','Handler_read_next','Innodb_pages_read','Innodb_data_reads','Innodb_pages_read');
+-------------------+----------------+
| VARIABLE_NAME     | VARIABLE_VALUE |
+-------------------+----------------+
| HANDLER_READ_NEXT | 0              |
| INNODB_DATA_READS | 7868409        |
| INNODB_PAGES_READ | 7855239        |
| LAST_QUERY_COST   | 10.499000      |
+-------------------+----------------+
4 rows in set (0.00 sec)
</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
<li>9</li>
<li>10</li>
<li>11</li>
<li>12</li>
<li>13</li>
<li>14</li>
<li>15</li>
<li>16</li>
<li>17</li>
<li>18</li>
<li>19</li>
<li>20</li>
<li>21</li>
<li>22</li>
<li>23</li>
<li>24</li>
<li>25</li>
<li>26</li>
<li>27</li>
<li>28</li>
<li>29</li>
<li>30</li>
<li>31</li>
<li>32</li>
<li>33</li>
<li>34</li>
<li>35</li>
<li>36</li>
<li>37</li>
<li>38</li>
</ul>
<h3><a name="t13"></a><a name="t13"></a><a id="_368"></a>结果统计分析</h3>
<div class="table-box">
<table>
<thead>
<tr>
<th>操作</th>
<th>COST</th>
<th>物理读次数</th>
<th>逻辑读次数</th>
<th>扫描行数</th>
<th>返回行数</th>
<th>执行时间</th>
</tr>
</thead>
<tbody>
<tr>
<td>初始化插入100W</td>
<td>10.499000</td>
<td>7868409</td>
<td>7855239</td>
<td>22226</td>
<td>11111</td>
<td>30ms</td>
</tr>
<tr>
<td>100W随机删除50W</td>
<td>10.499000</td>
<td>7868409</td>
<td>7855239</td>
<td>22226</td>
<td>0</td>
<td>50ms</td>
</tr>
</tbody>
</table>
</div>
<p>这也说明对普通的大表，想要通过delete数据来对表进行瘦身是不现实的，所以在任何时候不要用delete去删除数据，应该使用优雅的标记删除。</p>
<h2><a name="t14"></a><a name="t14"></a><a id="delete_377"></a>delete优化建议</h2>
<h3><a name="t15"></a><a name="t15"></a><a id="_379"></a>控制业务账号权限</h3>
<p>对于一个大的系统来说，需要根据业务特点去拆分子系统，每个子系统可以看做是一个service，例如美团APP，上面有很多服务，核心的服务有用户服务user-service，搜索服务search-service，商品product-service，位置服务location-service，价格服务price-service等。每个服务对应一个数据库，为该数据库创建单独账号，同时只授予DML权限且没有delete权限，同时禁止跨库访问。</p>
<pre class="prettyprint"><code class="prism language-mysql has-numbering">#创建用户数据库并授权
create database mt_user charset utf8mb4;
grant USAGE, SELECT, INSERT, UPDATE ON mt_user.*  to 'w_user'@'%' identified by 't$W*g@gaHTGi123456';
flush privileges;
</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
</ul>
<h3><a name="t16"></a><a name="t16"></a><a id="delete_390"></a>delete改为标记删除</h3>
<p>在MySQL数据库建模规范中有4个公共字段，基本上每个表必须有的，同时在create_time列要创建索引，有两方面的好处：</p>
<ol>
<li>一些查询业务场景都会有一个默认的时间段，比如7天或者一个月，都是通过create_time去过滤，走索引扫描更快。</li>
<li>一些核心的业务表需要以T +1的方式抽取数据仓库中，比如每天晚上00:30抽取前一天的数据，都是通过create_time过滤的。</li>
</ol>
<pre class="prettyprint"><code class="prism language-mysql has-numbering">`id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '主键id',
`is_deleted` tinyint(4) NOT NULL DEFAULT '0' COMMENT '是否逻辑删除：0：未删除，1：已删除',
`create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
`update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间'

#有了删除标记，业务接口的delete操作就可以转换为update
update user set is_deleted = 1 where user_id = 1213;

#查询的时候需要带上is_deleted过滤
select id, age ,phone from user where is_deleted = 0 and name like 'lyn12%';
</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
<li>9</li>
<li>10</li>
</ul>
<h2><a name="t17"></a><a name="t17"></a><a id="_410"></a>数据归档方式</h2>
<h3><a name="t18"></a><a name="t18"></a><a id="_412"></a>通用数据归档方法</h3>
<pre class="prettyprint"><code class="prism language-mysql has-numbering">#1. 创建归档表，一般在原表名后面添加_bak。
CREATE TABLE `ota_order_bak` (
  `id` bigint(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `order_id` varchar(255) DEFAULT NULL COMMENT '订单id',
  `ota_id` varchar(255) DEFAULT NULL COMMENT 'ota',
  `check_in_date` varchar(255) DEFAULT NULL COMMENT '入住日期',
  `check_out_date` varchar(255) DEFAULT NULL COMMENT '离店日期',
  `hotel_id` varchar(255) DEFAULT NULL COMMENT '酒店ID',
  `guest_name` varchar(255) DEFAULT NULL COMMENT '顾客',
  `purcharse_time` timestamp NULL DEFAULT NULL COMMENT '购买时间',
  `create_time` datetime DEFAULT NULL,
  `update_time` datetime DEFAULT NULL,
  `create_user` varchar(255) DEFAULT NULL,
  `update_user` varchar(255) DEFAULT NULL,
  `status` int(4) DEFAULT '1' COMMENT '状态 ： 1 正常 ， 0 删除',
  `hotel_name` varchar(255) DEFAULT NULL,
  `price` decimal(10,0) DEFAULT NULL,
  `remark` longtext,
  PRIMARY KEY (`id`),
  KEY `IDX_order_id` (`order_id`) USING BTREE,
  KEY `hotel_name` (`hotel_name`) USING BTREE,
  KEY `ota_id` (`ota_id`) USING BTREE,
  KEY `IDX_purcharse_time` (`purcharse_time`) USING BTREE,
  KEY `IDX_create_time` (`create_time`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8
PARTITION BY RANGE (to_days(create_time)) ( 
PARTITION p201808 VALUES LESS THAN (to_days('2018-09-01')), 
PARTITION p201809 VALUES LESS THAN (to_days('2018-10-01')), 
PARTITION p201810 VALUES LESS THAN (to_days('2018-11-01')), 
PARTITION p201811 VALUES LESS THAN (to_days('2018-12-01')), 
PARTITION p201812 VALUES LESS THAN (to_days('2019-01-01')), 
PARTITION p201901 VALUES LESS THAN (to_days('2019-02-01')), 
PARTITION p201902 VALUES LESS THAN (to_days('2019-03-01')), 
PARTITION p201903 VALUES LESS THAN (to_days('2019-04-01')), 
PARTITION p201904 VALUES LESS THAN (to_days('2019-05-01')), 
PARTITION p201905 VALUES LESS THAN (to_days('2019-06-01')), 
PARTITION p201906 VALUES LESS THAN (to_days('2019-07-01')), 
PARTITION p201907 VALUES LESS THAN (to_days('2019-08-01')), 
PARTITION p201908 VALUES LESS THAN (to_days('2019-09-01')), 
PARTITION p201909 VALUES LESS THAN (to_days('2019-10-01')), 
PARTITION p201910 VALUES LESS THAN (to_days('2019-11-01')), 
PARTITION p201911 VALUES LESS THAN (to_days('2019-12-01')), 
PARTITION p201912 VALUES LESS THAN (to_days('2020-01-01')));

#2. 插入原表中无效的数据（需要跟开发同学确认数据保留范围）
create table tbl_p201808 as select * from ota_order where create_time between '2018-08-01 00:00:00' and '2018-08-31 23:59:59';

#3. 跟归档表分区做分区交换
alter table ota_order_bak exchange partition p201808 with table tbl_p201808; 

#4. 删除原表中已经规范的数据
delete from ota_order where create_time between '2018-08-01 00:00:00' and '2018-08-31 23:59:59' limit 3000;
</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
<li>9</li>
<li>10</li>
<li>11</li>
<li>12</li>
<li>13</li>
<li>14</li>
<li>15</li>
<li>16</li>
<li>17</li>
<li>18</li>
<li>19</li>
<li>20</li>
<li>21</li>
<li>22</li>
<li>23</li>
<li>24</li>
<li>25</li>
<li>26</li>
<li>27</li>
<li>28</li>
<li>29</li>
<li>30</li>
<li>31</li>
<li>32</li>
<li>33</li>
<li>34</li>
<li>35</li>
<li>36</li>
<li>37</li>
<li>38</li>
<li>39</li>
<li>40</li>
<li>41</li>
<li>42</li>
<li>43</li>
<li>44</li>
<li>45</li>
<li>46</li>
<li>47</li>
<li>48</li>
<li>49</li>
<li>50</li>
<li>51</li>
<li>52</li>
</ul>
<h3><a name="t19"></a><a name="t19"></a><a id="_469"></a>优化后的归档方式</h3>
<pre class="prettyprint"><code class="prism language-mysql has-numbering">#1. 创建中间表
CREATE TABLE `ota_order_2020` (........) ENGINE=InnoDB DEFAULT CHARSET=utf8
PARTITION BY RANGE (to_days(create_time)) ( 
PARTITION p201808 VALUES LESS THAN (to_days('2018-09-01')), 
PARTITION p201809 VALUES LESS THAN (to_days('2018-10-01')), 
PARTITION p201810 VALUES LESS THAN (to_days('2018-11-01')), 
PARTITION p201811 VALUES LESS THAN (to_days('2018-12-01')), 
PARTITION p201812 VALUES LESS THAN (to_days('2019-01-01')), 
PARTITION p201901 VALUES LESS THAN (to_days('2019-02-01')), 
PARTITION p201902 VALUES LESS THAN (to_days('2019-03-01')), 
PARTITION p201903 VALUES LESS THAN (to_days('2019-04-01')), 
PARTITION p201904 VALUES LESS THAN (to_days('2019-05-01')), 
PARTITION p201905 VALUES LESS THAN (to_days('2019-06-01')), 
PARTITION p201906 VALUES LESS THAN (to_days('2019-07-01')), 
PARTITION p201907 VALUES LESS THAN (to_days('2019-08-01')), 
PARTITION p201908 VALUES LESS THAN (to_days('2019-09-01')), 
PARTITION p201909 VALUES LESS THAN (to_days('2019-10-01')), 
PARTITION p201910 VALUES LESS THAN (to_days('2019-11-01')), 
PARTITION p201911 VALUES LESS THAN (to_days('2019-12-01')), 
PARTITION p201912 VALUES LESS THAN (to_days('2020-01-01')));

#2. 插入原表中有效的数据，如果数据量在100W左右可以在业务低峰期直接插入，如果比较大，建议采用dataX来做，可以控制频率和大小，之前我这边用Go封装了dataX可以实现自动生成json文件，自定义大小去执行。
insert into ota_order_2020 select * from ota_order where create_time between '2020-08-01 00:00:00' and '2020-08-31 23:59:59';

#3. 表重命名
alter table ota_order rename to ota_order_bak;  
alter table ota_order_2020 rename to ota_order;
#4. 插入差异数据
insert into ota_order select * from ota_order_bak a where not exists (select 1 from ota_order b where a.id = b.id);
#5. ota_order_bak改造成分区表，如果表比较大不建议直接改造，可以先创建好分区表，通过dataX把导入进去即可。

#6. 后续的归档方法
#创建中间普遍表
create table ota_order_mid like ota_order;
#交换原表无效数据分区到普通表
alter table ota_order exchange partition p201808 with table ota_order_mid; 
##交换普通表数据到归档表的相应分区
alter table ota_order_bak exchange partition p201808 with table ota_order_mid; 
</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
<li>9</li>
<li>10</li>
<li>11</li>
<li>12</li>
<li>13</li>
<li>14</li>
<li>15</li>
<li>16</li>
<li>17</li>
<li>18</li>
<li>19</li>
<li>20</li>
<li>21</li>
<li>22</li>
<li>23</li>
<li>24</li>
<li>25</li>
<li>26</li>
<li>27</li>
<li>28</li>
<li>29</li>
<li>30</li>
<li>31</li>
<li>32</li>
<li>33</li>
<li>34</li>
<li>35</li>
<li>36</li>
<li>37</li>
<li>38</li>
</ul>
<p>这样原表和归档表都是按月的分区表，只需要创建一个中间普通表，在业务低峰期做两次分区交换，既可以删除无效数据，又能回收空，而且没有空间碎片，不会影响表上的索引及SQL的执行计划。</p>
<h2><a name="t20"></a><a name="t20"></a><a id="_514"></a>总结</h2>
<p>通过从InnoDB存储空间分布，delete对性能的影响可以看到，delete物理删除既不能释放磁盘空间，而且会产生大量的碎片，导致索引频繁分裂，影响SQL执行计划的稳定性；</p>
<p>同时在碎片回收时，会耗用大量的CPU，磁盘空间，影响表上正常的DML操作。</p>
<p>在业务代码层面，应该做逻辑标记删除，避免物理删除；为了实现数据归档需求，可以用采用MySQL分区表特性来实现，都是DDL操作，没有碎片产生。</p>
<p>另外一个比较好的方案采用Clickhouse，对有生命周期的数据表可以使用Clickhouse存储，利用其TTL特性实现无效数据自动清理。</p>
<p>&nbsp;</p>(String), 0(Integer), 0(Integer), 0(Integer), 1(Integer), aaaaa(String), 0(Integer), 1330877080455553024(String), 1(Integer)
2020-11-23 22:15:40.829 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlBlogMapper.update.debug:159 -<==    Updates: 1
2020-11-23 22:15:40.946 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 22:15:40.947 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/update(String), [com.tqk.blog.pojo.BlBlog@1a784d72](String), 1(Integer), null, PUT(String), 388(Long), {"code":20000,"msg":"更新成功！"}(String), 192.168.101.29(String)
2020-11-23 22:15:41.031 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 22:15:41.154 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image, blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-11-23 22:15:41.155 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-11-23 22:15:41.194 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -<==      Total: 3
2020-11-23 22:15:41.196 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-11-23 22:15:41.197 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-11-23 22:15:41.238 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-11-23 22:15:41.346 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 22:15:41.347 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=1, totalCount=3, list=[BlogVo(blogId=1324038097171820544, blogTitle=BeanUtils.copyProperties的用法, blogImage=Java, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=Java, blogSource=百度, blogRemark=BeanUtils它提供了对java反射和自省API的包装。它里面还有很多工具类，这里我们介绍一下copyProperties。, blogComment=0, blogMonth=null, createdTime=2020-11-04 17:17:33, updateTime=2020-11-22 13:04:15), BlogVo(blogId=1330877080455553024, blogTitle=, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=Java, blogSource=null, blogRemark=aaaaa, blogComment=0, blogMonth=null, createdTime=2020-11-23 14:13:16, updateTime=2020-11-23 14:13:16), BlogVo(blogId=1330877084339478528, blogTitle=, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=Java, blogSource=null, blogRemark=aaaaa, blogComment=0, blogMonth=null, createdTime=2020-11-23 14:13:17, updateTime=2020-11-23 14:13:17)], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 230(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1324038097171820544","blogImage":"Java","blogRead":0,"blogRemark":"BeanUtils它提供了对java反射和自省API的包装。它里面还有很多工具类，这里我们介绍一下copyProperties。","blogSource":"百度","blogTitle":"BeanUtils.copyProperties的用法","createdTime":"2020-11-04 17:17:33","typeName":"Java","updateTime":"2020-11-22 13:04:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1330877080455553024","blogRead":0,"blogRemark":"aaaaa","blogTitle":"面试官不讲武德问我：为什么MySQL不建议使用delete删除数据？","createdTime":"2020-11-23 14:13:16","typeName":"Java","updateTime":"2020-11-23 14:15:40"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1330877084339478528","blogRead":0,"blogRemark":"aaaaa","blogTitle":"","createdTime":"2020-11-23 14:13:17","typeName":"Java","updateTime":"2020-11-23 14:13:17"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":3,"totalPage":1},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 22:15:41.428 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 22:16:02.254 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlBlogMapper.deleteById.debug:159 -==>  Preparing: update bl_blog set deleted = 1 where blog_id = ? 
2020-11-23 22:16:02.255 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlBlogMapper.deleteById.debug:159 -==> Parameters: 1330877084339478528(String)
2020-11-23 22:16:02.365 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlBlogMapper.deleteById.debug:159 -<==    Updates: 1
2020-11-23 22:16:02.407 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 22:16:02.409 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/delete/1330877084339478528(String), [1330877084339478528](String), 1(Integer), null, DELETE(String), 161(Long), {"code":20000,"msg":"删除成功！"}(String), 192.168.101.29(String)
2020-11-23 22:16:02.502 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 22:16:02.597 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image, blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-11-23 22:16:02.598 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-11-23 22:16:02.639 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -<==      Total: 2
2020-11-23 22:16:02.640 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-11-23 22:16:02.641 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-11-23 22:16:02.692 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-11-23 22:16:02.825 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 22:16:02.825 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=1, totalCount=3, list=[BlogVo(blogId=1324038097171820544, blogTitle=BeanUtils.copyProperties的用法, blogImage=Java, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=Java, blogSource=百度, blogRemark=BeanUtils它提供了对java反射和自省API的包装。它里面还有很多工具类，这里我们介绍一下copyProperties。, blogComment=0, blogMonth=null, createdTime=2020-11-04 17:17:33, updateTime=2020-11-22 13:04:15), BlogVo(blogId=1330877080455553024, blogTitle=面试官不讲武德问我：为什么MySQL不建议使用delete删除数据？, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=Java, blogSource=null, blogRemark=aaaaa, blogComment=0, blogMonth=null, createdTime=2020-11-23 14:13:16, updateTime=2020-11-23 14:15:40), BlogVo(blogId=1330877084339478528, blogTitle=, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=Java, blogSource=null, blogRemark=aaaaa, blogComment=0, blogMonth=null, createdTime=2020-11-23 14:13:17, updateTime=2020-11-23 14:13:17)], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 256(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1324038097171820544","blogImage":"Java","blogRead":0,"blogRemark":"BeanUtils它提供了对java反射和自省API的包装。它里面还有很多工具类，这里我们介绍一下copyProperties。","blogSource":"百度","blogTitle":"BeanUtils.copyProperties的用法","createdTime":"2020-11-04 17:17:33","typeName":"Java","updateTime":"2020-11-22 13:04:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1330877080455553024","blogRead":0,"blogRemark":"aaaaa","blogTitle":"面试官不讲武德问我：为什么MySQL不建议使用delete删除数据？","createdTime":"2020-11-23 14:13:16","typeName":"Java","updateTime":"2020-11-23 14:15:40"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":2,"totalPage":1},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 22:16:02.919 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 22:22:39.751 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlBlogMapper.save.debug:159 -==>  Preparing: insert into bl_blog( blog_id, blog_title,blog_image, blog_content, blog_type, blog_remark, blog_source ) values ( ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 22:22:39.753 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlBlogMapper.save.debug:159 -==> Parameters: 1330879440221315072(String), Java岗四面字节跳动成功之前，我都刷了那些面试题以及做了那些准备！(String), null, <h3>一面</h3>
<p>一面面试老师是个小姑娘，人特别好（不仅仅指长相啊）。</p>
<p>问了mysql的索引</p>
<p>Redis的string类型</p>
<p>为什么使用rabbitmq</p>
<p>rabbitmq有哪些部件，如何保证准确性跟一致性。</p>
<p>算法问了两道</p>
<p>快排</p>
<p>无序数组计算每个位置大于前面的多少个数字（归并排序）</p>
<h3><a name="t1"></a><a name="t1"></a>二面</h3>
<p>二面就开始偏向项目了，</p>
<p>如何进行jvm调优（然后我巴拉巴拉，老师说你写下具体的参数跟请求命令）</p>
<p>cpu满了重启系统后好了，但是一会又满了，如何具体解决。（老师有点严格，一直说我不要听原理，你给我说具体的命令）</p>
<p>然后问了如何设置秒杀系统</p>
<p>如何设置银行系统，会碰到什么问题</p>
<p>为什么项目中使用了mongodb</p>
<p>同样两个算法</p>
<p>一个文本距离计算</p>
<p>（用动态规划解决）</p>
<p>一个是无序数组可以存储多少雨水问题</p>
<p>&nbsp;</p>
<h3><a name="t2"></a><a name="t2"></a>三面</h3>
<p>没有问技术</p>
<p>就是聊了聊怎么学习的</p>
<p>看了那些书</p>
<p>如何设置一个抢红包的功能</p>
<p>以及自己项目中碰到了哪些问题，如何解决的</p>
<p>项目的技术选型以及为什么要选择它</p>
<p>然后最手写一个算法</p>
<p>实现对hashmap增强，加上过期自动删除还有淘汰策略实现最短过期时间删除</p>
<h3><a name="t3"></a><a name="t3"></a>HR面</h3>
<p>技术规划</p>
<p>还投了哪些公司</p>
<p>字节了解</p>
<p>为什么考研</p>
<p>项目中最大的收获</p>
<blockquote>
<p>获取Java学习笔记，面试文档，电子书PDF，面经资料，面试题目解析：加我&ldquo;VX小助理&rdquo;即可免费获取到</p>
<p><img src="https://img-blog.csdnimg.cn/20201119150314177.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ExNTkzNTc0NDU1NjY=,size_16,color_FFFFFF,t_70" alt="" /></p>
<p><img src="https://img-blog.csdnimg.cn/20201113164315865.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ExNTkzNTc0NDU1NjY=,size_16,color_FFFFFF,t_70" alt="" width="851" height="401" /></p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/2020111316432769.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ExNTkzNTc0NDU1NjY=,size_16,color_FFFFFF,t_70" alt="" width="593" height="506" /></p>
<p><img src="https://img-blog.csdnimg.cn/20201113164343666.png" alt="" width="482" height="198" /></p>
<h1><a name="t4"></a><a name="t4"></a>Java基础</h1>
<ul>
<li>JAVA 中的几种数据类型是什么，各自占用多少字节。</li>
<li>String 类能被继承吗，为什么。</li>
<li>两个对象的 hashCode() 相同，则 equals() 也一定为 true，对吗？</li>
<li>String 属于基础的数据类型吗？</li>
<li>Java 中操作字符串都有哪些类？它们之间有什么区别？</li>
<li>Java 中 IO 流分为几种？</li>
<li>BIO、NIO、AIO 有什么区别？</li>
<li>用过哪些 Map 类，都有什么区别，HashMap 时线程安全的吗，并发下使用的 Map 是什么，他们的内部原理分别是什么，比如存储方法，hashcode，扩容，默认容量等。</li>
<li>如何将字符串反转？</li>
<li>抽象类必须要有抽象方法吗？</li>
<li>普通类和抽象类有哪些区别？</li>
<li>抽象类能使用 final 修饰吗？</li>
<li>ArrayList 和 LinkedList 有什么区别？</li>
<li>ConcurrentHashMap的数据结构（必考）</li>
<li>volatile作用（必考）</li>
<li>Atomic类如何保证原子性（CAS操作）（必考）</li>
<li>为什么要使用线程池（必考）</li>
</ul>
<p>&nbsp;</p>
<h1><a name="t5"></a><a name="t5"></a>Redis</h1>
<ul>
<li>Redis的应用场景</li>
<li>Redis支持的数据类型（必考）</li>
<li>zset跳表的数据结构（必考）</li>
<li>Redis的数据过期策略（必考）</li>
<li>Redis的LRU过期策略的具体实现</li>
<li>如何解决Redis缓存雪崩，缓存穿透问题</li>
<li>Redis的持久化机制（必考）</li>
<li>Redis为什么是单线程的？</li>
<li>什么是缓存穿透？怎么解决？</li>
<li>Redis持久化有几种方式？</li>
<li>Redis为什么这么快？（必考）</li>
<li>Redis怎么实现分布式锁？</li>
<li>Redis如何做内存优化？</li>
<li>Redis淘汰策略有哪些？</li>
<li>Redis常见的性能问题有哪些？该如何解决？</li>
<li>Redis的使用要注意什么？</li>
</ul>
<h1><a name="t6"></a><a name="t6"></a>ZooKeeper</h1>
<ul>
<li>CAP定理</li>
<li>ZAB协议</li>
<li>leader选举<a href="https://blog.csdn.net/jump/super-jump/word?word=%E7%AE%97%E6%B3%95">算法</a>和流程</li>
<li>zoo<a href="https://blog.csdn.net/jump/super-jump/word?word=keep">keep</a>er 是什么？</li>
<li>zoo<a href="https://blog.csdn.net/jump/super-jump/word?word=keep">keep</a>er 有几种部署模式？</li>
<li>zoo<a href="https://blog.csdn.net/jump/super-jump/word?word=keep">keep</a>er 怎么保证主从节点的状态同步？</li>
</ul>
<h1><a name="t7"></a><a name="t7"></a>Mysql</h1>
<ul>
<li>事务的基本要素</li>
<li>事务隔离级别（必考）</li>
<li>如何解决事务的并发问题(脏读，幻读)（必考）</li>
<li>MVCC多版本并发控制（必考）</li>
<li>binlog,redolog,undolog都是什么，起什么作用</li>
<li>InnoDB的行锁/表锁</li>
<li>myisam和innodb的区别，什么时候选择myisam</li>
<li>为什么选择B+树作为索引结构（必考）</li>
<li>索引B+树的叶子节点都可以存哪些东西（必考）</li>
<li>查询在什么时候不走（预期中的）索引（必考）</li>
<li>sql如何优化</li>
<li>explain是如何解析sql的</li>
<li>order by原理</li>
</ul>
<h1><a name="t8"></a><a name="t8"></a>JVM</h1>
<ul>
<li>运行时数据区域（内存模型）（必考）</li>
<li>垃圾回收机制（必考）</li>
<li>垃圾回收<a href="https://blog.csdn.net/jump/super-jump/word?word=%E7%AE%97%E6%B3%95">算法</a>（必考）</li>
<li>Minor GC和Full GC触发条件</li>
<li>GC中Stop the world（STW）</li>
<li>各垃圾回收器的特点及区别</li>
<li>双亲委派模型</li>
<li>JDBC和双亲委派模型关系</li>
<li>JVM 中一次完整的 GC 流程是什么样子的，对象如何晋升到老年代，说说你知道的几种主要的 JVM 参数</li>
</ul>
<h1><a name="t9"></a><a name="t9"></a>Spring</h1>
<ul>
<li>Spring的IOC/AOP的实现（必考）</li>
<li>动态代理的实现方式（必考）</li>
<li>Spring如何解决循环依赖（三级缓存）（必考）</li>
<li>Spring的后置处理器</li>
<li>Spring的@Transactional如何实现的（必考）</li>
<li>Spring的事务传播级别</li>
<li>BeanFactory和ApplicationContext的联系和区别</li>
</ul>
<h1><a name="t10"></a><a name="t10"></a>其他</h1>
<ul>
<li>高并发系统的限流如何实现</li>
<li>高并发秒杀系统的设计</li>
<li>负载均衡如何设计</li>
</ul>
<h1><a name="t11"></a><a name="t11"></a>操作系统篇</h1>
<ul>
<li>进程和线程的区别</li>
<li>进程同步的几种方式</li>
<li>线程间同步的方式</li>
<li>什么是缓冲区溢出。有什么危害，其原因是什么</li>
<li>进程中有哪几种状态</li>
<li>分页和分段有什么区别</li>
</ul>
<h1><a name="t12"></a><a name="t12"></a>多线程篇</h1>
<ul>
<li>多线程的几种实现方式，什么是线程安全</li>
<li>volatile 的原理，作用，能代替锁吗?</li>
<li>sleep 和 wait 的区别</li>
<li>sleep(0)的意义</li>
<li>Lock 和 Synchronized 的区别</li>
<li>synchronized 的原理是什么，一般用在什么地方（比如加载静态方法和非静态方法的区别）</li>
</ul>
<p>获取Java学习笔记，面试文档，电子书PDF，面经资料，面试题目解析：加我&ldquo;VX小助理&rdquo;即可免费获取到</p>
<p><img src="https://img-blog.csdnimg.cn/20201119150314177.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2ExNTkzNTc0NDU1NjY=,size_16,color_FFFFFF,t_70" alt="" /></p>
<h1><a name="t13"></a><a name="t13"></a>补充</h1>
<p>另外还会考一些计算机网络之类的。像消息队列，RPC框架这种考的比较少。计算机网络就是分层啊，tcp/udp啊，三次握手之类的。操作系统就是进程与线程啊，进程的数据结构以及如何通信之类的。</p>
<p>数据结构的排序算法也比较常考，考的话一定会让你手写个快排。剩下的算法题就靠LeetCode的积累了。其实非算法岗考的算法题都蛮简单的，很多题完全就是考察你智力是否正常，稍微难点的涉及到一些算法思想的按照LeetCode题目类型的分类，每种题做一两道基本就能完全应付面试了。</p>(String), 1(Integer), 面试必备(String), null
2020-11-23 22:22:39.825 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlBlogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 22:22:39.826 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlTypeMapper.selectByPrimaryKey.debug:159 -==>  Preparing: SELECT type_id,type_name,type_blog_count,enable,deleted FROM bl_type WHERE type_id = ? 
2020-11-23 22:22:39.826 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlTypeMapper.selectByPrimaryKey.debug:159 -==> Parameters: 1(Integer)
2020-11-23 22:22:39.862 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlTypeMapper.selectByPrimaryKey.debug:159 -<==      Total: 1
2020-11-23 22:22:39.864 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlTypeMapper.updateByPrimaryKey.debug:159 -==>  Preparing: UPDATE bl_type SET type_name = ?,type_blog_count = ?,enable = ?,deleted = ? WHERE type_id = ? 
2020-11-23 22:22:39.865 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlTypeMapper.updateByPrimaryKey.debug:159 -==> Parameters: Java(String), 105(Integer), 1(Integer), 0(Integer), 1(Integer)
2020-11-23 22:22:39.936 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlTypeMapper.updateByPrimaryKey.debug:159 -<==    Updates: 1
2020-11-23 22:22:40.056 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 22:22:40.058 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/save(String), [com.tqk.blog.pojo.BlBlog@52ffa347](String), 1(Integer), null, POST(String), 346(Long), {"code":20000,"msg":"添加成功！"}(String), 192.168.101.29(String)
2020-11-23 22:22:40.140 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 22:22:40.250 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image, blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-11-23 22:22:40.252 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-11-23 22:22:40.290 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -<==      Total: 3
2020-11-23 22:22:40.291 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-11-23 22:22:40.292 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-11-23 22:22:40.332 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-11-23 22:22:40.442 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 22:22:40.443 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=1, totalCount=2, list=[BlogVo(blogId=1324038097171820544, blogTitle=BeanUtils.copyProperties的用法, blogImage=Java, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=Java, blogSource=百度, blogRemark=BeanUtils它提供了对java反射和自省API的包装。它里面还有很多工具类，这里我们介绍一下copyProperties。, blogComment=0, blogMonth=null, createdTime=2020-11-04 17:17:33, updateTime=2020-11-22 13:04:15), BlogVo(blogId=1330877080455553024, blogTitle=面试官不讲武德问我：为什么MySQL不建议使用delete删除数据？, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=Java, blogSource=null, blogRemark=aaaaa, blogComment=0, blogMonth=null, createdTime=2020-11-23 14:13:16, updateTime=2020-11-23 14:15:40)], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), 	at com.tqk.blog.controller.AdminController.getLoginInfo(AdminController.java:67)
	at com.tqk.blog.controller.AdminController$$FastClassBySpringCGLIB$$5e004558.invoke(<generated>)
	at com.tqk.blog.aspect.RequestAspect.doAround(RequestAspect.java:65)
	at com.tqk.blog.controller.AdminController$$EnhancerBySpringCGLIB$$8053c02.getLoginInfo(<generated>)
(String), POST(String), 232(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1324038097171820544","blogImage":"Java","blogRead":0,"blogRemark":"BeanUtils它提供了对java反射和自省API的包装。它里面还有很多工具类，这里我们介绍一下copyProperties。","blogSource":"百度","blogTitle":"BeanUtils.copyProperties的用法","createdTime":"2020-11-04 17:17:33","typeName":"Java","updateTime":"2020-11-22 13:04:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1330877080455553024","blogRead":0,"blogRemark":"aaaaa","blogTitle":"面试官不讲武德问我：为什么MySQL不建议使用delete删除数据？","createdTime":"2020-11-23 14:13:16","typeName":"Java","updateTime":"2020-11-23 14:15:40"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1330879440221315072","blogRead":0,"blogRemark":"面试必备","blogTitle":"Java岗四面字节跳动成功之前，我都刷了那些面试题以及做了那些准备！","createdTime":"2020-11-23 14:22:39","typeName":"Java","updateTime":"2020-11-23 14:22:39"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":3,"totalPage":1},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 22:22:40.526 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 22:22:46.691 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlBlogMapper.getById.debug:159 -==>  Preparing: select blog_id, blog_title, blog_content, blog_goods, blog_image, blog_read, blog_collection, blog_type, blog_remark, blog_comment, blog_source, created_time, version from bl_blog where blog_id = ? and deleted = 0 
2020-11-23 22:22:46.692 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlBlogMapper.getById.debug:159 -==> Parameters: 1330877080455553024(String)
2020-11-23 22:22:46.833 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlBlogMapper.getById.debug:159 -<==      Total: 1
2020-11-23 22:22:46.878 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 22:22:46.881 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/get/1330877080455553024(String), [1330877080455553024](String), 1(Integer), null, GET(String), 187(Long), {"code":20000,"data":{"blogCollection":0,"blogComment":0,"blogContent":"<h2>前言</h2>\n<p>我负责的有几个系统随着业务量的增长，存储在MySQL中的数据日益剧增，我当时就想现在的业务方不讲武德，搞偷袭，趁我没反应过来把很多表，很快，很快啊都打到了亿级别，我大意了，没有闪，这就导致跟其Join的表的SQL变得很慢，对的应用接口的response time也变长了，影响了用户体验。</p>\n<p>事后我找到业务方，我批评了他们跟他们说要讲武德，连忙跟我道歉，这个事情才就此作罢，走的时候我对他们说下次不要这样了，耗子尾汁，好好反思。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/3c93aececcb9e763f5476362c4e88710.png\" alt=\"\" /></p>\n<p>骂归骂，事情还是得解决，时候我分析原因发现，发现有些表的数据量增长很快，对应SQL扫描了很多无效数据，导致SQL慢了下来，通过确认之后，这些大表都是一些流水、记录、日志类型数据，只需要保留1到3个月，此时需要对表做数据清理实现瘦身，一般都会想到用insert + delete的方式去清理。</p>\n<p>这篇文章我会从InnoDB存储空间分布，delete对性能的影响，以及优化建议方面解释为什么不建议delete删除数据。</p>\n<h2><a name=\"t1\"></a><a name=\"t1\"></a><a id=\"InnoDB_16\"></a>InnoDB存储架构</h2>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/5c66ffe9749c58e1613d2519f7ea7211.png\" alt=\"\" /></p>\n<p>从这张图可以看到，InnoDB存储结构主要包括两部分：逻辑存储结构和物理存储结构。</p>\n<p>逻辑上是由表空间tablespace &mdash;&gt; 段segment或者inode &mdash;&gt; 区Extent &mdash;&mdash;&gt;数据页Page构成，Innodb逻辑管理单位是segment，空间分配的最小单位是extent，每个segment都会从表空间FREE_PAGE中分配32个page，当这32个page不够用时，会按照以下原则进行扩展：如果当前小于1个extent，则扩展到1个extent；当表空间小于32MB时，每次扩展一个extent；表空间大于32MB，每次扩展4个extent。</p>\n<p>物理上主要由系统用户数据文件，日志文件组成，数据文件主要存储MySQL字典数据和用户数据，日志文件记录的是data page的变更记录，用于MySQL Crash时的恢复。</p>\n<h2><a name=\"t2\"></a><a name=\"t2\"></a><a id=\"Innodb_26\"></a>Innodb表空间</h2>\n<p>InnoDB存储包括三类表空间：系统表空间，用户表空间，Undo表空间。</p>\n<p><strong>系统表空间：</strong>&nbsp;主要存储MySQL内部的数据字典数据，如information_schema下的数据。</p>\n<p><strong>用户表空间：</strong>&nbsp;当开启innodb_file_per_table=1时，数据表从系统表空间独立出来存储在以table_name.ibd命令的数据文件中，结构信息存储在table_name.frm文件中。</p>\n<p><strong>Undo表空间：</strong>&nbsp;存储Undo信息，如快照一致读和flashback都是利用undo信息。</p>\n<p>从MySQL 8.0开始允许用户自定义表空间，具体语法如下：</p>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">CREATE TABLESPACE tablespace_name\n    ADD DATAFILE 'file_name'               #数据文件名\n    USE LOGFILE GROUP logfile_group        #自定义日志文件组，一般每组2个logfile。\n    [EXTENT_SIZE [=] extent_size]          #区大小\n    [INITIAL_SIZE [=] initial_size]        #初始化大小 \n    [AUTOEXTEND_SIZE [=] autoextend_size]  #自动扩宽尺寸\n    [MAX_SIZE [=] max_size]                #单个文件最大size，最大是32G。\n    [NODEGROUP [=] nodegroup_id]           #节点组\n    [WAIT]\n    [COMMENT [=] comment_text]\n    ENGINE [=] engine_name\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n</ul>\n<p>这样的好处是可以做到数据的冷热分离，分别用HDD和SSD来存储，既能实现数据的高效访问，又能节约成本，比如可以添加两块500G硬盘，经过创建卷组vg，划分逻辑卷lv，创建数据目录并mount相应的lv，假设划分的两个目录分别是/hot_data 和 /cold_data。</p>\n<p>这样就可以将核心的业务表如用户表，订单表存储在高性能SSD盘上，一些日志，流水表存储在普通的HDD上，主要的操作步骤如下：</p>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">#创建热数据表空间\ncreate tablespace tbs_data_hot add datafile '/hot_data/tbs_data_hot01.dbf' max_size 20G;\n#创建核心业务表存储在热数据表空间\ncreate table booking(id bigint not null primary key auto_increment, &hellip;&hellip; ) tablespace tbs_data_hot;\n#创建冷数据表空间\ncreate tablespace tbs_data_cold add datafile '/hot_data/tbs_data_cold01.dbf' max_size 20G;\n#创建日志，流水，备份类的表存储在冷数据表空间\ncreate table payment_log(id bigint not null primary key auto_increment, &hellip;&hellip; ) tablespace tbs_data_cold;\n#可以移动表到另一个表空间\nalter table payment_log tablespace tbs_data_hot;\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n</ul>\n<h2><a name=\"t3\"></a><a name=\"t3\"></a><a id=\"Inndob_69\"></a>Inndob存储分布</h2>\n<h3><a name=\"t4\"></a><a name=\"t4\"></a><a id=\"_71\"></a>创建空表查看空间变化</h3>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">mysql&gt; create table user(id bigint not null primary key auto_increment, \n    -&gt; name varchar(20) not null default '' comment '姓名', \n    -&gt; age tinyint not null default 0 comment 'age', \n    -&gt; gender char(1) not null default 'M'  comment '性别',\n    -&gt; phone varchar(16) not null default '' comment '手机号',\n    -&gt; create_time datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',\n    -&gt; update_time datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间'\n    -&gt; ) engine = InnoDB DEFAULT CHARSET=utf8mb4 COMMENT '用户信息表';\nQuery OK, 0 rows affected (0.26 sec)\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n</ul>\n<pre class=\"prettyprint\"><code class=\"prism language-bash has-numbering\"><span class=\"token comment\"># ls -lh user1.ibd </span>\n-rw-r----- 1 mysql mysql 96K Nov  6 12:48 user.ibd\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n</ul>\n<p>设置参数innodb_file_per_table=1时，创建表时会自动创建一个segment，同时分配一个extent，包含32个data page的来存储数据，这样创建的空表默认大小就是96KB，extent使用完之后会申请64个连接页，这样对于一些小表，或者undo segment，可以在开始时申请较少的空间，节省磁盘容量的开销。</p>\n<pre class=\"prettyprint\"><code class=\"prism language-shell has-numbering\"><span class=\"token comment\"># python2 py_innodb_page_info.py -v /data2/mysql/test/user.ibd</span>\npage offset 00000000, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>File Space Header<span class=\"token operator\">&gt;</span>\npage offset 00000001, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>Insert Buffer Bitmap<span class=\"token operator\">&gt;</span>\npage offset 00000002, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>File Segment inode<span class=\"token operator\">&gt;</span>\npage offset 00000003, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>B-tree Node<span class=\"token operator\">&gt;</span>, page level <span class=\"token operator\">&lt;</span>0000<span class=\"token operator\">&gt;</span>\npage offset 00000000, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>Freshly Allocated Page<span class=\"token operator\">&gt;</span>\npage offset 00000000, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>Freshly Allocated Page<span class=\"token operator\">&gt;</span>\nTotal number of page: 6:      <span class=\"token comment\">#总共分配的页数</span>\nFreshly Allocated Page: 2     <span class=\"token comment\">#可用的数据页</span>\nInsert Buffer Bitmap: 1       <span class=\"token comment\">#插入缓冲页</span>\nFile Space Header: 1          <span class=\"token comment\">#文件空间头</span>\nB-tree Node: 1                <span class=\"token comment\">#数据页</span>\nFile Segment inode: 1         <span class=\"token comment\">#文件端inonde，如果是在ibdata1.ibd上会有多个inode。</span>\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n</ul>\n<h3><a name=\"t5\"></a><a name=\"t5\"></a><a id=\"_108\"></a>插入数据后的空间变化</h3>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">mysql&gt; DELIMITER $$\nmysql&gt; CREATE PROCEDURE insert_user_data(num INTEGER) \n    -&gt; BEGIN\n    -&gt;     DECLARE v_i int unsigned DEFAULT 0;\n    -&gt; set autocommit= 0;\n    -&gt; WHILE v_i &lt; num DO\n    -&gt;    insert into user(`name`, age, gender, phone) values (CONCAT('lyn',v_i), mod(v_i,120), 'M', CONCAT('152',ROUND(RAND(1)*100000000)));\n    -&gt;  SET v_i = v_i+1;\n    -&gt; END WHILE;\n    -&gt; commit;\n    -&gt; END $$\nQuery OK, 0 rows affected (0.01 sec)\nmysql&gt; DELIMITER ;\n\n#插入10w数据\nmysql&gt; call insert_user_data(100000);\nQuery OK, 0 rows affected (6.69 sec)\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n<li>17</li>\n</ul>\n<pre class=\"prettyprint\"><code class=\"prism language-shell has-numbering\"><span class=\"token comment\"># ls -lh user.ibd</span>\n-rw-r----- 1 mysql mysql 14M Nov 6 10:58 /data2/mysql/test/user.ibd\n\n<span class=\"token comment\"># python2 py_innodb_page_info.py -v /data2/mysql/test/user.ibd</span>\npage offset 00000000, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>File Space Header<span class=\"token operator\">&gt;</span>\npage offset 00000001, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>Insert Buffer Bitmap<span class=\"token operator\">&gt;</span>\npage offset 00000002, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>File Segment inode<span class=\"token operator\">&gt;</span>\npage offset 00000003, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>B-tree Node<span class=\"token operator\">&gt;</span>, page level <span class=\"token operator\">&lt;</span>0001<span class=\"token operator\">&gt;</span>   <span class=\"token comment\">#增加了一个非叶子节点，树的高度从1变为2.</span>\n<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>\npage offset 00000000, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>Freshly Allocated Page<span class=\"token operator\">&gt;</span>\nTotal number of page: 896:\nFreshly Allocated Page: 493\nInsert Buffer Bitmap: 1\nFile Space Header: 1\nB-tree Node: 400\nFile Segment inode: 1\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n</ul>\n<h3><a name=\"t6\"></a><a name=\"t6\"></a><a id=\"delete_149\"></a>delete数据后的空间变化</h3>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">mysql&gt; select min(id),max(id),count(*) from user;\n+---------+---------+----------+\n| min(id) | max(id) | count(*) |\n+---------+---------+----------+\n|       1 |  100000 |   100000 |\n+---------+---------+----------+\n1 row in set (0.05 sec)\n#删除50000条数据，理论上空间应该从14MB变长7MB左右。\nmysql&gt; delete from user limit 50000;\nQuery OK, 50000 rows affected (0.25 sec)\n\n#数据文件大小依然是14MB，没有缩小。\n# ls -lh /data2/mysql/test/user1.ibd \n-rw-r----- 1 mysql mysql 14M Nov  6 13:22 /data2/mysql/test/user.ibd\n\n#数据页没有被回收。\n# python2 py_innodb_page_info.py -v /data2/mysql/test/user.ibd\npage offset 00000000, page type &lt;File Space Header&gt;\npage offset 00000001, page type &lt;Insert Buffer Bitmap&gt;\npage offset 00000002, page type &lt;File Segment inode&gt;\npage offset 00000003, page type &lt;B-tree Node&gt;, page level &lt;0001&gt;\n........................................................\npage offset 00000000, page type &lt;Freshly Allocated Page&gt;\nTotal number of page: 896:\nFreshly Allocated Page: 493\nInsert Buffer Bitmap: 1\nFile Space Header: 1\nB-tree Node: 400\nFile Segment inode: 1\n#在MySQL内部是标记删除，\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n<li>17</li>\n<li>18</li>\n<li>19</li>\n<li>20</li>\n<li>21</li>\n<li>22</li>\n<li>23</li>\n<li>24</li>\n<li>25</li>\n<li>26</li>\n<li>27</li>\n<li>28</li>\n<li>29</li>\n<li>30</li>\n</ul>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">mysql&gt; use information_schema;\n\nDatabase changed\nmysql&gt; SELECT A.SPACE AS TBL_SPACEID, A.TABLE_ID, A.NAME AS TABLE_NAME, FILE_FORMAT, ROW_FORMAT, SPACE_TYPE,  B.INDEX_ID , B.NAME AS INDEX_NAME, PAGE_NO, B.TYPE AS INDEX_TYPE FROM INNODB_SYS_TABLES A LEFT JOIN INNODB_SYS_INDEXES B ON A.TABLE_ID =B.TABLE_ID WHERE A.NAME = 'test/user1';\n+-------------+----------+------------+-------------+------------+------------+----------+------------+---------+------------+\n| TBL_SPACEID | TABLE_ID | TABLE_NAME | FILE_FORMAT | ROW_FORMAT | SPACE_TYPE | INDEX_ID | INDEX_NAME | PAGE_NO | INDEX_TYPE |\n+-------------+----------+------------+-------------+------------+------------+----------+------------+---------+------------+\n|        1283 |     1207 | test/user | Barracuda   | Dynamic    | Single     |     2236 | PRIMARY    |       3 |          3 |\n+-------------+----------+------------+-------------+------------+------------+----------+------------+---------+------------+\n1 row in set (0.01 sec)\n\nPAGE_NO = 3 标识B-tree的root page是3号页，INDEX_TYPE = 3是聚集索引。 INDEX_TYPE取值如下：\n0 = nonunique secondary index; \n1 = automatically generated clustered index (GEN_CLUST_INDEX); \n2 = unique nonclustered index; \n3 = clustered index; \n32 = full-text index;\n#收缩空间再后进行观察\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n<li>17</li>\n<li>18</li>\n</ul>\n<p>MySQL内部不会真正删除空间，而且做标记删除，即将delflag:N修改为delflag:Y，commit之后会会被purge进入删除链表，如果下一次insert更大的记录，delete之后的空间不会被重用，如果插入的记录小于等于delete的记录空会被重用，这块内容可以通过知数堂的innblock工具进行分析。</p>\n<h2><a name=\"t7\"></a><a name=\"t7\"></a><a id=\"Innodb_207\"></a>Innodb中的碎片</h2>\n<h3><a name=\"t8\"></a><a name=\"t8\"></a><a id=\"_209\"></a>碎片的产生</h3>\n<p>我们知道数据存储在文件系统上的，总是不能100%利用分配给它的物理空间，删除数据会在页面上留下一些&rdquo;空洞&rdquo;，或者随机写入（聚集索引非线性增加）会导致页分裂，页分裂导致页面的利用空间少于50%，另外对表进行增删改会引起对应的二级索引值的随机的增删改，也会导致索引结构中的数据页面上留下一些\"空洞\"，虽然这些空洞有可能会被重复利用，但终究会导致部分物理空间未被使用，也就是碎片。</p>\n<p>同时，即便是设置了填充因子为100%，Innodb也会主动留下page页面1/16的空间作为预留使用（An innodb_fill_factor setting of 100 leaves 1/16 of the space in clustered index pages free for future index growth）防止update带来的行溢出。</p>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">mysql&gt; select table_schema,\n    -&gt;        table_name,ENGINE,\n    -&gt;        round(DATA_LENGTH/1024/1024+ INDEX_LENGTH/1024/1024) total_mb,TABLE_ROWS,\n    -&gt;        round(DATA_LENGTH/1024/1024) data_mb, round(INDEX_LENGTH/1024/1024) index_mb, round(DATA_FREE/1024/1024) free_mb, round(DATA_FREE/DATA_LENGTH*100,2) free_ratio\n    -&gt; from information_schema.TABLES where  TABLE_SCHEMA= 'test'\n    -&gt; and TABLE_NAME= 'user';\n+--------------+------------+--------+----------+------------+---------+----------+---------+------------+\n| table_schema | table_name | ENGINE | total_mb | TABLE_ROWS | data_mb | index_mb | free_mb | free_ratio |\n+--------------+------------+--------+----------+------------+---------+----------+---------+------------+\n| test         | user      | InnoDB |        4 |      50000 |       4 |        0 |       6 |     149.42 |\n+--------------+------------+--------+----------+------------+---------+----------+---------+------------+\n1 row in set (0.00 sec)\n\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n</ul>\n<p>其中data_free是分配了未使用的字节数，并不能说明完全是碎片空间。</p>\n<h3><a name=\"t9\"></a><a name=\"t9\"></a><a id=\"_233\"></a>碎片的回收</h3>\n<p>对于InnoDB的表，可以通过以下命令来回收碎片，释放空间，这个是随机读IO操作，会比较耗时，也会阻塞表上正常的DML运行，同时需要占用额外更多的磁盘空间，对于RDS来说，可能会导致磁盘空间瞬间爆满，实例瞬间被锁定，应用无法做DML操作，所以禁止在线上环境去执行。</p>\n<pre class=\"prettyprint\"><code class=\"prism language-shell has-numbering\"><span class=\"token comment\">#执行InnoDB的碎片回收</span>\nmysql<span class=\"token operator\">&gt;</span> alter table user engine<span class=\"token operator\">=</span>InnoDB<span class=\"token punctuation\">;</span>\nQuery OK, 0 rows affected <span class=\"token punctuation\">(</span>9.00 sec<span class=\"token punctuation\">)</span>\nRecords: 0  Duplicates: 0  Warnings: 0\n\n<span class=\"token comment\">##执行完之后，数据文件大小从14MB降低到10M。</span>\n<span class=\"token comment\"># ls -lh /data2/mysql/test/user1.ibd </span>\n-rw-r----- 1 mysql mysql 10M Nov 6 16:18 /data2/mysql/test/user.ibd\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n</ul>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">mysql&gt; select table_schema,        table_name,ENGINE,        round(DATA_LENGTH/1024/1024+ INDEX_LENGTH/1024/1024) total_mb,TABLE_ROWS,        round(DATA_LENGTH/1024/1024) data_mb, round(INDEX_LENGTH/1024/1024) index_mb, round(DATA_FREE/1024/1024) free_mb, round(DATA_FREE/DATA_LENGTH*100,2) free_ratio from information_schema.TABLES where  TABLE_SCHEMA= 'test' and TABLE_NAME= 'user';\n+--------------+------------+--------+----------+------------+---------+----------+---------+------------+\n| table_schema | table_name | ENGINE | total_mb | TABLE_ROWS | data_mb | index_mb | free_mb | free_ratio |\n+--------------+------------+--------+----------+------------+---------+----------+---------+------------+\n| test         | user      | InnoDB |        5 |      50000 |       5 |        0 |       2 |      44.29 |\n+--------------+------------+--------+----------+------------+---------+----------+---------+------------+\n1 row in set (0.00 sec)\n\n\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n</ul>\n<h2><a name=\"t10\"></a><a name=\"t10\"></a><a id=\"deleteSQL_260\"></a>delete对SQL的影响</h2>\n<h3><a name=\"t11\"></a><a name=\"t11\"></a><a id=\"SQL_262\"></a>未删除前的SQL执行情况</h3>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">#插入100W数据\nmysql&gt; call insert_user_data(1000000);\nQuery OK, 0 rows affected (35.99 sec)\n\n#添加相关索引\nmysql&gt; alter table user add index idx_name(name), add index idx_phone(phone);\nQuery OK, 0 rows affected (6.00 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\n#表上索引统计信息\nmysql&gt; show index from user;\n+-------+------------+-----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+\n| Table | Non_unique | Key_name  | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment |\n+-------+------------+-----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+\n| user  |          0 | PRIMARY   |            1 | id          | A         |      996757 |     NULL | NULL   |      | BTREE      |         |               |\n| user  |          1 | idx_name  |            1 | name        | A         |      996757 |     NULL | NULL   |      | BTREE      |         |               |\n| user  |          1 | idx_phone |            1 | phone       | A         |           2 |     NULL | NULL   |      | BTREE      |         |               |\n+-------+------------+-----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+\n3 rows in set (0.00 sec)\n\n#重置状态变量计数\nmysql&gt; flush status;\nQuery OK, 0 rows affected (0.00 sec)\n\n#执行SQL语句\nmysql&gt; select id, age ,phone from user where name like 'lyn12%';\n+--------+-----+-------------+\n| id     | age | phone       |\n+--------+-----+-------------+\n|    124 |   3 | 15240540354 |\n|   1231 |  30 | 15240540354 |\n|  12301 |  60 | 15240540354 |\n.............................\n| 129998 |  37 | 15240540354 |\n| 129999 |  38 | 15240540354 |\n| 130000 |  39 | 15240540354 |\n+--------+-----+-------------+\n11111 rows in set (0.03 sec)\n\nmysql&gt; explain select id, age ,phone from user where name like 'lyn12%';\n+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+\n| id | select_type | table | type  | possible_keys | key      | key_len | ref  | rows  | Extra                 |\n+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+\n|  1 | SIMPLE      | user  | range | idx_name      | idx_name | 82      | NULL | 22226 | Using index condition |\n+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+\n1 row in set (0.00 sec)\n\n#查看相关状态呢变量\nmysql&gt; select * from information_schema.session_status where variable_name in('Last_query_cost','Handler_read_next','Innodb_pages_read','Innodb_data_reads','Innodb_pages_read');\n+-------------------+----------------+\n| VARIABLE_NAME     | VARIABLE_VALUE |\n+-------------------+----------------+\n| HANDLER_READ_NEXT | 11111          |    #请求读的行数\n| INNODB_DATA_READS | 7868409        |    #数据物理读的总数\n| INNODB_PAGES_READ | 7855239        |    #逻辑读的总数\n| LAST_QUERY_COST   | 10.499000      |    #SQL语句的成本COST，主要包括IO_COST和CPU_COST。\n+-------------------+----------------+\n4 rows in set (0.00 sec)\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n<li>17</li>\n<li>18</li>\n<li>19</li>\n<li>20</li>\n<li>21</li>\n<li>22</li>\n<li>23</li>\n<li>24</li>\n<li>25</li>\n<li>26</li>\n<li>27</li>\n<li>28</li>\n<li>29</li>\n<li>30</li>\n<li>31</li>\n<li>32</li>\n<li>33</li>\n<li>34</li>\n<li>35</li>\n<li>36</li>\n<li>37</li>\n<li>38</li>\n<li>39</li>\n<li>40</li>\n<li>41</li>\n<li>42</li>\n<li>43</li>\n<li>44</li>\n<li>45</li>\n<li>46</li>\n<li>47</li>\n<li>48</li>\n<li>49</li>\n<li>50</li>\n<li>51</li>\n<li>52</li>\n<li>53</li>\n<li>54</li>\n<li>55</li>\n<li>56</li>\n<li>57</li>\n<li>58</li>\n</ul>\n<h3><a name=\"t12\"></a><a name=\"t12\"></a><a id=\"SQL_325\"></a>删除后的SQL执行情况</h3>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">#删除50w数据\nmysql&gt; delete from user limit 500000;\nQuery OK, 500000 rows affected (3.70 sec)\n\n#分析表统计信息\nmysql&gt; analyze table user;\n+-----------+---------+----------+----------+\n| Table     | Op      | Msg_type | Msg_text |\n+-----------+---------+----------+----------+\n| test.user | analyze | status   | OK       |\n+-----------+---------+----------+----------+\n1 row in set (0.01 sec)\n\n#重置状态变量计数\nmysql&gt; flush status;\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql&gt; select id, age ,phone from user where name like 'lyn12%';\nEmpty set (0.05 sec)\n\nmysql&gt; explain select id, age ,phone from user where name like 'lyn12%';\n+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+\n| id | select_type | table | type  | possible_keys | key      | key_len | ref  | rows  | Extra                 |\n+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+\n|  1 | SIMPLE      | user  | range | idx_name      | idx_name | 82      | NULL | 22226 | Using index condition |\n+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+\n1 row in set (0.00 sec)\n\nmysql&gt; select * from information_schema.session_status where variable_name in('Last_query_cost','Handler_read_next','Innodb_pages_read','Innodb_data_reads','Innodb_pages_read');\n+-------------------+----------------+\n| VARIABLE_NAME     | VARIABLE_VALUE |\n+-------------------+----------------+\n| HANDLER_READ_NEXT | 0              |\n| INNODB_DATA_READS | 7868409        |\n| INNODB_PAGES_READ | 7855239        |\n| LAST_QUERY_COST   | 10.499000      |\n+-------------------+----------------+\n4 rows in set (0.00 sec)\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n<li>17</li>\n<li>18</li>\n<li>19</li>\n<li>20</li>\n<li>21</li>\n<li>22</li>\n<li>23</li>\n<li>24</li>\n<li>25</li>\n<li>26</li>\n<li>27</li>\n<li>28</li>\n<li>29</li>\n<li>30</li>\n<li>31</li>\n<li>32</li>\n<li>33</li>\n<li>34</li>\n<li>35</li>\n<li>36</li>\n<li>37</li>\n<li>38</li>\n</ul>\n<h3><a name=\"t13\"></a><a name=\"t13\"></a><a id=\"_368\"></a>结果统计分析</h3>\n<div class=\"table-box\">\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>COST</th>\n<th>物理读次数</th>\n<th>逻辑读次数</th>\n<th>扫描行数</th>\n<th>返回行数</th>\n<th>执行时间</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>初始化插入100W</td>\n<td>10.499000</td>\n<td>7868409</td>\n<td>7855239</td>\n<td>22226</td>\n<td>11111</td>\n<td>30ms</td>\n</tr>\n<tr>\n<td>100W随机删除50W</td>\n<td>10.499000</td>\n<td>7868409</td>\n<td>7855239</td>\n<td>22226</td>\n<td>0</td>\n<td>50ms</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>这也说明对普通的大表，想要通过delete数据来对表进行瘦身是不现实的，所以在任何时候不要用delete去删除数据，应该使用优雅的标记删除。</p>\n<h2><a name=\"t14\"></a><a name=\"t14\"></a><a id=\"delete_377\"></a>delete优化建议</h2>\n<h3><a name=\"t15\"></a><a name=\"t15\"></a><a id=\"_379\"></a>控制业务账号权限</h3>\n<p>对于一个大的系统来说，需要根据业务特点去拆分子系统，每个子系统可以看做是一个service，例如美团APP，上面有很多服务，核心的服务有用户服务user-service，搜索服务search-service，商品product-service，位置服务location-service，价格服务price-service等。每个服务对应一个数据库，为该数据库创建单独账号，同时只授予DML权限且没有delete权限，同时禁止跨库访问。</p>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">#创建用户数据库并授权\ncreate database mt_user charset utf8mb4;\ngrant USAGE, SELECT, INSERT, UPDATE ON mt_user.*  to 'w_user'@'%' identified by 't$W*g@gaHTGi123456';\nflush privileges;\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n</ul>\n<h3><a name=\"t16\"></a><a name=\"t16\"></a><a id=\"delete_390\"></a>delete改为标记删除</h3>\n<p>在MySQL数据库建模规范中有4个公共字段，基本上每个表必须有的，同时在create_time列要创建索引，有两方面的好处：</p>\n<ol>\n<li>一些查询业务场景都会有一个默认的时间段，比如7天或者一个月，都是通过create_time去过滤，走索引扫描更快。</li>\n<li>一些核心的业务表需要以T +1的方式抽取数据仓库中，比如每天晚上00:30抽取前一天的数据，都是通过create_time过滤的。</li>\n</ol>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">`id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '主键id',\n`is_deleted` tinyint(4) NOT NULL DEFAULT '0' COMMENT '是否逻辑删除：0：未删除，1：已删除',\n`create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',\n`update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间'\n\n#有了删除标记，业务接口的delete操作就可以转换为update\nupdate user set is_deleted = 1 where user_id = 1213;\n\n#查询的时候需要带上is_deleted过滤\nselect id, age ,phone from user where is_deleted = 0 and name like 'lyn12%';\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n</ul>\n<h2><a name=\"t17\"></a><a name=\"t17\"></a><a id=\"_410\"></a>数据归档方式</h2>\n<h3><a name=\"t18\"></a><a name=\"t18\"></a><a id=\"_412\"></a>通用数据归档方法</h3>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">#1. 创建归档表，一般在原表名后面添加_bak。\nCREATE TABLE `ota_order_bak` (\n  `id` bigint(11) NOT NULL AUTO_INCREMENT COMMENT '主键',\n  `order_id` varchar(255) DEFAULT NULL COMMENT '订单id',\n  `ota_id` varchar(255) DEFAULT NULL COMMENT 'ota',\n  `check_in_date` varchar(255) DEFAULT NULL COMMENT '入住日期',\n  `check_out_date` varchar(255) DEFAULT NULL COMMENT '离店日期',\n  `hotel_id` varchar(255) DEFAULT NULL COMMENT '酒店ID',\n  `guest_name` varchar(255) DEFAULT NULL COMMENT '顾客',\n  `purcharse_time` timestamp NULL DEFAULT NULL COMMENT '购买时间',\n  `create_time` datetime DEFAULT NULL,\n  `update_time` datetime DEFAULT NULL,\n  `create_user` varchar(255) DEFAULT NULL,\n  `update_user` varchar(255) DEFAULT NULL,\n  `status` int(4) DEFAULT '1' COMMENT '状态 ： 1 正常 ， 0 删除',\n  `hotel_name` varchar(255) DEFAULT NULL,\n  `price` decimal(10,0) DEFAULT NULL,\n  `remark` longtext,\n  PRIMARY KEY (`id`),\n  KEY `IDX_order_id` (`order_id`) USING BTREE,\n  KEY `hotel_name` (`hotel_name`) USING BTREE,\n  KEY `ota_id` (`ota_id`) USING BTREE,\n  KEY `IDX_purcharse_time` (`purcharse_time`) USING BTREE,\n  KEY `IDX_create_time` (`create_time`) USING BTREE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\nPARTITION BY RANGE (to_days(create_time)) ( \nPARTITION p201808 VALUES LESS THAN (to_days('2018-09-01')), \nPARTITION p201809 VALUES LESS THAN (to_days('2018-10-01')), \nPARTITION p201810 VALUES LESS THAN (to_days('2018-11-01')), \nPARTITION p201811 VALUES LESS THAN (to_days('2018-12-01')), \nPARTITION p201812 VALUES LESS THAN (to_days('2019-01-01')), \nPARTITION p201901 VALUES LESS THAN (to_days('2019-02-01')), \nPARTITION p201902 VALUES LESS THAN (to_days('2019-03-01')), \nPARTITION p201903 VALUES LESS THAN (to_days('2019-04-01')), \nPARTITION p201904 VALUES LESS THAN (to_days('2019-05-01')), \nPARTITION p201905 VALUES LESS THAN (to_days('2019-06-01')), \nPARTITION p201906 VALUES LESS THAN (to_days('2019-07-01')), \nPARTITION p201907 VALUES LESS THAN (to_days('2019-08-01')), \nPARTITION p201908 VALUES LESS THAN (to_days('2019-09-01')), \nPARTITION p201909 VALUES LESS THAN (to_days('2019-10-01')), \nPARTITION p201910 VALUES LESS THAN (to_days('2019-11-01')), \nPARTITION p201911 VALUES LESS THAN (to_days('2019-12-01')), \nPARTITION p201912 VALUES LESS THAN (to_days('2020-01-01')));\n\n#2. 插入原表中无效的数据（需要跟开发同学确认数据保留范围）\ncreate table tbl_p201808 as select * from ota_order where create_time between '2018-08-01 00:00:00' and '2018-08-31 23:59:59';\n\n#3. 跟归档表分区做分区交换\nalter table ota_order_bak exchange partition p201808 with table tbl_p201808; \n\n#4. 删除原表中已经规范的数据\ndelete from ota_order where create_time between '2018-08-01 00:00:00' and '2018-08-31 23:59:59' limit 3000;\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n<li>17</li>\n<li>18</li>\n<li>19</li>\n<li>20</li>\n<li>21</li>\n<li>22</li>\n<li>23</li>\n<li>24</li>\n<li>25</li>\n<li>26</li>\n<li>27</li>\n<li>28</li>\n<li>29</li>\n<li>30</li>\n<li>31</li>\n<li>32</li>\n<li>33</li>\n<li>34</li>\n<li>35</li>\n<li>36</li>\n<li>37</li>\n<li>38</li>\n<li>39</li>\n<li>40</li>\n<li>41</li>\n<li>42</li>\n<li>43</li>\n<li>44</li>\n<li>45</li>\n<li>46</li>\n<li>47</li>\n<li>48</li>\n<li>49</li>\n<li>50</li>\n<li>51</li>\n<li>52</li>\n</ul>\n<h3><a name=\"t19\"></a><a name=\"t19\"></a><a id=\"_469\"></a>优化后的归档方式</h3>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">#1. 创建中间表\nCREATE TABLE `ota_order_2020` (........) ENGINE=InnoDB DEFAULT CHARSET=utf8\nPARTITION BY RANGE (to_days(create_time)) ( \nPARTITION p201808 VALUES LESS THAN (to_days('2018-09-01')), \nPARTITION p201809 VALUES LESS THAN (to_days('2018-10-01')), \nPARTITION p201810 VALUES LESS THAN (to_days('2018-11-01')), \nPARTITION p201811 VALUES LESS THAN (to_days('2018-12-01')), \nPARTITION p201812 VALUES LESS THAN (to_days('2019-01-01')), \nPARTITION p201901 VALUES LESS THAN (to_days('2019-02-01')), \nPARTITION p201902 VALUES LESS THAN (to_days('2019-03-01')), \nPARTITION p201903 VALUES LESS THAN (to_days('2019-04-01')), \nPARTITION p201904 VALUES LESS THAN (to_days('2019-05-01')), \nPARTITION p201905 VALUES LESS THAN (to_days('2019-06-01')), \nPARTITION p201906 VALUES LESS THAN (to_days('2019-07-01')), \nPARTITION p201907 VALUES LESS THAN (to_days('2019-08-01')), \nPARTITION p201908 VALUES LESS THAN (to_days('2019-09-01')), \nPARTITION p201909 VALUES LESS THAN (to_days('2019-10-01')), \nPARTITION p201910 VALUES LESS THAN (to_days('2019-11-01')), \nPARTITION p201911 VALUES LESS THAN (to_days('2019-12-01')), \nPARTITION p201912 VALUES LESS THAN (to_days('2020-01-01')));\n\n#2. 插入原表中有效的数据，如果数据量在100W左右可以在业务低峰期直接插入，如果比较大，建议采用dataX来做，可以控制频率和大小，之前我这边用Go封装了dataX可以实现自动生成json文件，自定义大小去执行。\ninsert into ota_order_2020 select * from ota_order where create_time between '2020-08-01 00:00:00' and '2020-08-31 23:59:59';\n\n#3. 表重命名\nalter table ota_order rename to ota_order_bak;  \nalter table ota_order_2020 rename to ota_order;\n#4. 插入差异数据\ninsert into ota_order select * from ota_order_bak a where not exists (select 1 from ota_order b where a.id = b.id);\n#5. ota_order_bak改造成分区表，如果表比较大不建议直接改造，可以先创建好分区表，通过dataX把导入进去即可。\n\n#6. 后续的归档方法\n#创建中间普遍表\ncreate table ota_order_mid like ota_order;\n#交换原表无效数据分区到普通表\nalter table ota_order exchange partition p201808 with table ota_order_mid; \n##交换普通表数据到归档表的相应分区\nalter table ota_order_bak exchange partition p201808 with table ota_order_mid; \n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n<li>17</li>\n<li>18</li>\n<li>19</li>\n<li>20</li>\n<li>21</li>\n<li>22</li>\n<li>23</li>\n<li>24</li>\n<li>25</li>\n<li>26</li>\n<li>27</li>\n<li>28</li>\n<li>29</li>\n<li>30</li>\n<li>31</li>\n<li>32</li>\n<li>33</li>\n<li>34</li>\n<li>35</li>\n<li>36</li>\n<li>37</li>\n<li>38</li>\n</ul>\n<p>这样原表和归档表都是按月的分区表，只需要创建一个中间普通表，在业务低峰期做两次分区交换，既可以删除无效数据，又能回收空，而且没有空间碎片，不会影响表上的索引及SQL的执行计划。</p>\n<h2><a name=\"t20\"></a><a name=\"t20\"></a><a id=\"_514\"></a>总结</h2>\n<p>通过从InnoDB存储空间分布，delete对性能的影响可以看到，delete物理删除既不能释放磁盘空间，而且会产生大量的碎片，导致索引频繁分裂，影响SQL执行计划的稳定性；</p>\n<p>同时在碎片回收时，会耗用大量的CPU，磁盘空间，影响表上正常的DML操作。</p>\n<p>在业务代码层面，应该做逻辑标记删除，避免物理删除；为了实现数据归档需求，可以用采用MySQL分区表特性来实现，都是DDL操作，没有碎片产生。</p>\n<p>另外一个比较好的方案采用Clickhouse，对有生命周期的数据表可以使用Clickhouse存储，利用其TTL特性实现无效数据自动清理。</p>\n<p>&nbsp;</p>","blogGoods":0,"blogId":"1330877080455553024","blogRead":0,"blogRemark":"aaaaa","blogTitle":"面试官不讲武德问我：为什么MySQL不建议使用delete删除数据？","blogType":1,"createdTime":1606111996000,"version":2},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 22:22:47.031 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 22:22:52.089 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlBlogMapper.getById.debug:159 -==>  Preparing: select blog_id, blog_title, blog_content, blog_goods, blog_image, blog_read, blog_collection, blog_type, blog_remark, blog_comment, blog_source, created_time, version from bl_blog where blog_id = ? and deleted = 0 
2020-11-23 22:22:52.090 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlBlogMapper.getById.debug:159 -==> Parameters: 1330877080455553024(String)
2020-11-23 22:22:52.245 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlBlogMapper.getById.debug:159 -<==      Total: 1
2020-11-23 22:22:52.288 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 22:22:52.289 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/get/1330877080455553024(String), [1330877080455553024](String), 1(Integer), null, GET(String), 196(Long), {"code":20000,"data":{"blogCollection":0,"blogComment":0,"blogContent":"<h2>前言</h2>\n<p>我负责的有几个系统随着业务量的增长，存储在MySQL中的数据日益剧增，我当时就想现在的业务方不讲武德，搞偷袭，趁我没反应过来把很多表，很快，很快啊都打到了亿级别，我大意了，没有闪，这就导致跟其Join的表的SQL变得很慢，对的应用接口的response time也变长了，影响了用户体验。</p>\n<p>事后我找到业务方，我批评了他们跟他们说要讲武德，连忙跟我道歉，这个事情才就此作罢，走的时候我对他们说下次不要这样了，耗子尾汁，好好反思。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/3c93aececcb9e763f5476362c4e88710.png\" alt=\"\" /></p>\n<p>骂归骂，事情还是得解决，时候我分析原因发现，发现有些表的数据量增长很快，对应SQL扫描了很多无效数据，导致SQL慢了下来，通过确认之后，这些大表都是一些流水、记录、日志类型数据，只需要保留1到3个月，此时需要对表做数据清理实现瘦身，一般都会想到用insert + delete的方式去清理。</p>\n<p>这篇文章我会从InnoDB存储空间分布，delete对性能的影响，以及优化建议方面解释为什么不建议delete删除数据。</p>\n<h2><a name=\"t1\"></a><a name=\"t1\"></a><a id=\"InnoDB_16\"></a>InnoDB存储架构</h2>\n<p><img src=\"https://img-blog.csdnimg.cn/img_convert/5c66ffe9749c58e1613d2519f7ea7211.png\" alt=\"\" /></p>\n<p>从这张图可以看到，InnoDB存储结构主要包括两部分：逻辑存储结构和物理存储结构。</p>\n<p>逻辑上是由表空间tablespace &mdash;&gt; 段segment或者inode &mdash;&gt; 区Extent &mdash;&mdash;&gt;数据页Page构成，Innodb逻辑管理单位是segment，空间分配的最小单位是extent，每个segment都会从表空间FREE_PAGE中分配32个page，当这32个page不够用时，会按照以下原则进行扩展：如果当前小于1个extent，则扩展到1个extent；当表空间小于32MB时，每次扩展一个extent；表空间大于32MB，每次扩展4个extent。</p>\n<p>物理上主要由系统用户数据文件，日志文件组成，数据文件主要存储MySQL字典数据和用户数据，日志文件记录的是data page的变更记录，用于MySQL Crash时的恢复。</p>\n<h2><a name=\"t2\"></a><a name=\"t2\"></a><a id=\"Innodb_26\"></a>Innodb表空间</h2>\n<p>InnoDB存储包括三类表空间：系统表空间，用户表空间，Undo表空间。</p>\n<p><strong>系统表空间：</strong>&nbsp;主要存储MySQL内部的数据字典数据，如information_schema下的数据。</p>\n<p><strong>用户表空间：</strong>&nbsp;当开启innodb_file_per_table=1时，数据表从系统表空间独立出来存储在以table_name.ibd命令的数据文件中，结构信息存储在table_name.frm文件中。</p>\n<p><strong>Undo表空间：</strong>&nbsp;存储Undo信息，如快照一致读和flashback都是利用undo信息。</p>\n<p>从MySQL 8.0开始允许用户自定义表空间，具体语法如下：</p>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">CREATE TABLESPACE tablespace_name\n    ADD DATAFILE 'file_name'               #数据文件名\n    USE LOGFILE GROUP logfile_group        #自定义日志文件组，一般每组2个logfile。\n    [EXTENT_SIZE [=] extent_size]          #区大小\n    [INITIAL_SIZE [=] initial_size]        #初始化大小 \n    [AUTOEXTEND_SIZE [=] autoextend_size]  #自动扩宽尺寸\n    [MAX_SIZE [=] max_size]                #单个文件最大size，最大是32G。\n    [NODEGROUP [=] nodegroup_id]           #节点组\n    [WAIT]\n    [COMMENT [=] comment_text]\n    ENGINE [=] engine_name\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n</ul>\n<p>这样的好处是可以做到数据的冷热分离，分别用HDD和SSD来存储，既能实现数据的高效访问，又能节约成本，比如可以添加两块500G硬盘，经过创建卷组vg，划分逻辑卷lv，创建数据目录并mount相应的lv，假设划分的两个目录分别是/hot_data 和 /cold_data。</p>\n<p>这样就可以将核心的业务表如用户表，订单表存储在高性能SSD盘上，一些日志，流水表存储在普通的HDD上，主要的操作步骤如下：</p>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">#创建热数据表空间\ncreate tablespace tbs_data_hot add datafile '/hot_data/tbs_data_hot01.dbf' max_size 20G;\n#创建核心业务表存储在热数据表空间\ncreate table booking(id bigint not null primary key auto_increment, &hellip;&hellip; ) tablespace tbs_data_hot;\n#创建冷数据表空间\ncreate tablespace tbs_data_cold add datafile '/hot_data/tbs_data_cold01.dbf' max_size 20G;\n#创建日志，流水，备份类的表存储在冷数据表空间\ncreate table payment_log(id bigint not null primary key auto_increment, &hellip;&hellip; ) tablespace tbs_data_cold;\n#可以移动表到另一个表空间\nalter table payment_log tablespace tbs_data_hot;\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n</ul>\n<h2><a name=\"t3\"></a><a name=\"t3\"></a><a id=\"Inndob_69\"></a>Inndob存储分布</h2>\n<h3><a name=\"t4\"></a><a name=\"t4\"></a><a id=\"_71\"></a>创建空表查看空间变化</h3>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">mysql&gt; create table user(id bigint not null primary key auto_increment, \n    -&gt; name varchar(20) not null default '' comment '姓名', \n    -&gt; age tinyint not null default 0 comment 'age', \n    -&gt; gender char(1) not null default 'M'  comment '性别',\n    -&gt; phone varchar(16) not null default '' comment '手机号',\n    -&gt; create_time datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',\n    -&gt; update_time datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间'\n    -&gt; ) engine = InnoDB DEFAULT CHARSET=utf8mb4 COMMENT '用户信息表';\nQuery OK, 0 rows affected (0.26 sec)\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n</ul>\n<pre class=\"prettyprint\"><code class=\"prism language-bash has-numbering\"><span class=\"token comment\"># ls -lh user1.ibd </span>\n-rw-r----- 1 mysql mysql 96K Nov  6 12:48 user.ibd\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n</ul>\n<p>设置参数innodb_file_per_table=1时，创建表时会自动创建一个segment，同时分配一个extent，包含32个data page的来存储数据，这样创建的空表默认大小就是96KB，extent使用完之后会申请64个连接页，这样对于一些小表，或者undo segment，可以在开始时申请较少的空间，节省磁盘容量的开销。</p>\n<pre class=\"prettyprint\"><code class=\"prism language-shell has-numbering\"><span class=\"token comment\"># python2 py_innodb_page_info.py -v /data2/mysql/test/user.ibd</span>\npage offset 00000000, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>File Space Header<span class=\"token operator\">&gt;</span>\npage offset 00000001, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>Insert Buffer Bitmap<span class=\"token operator\">&gt;</span>\npage offset 00000002, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>File Segment inode<span class=\"token operator\">&gt;</span>\npage offset 00000003, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>B-tree Node<span class=\"token operator\">&gt;</span>, page level <span class=\"token operator\">&lt;</span>0000<span class=\"token operator\">&gt;</span>\npage offset 00000000, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>Freshly Allocated Page<span class=\"token operator\">&gt;</span>\npage offset 00000000, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>Freshly Allocated Page<span class=\"token operator\">&gt;</span>\nTotal number of page: 6:      <span class=\"token comment\">#总共分配的页数</span>\nFreshly Allocated Page: 2     <span class=\"token comment\">#可用的数据页</span>\nInsert Buffer Bitmap: 1       <span class=\"token comment\">#插入缓冲页</span>\nFile Space Header: 1          <span class=\"token comment\">#文件空间头</span>\nB-tree Node: 1                <span class=\"token comment\">#数据页</span>\nFile Segment inode: 1         <span class=\"token comment\">#文件端inonde，如果是在ibdata1.ibd上会有多个inode。</span>\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n</ul>\n<h3><a name=\"t5\"></a><a name=\"t5\"></a><a id=\"_108\"></a>插入数据后的空间变化</h3>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">mysql&gt; DELIMITER $$\nmysql&gt; CREATE PROCEDURE insert_user_data(num INTEGER) \n    -&gt; BEGIN\n    -&gt;     DECLARE v_i int unsigned DEFAULT 0;\n    -&gt; set autocommit= 0;\n    -&gt; WHILE v_i &lt; num DO\n    -&gt;    insert into user(`name`, age, gender, phone) values (CONCAT('lyn',v_i), mod(v_i,120), 'M', CONCAT('152',ROUND(RAND(1)*100000000)));\n    -&gt;  SET v_i = v_i+1;\n    -&gt; END WHILE;\n    -&gt; commit;\n    -&gt; END $$\nQuery OK, 0 rows affected (0.01 sec)\nmysql&gt; DELIMITER ;\n\n#插入10w数据\nmysql&gt; call insert_user_data(100000);\nQuery OK, 0 rows affected (6.69 sec)\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n<li>17</li>\n</ul>\n<pre class=\"prettyprint\"><code class=\"prism language-shell has-numbering\"><span class=\"token comment\"># ls -lh user.ibd</span>\n-rw-r----- 1 mysql mysql 14M Nov 6 10:58 /data2/mysql/test/user.ibd\n\n<span class=\"token comment\"># python2 py_innodb_page_info.py -v /data2/mysql/test/user.ibd</span>\npage offset 00000000, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>File Space Header<span class=\"token operator\">&gt;</span>\npage offset 00000001, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>Insert Buffer Bitmap<span class=\"token operator\">&gt;</span>\npage offset 00000002, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>File Segment inode<span class=\"token operator\">&gt;</span>\npage offset 00000003, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>B-tree Node<span class=\"token operator\">&gt;</span>, page level <span class=\"token operator\">&lt;</span>0001<span class=\"token operator\">&gt;</span>   <span class=\"token comment\">#增加了一个非叶子节点，树的高度从1变为2.</span>\n<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>\npage offset 00000000, page <span class=\"token function\">type</span> <span class=\"token operator\">&lt;</span>Freshly Allocated Page<span class=\"token operator\">&gt;</span>\nTotal number of page: 896:\nFreshly Allocated Page: 493\nInsert Buffer Bitmap: 1\nFile Space Header: 1\nB-tree Node: 400\nFile Segment inode: 1\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n</ul>\n<h3><a name=\"t6\"></a><a name=\"t6\"></a><a id=\"delete_149\"></a>delete数据后的空间变化</h3>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">mysql&gt; select min(id),max(id),count(*) from user;\n+---------+---------+----------+\n| min(id) | max(id) | count(*) |\n+---------+---------+----------+\n|       1 |  100000 |   100000 |\n+---------+---------+----------+\n1 row in set (0.05 sec)\n#删除50000条数据，理论上空间应该从14MB变长7MB左右。\nmysql&gt; delete from user limit 50000;\nQuery OK, 50000 rows affected (0.25 sec)\n\n#数据文件大小依然是14MB，没有缩小。\n# ls -lh /data2/mysql/test/user1.ibd \n-rw-r----- 1 mysql mysql 14M Nov  6 13:22 /data2/mysql/test/user.ibd\n\n#数据页没有被回收。\n# python2 py_innodb_page_info.py -v /data2/mysql/test/user.ibd\npage offset 00000000, page type &lt;File Space Header&gt;\npage offset 00000001, page type &lt;Insert Buffer Bitmap&gt;\npage offset 00000002, page type &lt;File Segment inode&gt;\npage offset 00000003, page type &lt;B-tree Node&gt;, page level &lt;0001&gt;\n........................................................\npage offset 00000000, page type &lt;Freshly Allocated Page&gt;\nTotal number of page: 896:\nFreshly Allocated Page: 493\nInsert Buffer Bitmap: 1\nFile Space Header: 1\nB-tree Node: 400\nFile Segment inode: 1\n#在MySQL内部是标记删除，\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n<li>17</li>\n<li>18</li>\n<li>19</li>\n<li>20</li>\n<li>21</li>\n<li>22</li>\n<li>23</li>\n<li>24</li>\n<li>25</li>\n<li>26</li>\n<li>27</li>\n<li>28</li>\n<li>29</li>\n<li>30</li>\n</ul>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">mysql&gt; use information_schema;\n\nDatabase changed\nmysql&gt; SELECT A.SPACE AS TBL_SPACEID, A.TABLE_ID, A.NAME AS TABLE_NAME, FILE_FORMAT, ROW_FORMAT, SPACE_TYPE,  B.INDEX_ID , B.NAME AS INDEX_NAME, PAGE_NO, B.TYPE AS INDEX_TYPE FROM INNODB_SYS_TABLES A LEFT JOIN INNODB_SYS_INDEXES B ON A.TABLE_ID =B.TABLE_ID WHERE A.NAME = 'test/user1';\n+-------------+----------+------------+-------------+------------+------------+----------+------------+---------+------------+\n| TBL_SPACEID | TABLE_ID | TABLE_NAME | FILE_FORMAT | ROW_FORMAT | SPACE_TYPE | INDEX_ID | INDEX_NAME | PAGE_NO | INDEX_TYPE |\n+-------------+----------+------------+-------------+------------+------------+----------+------------+---------+------------+\n|        1283 |     1207 | test/user | Barracuda   | Dynamic    | Single     |     2236 | PRIMARY    |       3 |          3 |\n+-------------+----------+------------+-------------+------------+------------+----------+------------+---------+------------+\n1 row in set (0.01 sec)\n\nPAGE_NO = 3 标识B-tree的root page是3号页，INDEX_TYPE = 3是聚集索引。 INDEX_TYPE取值如下：\n0 = nonunique secondary index; \n1 = automatically generated clustered index (GEN_CLUST_INDEX); \n2 = unique nonclustered index; \n3 = clustered index; \n32 = full-text index;\n#收缩空间再后进行观察\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n<li>17</li>\n<li>18</li>\n</ul>\n<p>MySQL内部不会真正删除空间，而且做标记删除，即将delflag:N修改为delflag:Y，commit之后会会被purge进入删除链表，如果下一次insert更大的记录，delete之后的空间不会被重用，如果插入的记录小于等于delete的记录空会被重用，这块内容可以通过知数堂的innblock工具进行分析。</p>\n<h2><a name=\"t7\"></a><a name=\"t7\"></a><a id=\"Innodb_207\"></a>Innodb中的碎片</h2>\n<h3><a name=\"t8\"></a><a name=\"t8\"></a><a id=\"_209\"></a>碎片的产生</h3>\n<p>我们知道数据存储在文件系统上的，总是不能100%利用分配给它的物理空间，删除数据会在页面上留下一些&rdquo;空洞&rdquo;，或者随机写入（聚集索引非线性增加）会导致页分裂，页分裂导致页面的利用空间少于50%，另外对表进行增删改会引起对应的二级索引值的随机的增删改，也会导致索引结构中的数据页面上留下一些\"空洞\"，虽然这些空洞有可能会被重复利用，但终究会导致部分物理空间未被使用，也就是碎片。</p>\n<p>同时，即便是设置了填充因子为100%，Innodb也会主动留下page页面1/16的空间作为预留使用（An innodb_fill_factor setting of 100 leaves 1/16 of the space in clustered index pages free for future index growth）防止update带来的行溢出。</p>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">mysql&gt; select table_schema,\n    -&gt;        table_name,ENGINE,\n    -&gt;        round(DATA_LENGTH/1024/1024+ INDEX_LENGTH/1024/1024) total_mb,TABLE_ROWS,\n    -&gt;        round(DATA_LENGTH/1024/1024) data_mb, round(INDEX_LENGTH/1024/1024) index_mb, round(DATA_FREE/1024/1024) free_mb, round(DATA_FREE/DATA_LENGTH*100,2) free_ratio\n    -&gt; from information_schema.TABLES where  TABLE_SCHEMA= 'test'\n    -&gt; and TABLE_NAME= 'user';\n+--------------+------------+--------+----------+------------+---------+----------+---------+------------+\n| table_schema | table_name | ENGINE | total_mb | TABLE_ROWS | data_mb | index_mb | free_mb | free_ratio |\n+--------------+------------+--------+----------+------------+---------+----------+---------+------------+\n| test         | user      | InnoDB |        4 |      50000 |       4 |        0 |       6 |     149.42 |\n+--------------+------------+--------+----------+------------+---------+----------+---------+------------+\n1 row in set (0.00 sec)\n\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n</ul>\n<p>其中data_free是分配了未使用的字节数，并不能说明完全是碎片空间。</p>\n<h3><a name=\"t9\"></a><a name=\"t9\"></a><a id=\"_233\"></a>碎片的回收</h3>\n<p>对于InnoDB的表，可以通过以下命令来回收碎片，释放空间，这个是随机读IO操作，会比较耗时，也会阻塞表上正常的DML运行，同时需要占用额外更多的磁盘空间，对于RDS来说，可能会导致磁盘空间瞬间爆满，实例瞬间被锁定，应用无法做DML操作，所以禁止在线上环境去执行。</p>\n<pre class=\"prettyprint\"><code class=\"prism language-shell has-numbering\"><span class=\"token comment\">#执行InnoDB的碎片回收</span>\nmysql<span class=\"token operator\">&gt;</span> alter table user engine<span class=\"token operator\">=</span>InnoDB<span class=\"token punctuation\">;</span>\nQuery OK, 0 rows affected <span class=\"token punctuation\">(</span>9.00 sec<span class=\"token punctuation\">)</span>\nRecords: 0  Duplicates: 0  Warnings: 0\n\n<span class=\"token comment\">##执行完之后，数据文件大小从14MB降低到10M。</span>\n<span class=\"token comment\"># ls -lh /data2/mysql/test/user1.ibd </span>\n-rw-r----- 1 mysql mysql 10M Nov 6 16:18 /data2/mysql/test/user.ibd\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n</ul>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">mysql&gt; select table_schema,        table_name,ENGINE,        round(DATA_LENGTH/1024/1024+ INDEX_LENGTH/1024/1024) total_mb,TABLE_ROWS,        round(DATA_LENGTH/1024/1024) data_mb, round(INDEX_LENGTH/1024/1024) index_mb, round(DATA_FREE/1024/1024) free_mb, round(DATA_FREE/DATA_LENGTH*100,2) free_ratio from information_schema.TABLES where  TABLE_SCHEMA= 'test' and TABLE_NAME= 'user';\n+--------------+------------+--------+----------+------------+---------+----------+---------+------------+\n| table_schema | table_name | ENGINE | total_mb | TABLE_ROWS | data_mb | index_mb | free_mb | free_ratio |\n+--------------+------------+--------+----------+------------+---------+----------+---------+------------+\n| test         | user      | InnoDB |        5 |      50000 |       5 |        0 |       2 |      44.29 |\n+--------------+------------+--------+----------+------------+---------+----------+---------+------------+\n1 row in set (0.00 sec)\n\n\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n</ul>\n<h2><a name=\"t10\"></a><a name=\"t10\"></a><a id=\"deleteSQL_260\"></a>delete对SQL的影响</h2>\n<h3><a name=\"t11\"></a><a name=\"t11\"></a><a id=\"SQL_262\"></a>未删除前的SQL执行情况</h3>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">#插入100W数据\nmysql&gt; call insert_user_data(1000000);\nQuery OK, 0 rows affected (35.99 sec)\n\n#添加相关索引\nmysql&gt; alter table user add index idx_name(name), add index idx_phone(phone);\nQuery OK, 0 rows affected (6.00 sec)\nRecords: 0  Duplicates: 0  Warnings: 0\n\n#表上索引统计信息\nmysql&gt; show index from user;\n+-------+------------+-----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+\n| Table | Non_unique | Key_name  | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment |\n+-------+------------+-----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+\n| user  |          0 | PRIMARY   |            1 | id          | A         |      996757 |     NULL | NULL   |      | BTREE      |         |               |\n| user  |          1 | idx_name  |            1 | name        | A         |      996757 |     NULL | NULL   |      | BTREE      |         |               |\n| user  |          1 | idx_phone |            1 | phone       | A         |           2 |     NULL | NULL   |      | BTREE      |         |               |\n+-------+------------+-----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+\n3 rows in set (0.00 sec)\n\n#重置状态变量计数\nmysql&gt; flush status;\nQuery OK, 0 rows affected (0.00 sec)\n\n#执行SQL语句\nmysql&gt; select id, age ,phone from user where name like 'lyn12%';\n+--------+-----+-------------+\n| id     | age | phone       |\n+--------+-----+-------------+\n|    124 |   3 | 15240540354 |\n|   1231 |  30 | 15240540354 |\n|  12301 |  60 | 15240540354 |\n.............................\n| 129998 |  37 | 15240540354 |\n| 129999 |  38 | 15240540354 |\n| 130000 |  39 | 15240540354 |\n+--------+-----+-------------+\n11111 rows in set (0.03 sec)\n\nmysql&gt; explain select id, age ,phone from user where name like 'lyn12%';\n+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+\n| id | select_type | table | type  | possible_keys | key      | key_len | ref  | rows  | Extra                 |\n+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+\n|  1 | SIMPLE      | user  | range | idx_name      | idx_name | 82      | NULL | 22226 | Using index condition |\n+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+\n1 row in set (0.00 sec)\n\n#查看相关状态呢变量\nmysql&gt; select * from information_schema.session_status where variable_name in('Last_query_cost','Handler_read_next','Innodb_pages_read','Innodb_data_reads','Innodb_pages_read');\n+-------------------+----------------+\n| VARIABLE_NAME     | VARIABLE_VALUE |\n+-------------------+----------------+\n| HANDLER_READ_NEXT | 11111          |    #请求读的行数\n| INNODB_DATA_READS | 7868409        |    #数据物理读的总数\n| INNODB_PAGES_READ | 7855239        |    #逻辑读的总数\n| LAST_QUERY_COST   | 10.499000      |    #SQL语句的成本COST，主要包括IO_COST和CPU_COST。\n+-------------------+----------------+\n4 rows in set (0.00 sec)\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n<li>17</li>\n<li>18</li>\n<li>19</li>\n<li>20</li>\n<li>21</li>\n<li>22</li>\n<li>23</li>\n<li>24</li>\n<li>25</li>\n<li>26</li>\n<li>27</li>\n<li>28</li>\n<li>29</li>\n<li>30</li>\n<li>31</li>\n<li>32</li>\n<li>33</li>\n<li>34</li>\n<li>35</li>\n<li>36</li>\n<li>37</li>\n<li>38</li>\n<li>39</li>\n<li>40</li>\n<li>41</li>\n<li>42</li>\n<li>43</li>\n<li>44</li>\n<li>45</li>\n<li>46</li>\n<li>47</li>\n<li>48</li>\n<li>49</li>\n<li>50</li>\n<li>51</li>\n<li>52</li>\n<li>53</li>\n<li>54</li>\n<li>55</li>\n<li>56</li>\n<li>57</li>\n<li>58</li>\n</ul>\n<h3><a name=\"t12\"></a><a name=\"t12\"></a><a id=\"SQL_325\"></a>删除后的SQL执行情况</h3>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">#删除50w数据\nmysql&gt; delete from user limit 500000;\nQuery OK, 500000 rows affected (3.70 sec)\n\n#分析表统计信息\nmysql&gt; analyze table user;\n+-----------+---------+----------+----------+\n| Table     | Op      | Msg_type | Msg_text |\n+-----------+---------+----------+----------+\n| test.user | analyze | status   | OK       |\n+-----------+---------+----------+----------+\n1 row in set (0.01 sec)\n\n#重置状态变量计数\nmysql&gt; flush status;\nQuery OK, 0 rows affected (0.01 sec)\n\nmysql&gt; select id, age ,phone from user where name like 'lyn12%';\nEmpty set (0.05 sec)\n\nmysql&gt; explain select id, age ,phone from user where name like 'lyn12%';\n+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+\n| id | select_type | table | type  | possible_keys | key      | key_len | ref  | rows  | Extra                 |\n+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+\n|  1 | SIMPLE      | user  | range | idx_name      | idx_name | 82      | NULL | 22226 | Using index condition |\n+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+\n1 row in set (0.00 sec)\n\nmysql&gt; select * from information_schema.session_status where variable_name in('Last_query_cost','Handler_read_next','Innodb_pages_read','Innodb_data_reads','Innodb_pages_read');\n+-------------------+----------------+\n| VARIABLE_NAME     | VARIABLE_VALUE |\n+-------------------+----------------+\n| HANDLER_READ_NEXT | 0              |\n| INNODB_DATA_READS | 7868409        |\n| INNODB_PAGES_READ | 7855239        |\n| LAST_QUERY_COST   | 10.499000      |\n+-------------------+----------------+\n4 rows in set (0.00 sec)\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n<li>17</li>\n<li>18</li>\n<li>19</li>\n<li>20</li>\n<li>21</li>\n<li>22</li>\n<li>23</li>\n<li>24</li>\n<li>25</li>\n<li>26</li>\n<li>27</li>\n<li>28</li>\n<li>29</li>\n<li>30</li>\n<li>31</li>\n<li>32</li>\n<li>33</li>\n<li>34</li>\n<li>35</li>\n<li>36</li>\n<li>37</li>\n<li>38</li>\n</ul>\n<h3><a name=\"t13\"></a><a name=\"t13\"></a><a id=\"_368\"></a>结果统计分析</h3>\n<div class=\"table-box\">\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>COST</th>\n<th>物理读次数</th>\n<th>逻辑读次数</th>\n<th>扫描行数</th>\n<th>返回行数</th>\n<th>执行时间</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>初始化插入100W</td>\n<td>10.499000</td>\n<td>7868409</td>\n<td>7855239</td>\n<td>22226</td>\n<td>11111</td>\n<td>30ms</td>\n</tr>\n<tr>\n<td>100W随机删除50W</td>\n<td>10.499000</td>\n<td>7868409</td>\n<td>7855239</td>\n<td>22226</td>\n<td>0</td>\n<td>50ms</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>这也说明对普通的大表，想要通过delete数据来对表进行瘦身是不现实的，所以在任何时候不要用delete去删除数据，应该使用优雅的标记删除。</p>\n<h2><a name=\"t14\"></a><a name=\"t14\"></a><a id=\"delete_377\"></a>delete优化建议</h2>\n<h3><a name=\"t15\"></a><a name=\"t15\"></a><a id=\"_379\"></a>控制业务账号权限</h3>\n<p>对于一个大的系统来说，需要根据业务特点去拆分子系统，每个子系统可以看做是一个service，例如美团APP，上面有很多服务，核心的服务有用户服务user-service，搜索服务search-service，商品product-service，位置服务location-service，价格服务price-service等。每个服务对应一个数据库，为该数据库创建单独账号，同时只授予DML权限且没有delete权限，同时禁止跨库访问。</p>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">#创建用户数据库并授权\ncreate database mt_user charset utf8mb4;\ngrant USAGE, SELECT, INSERT, UPDATE ON mt_user.*  to 'w_user'@'%' identified by 't$W*g@gaHTGi123456';\nflush privileges;\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n</ul>\n<h3><a name=\"t16\"></a><a name=\"t16\"></a><a id=\"delete_390\"></a>delete改为标记删除</h3>\n<p>在MySQL数据库建模规范中有4个公共字段，基本上每个表必须有的，同时在create_time列要创建索引，有两方面的好处：</p>\n<ol>\n<li>一些查询业务场景都会有一个默认的时间段，比如7天或者一个月，都是通过create_time去过滤，走索引扫描更快。</li>\n<li>一些核心的业务表需要以T +1的方式抽取数据仓库中，比如每天晚上00:30抽取前一天的数据，都是通过create_time过滤的。</li>\n</ol>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">`id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '主键id',\n`is_deleted` tinyint(4) NOT NULL DEFAULT '0' COMMENT '是否逻辑删除：0：未删除，1：已删除',\n`create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',\n`update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间'\n\n#有了删除标记，业务接口的delete操作就可以转换为update\nupdate user set is_deleted = 1 where user_id = 1213;\n\n#查询的时候需要带上is_deleted过滤\nselect id, age ,phone from user where is_deleted = 0 and name like 'lyn12%';\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n</ul>\n<h2><a name=\"t17\"></a><a name=\"t17\"></a><a id=\"_410\"></a>数据归档方式</h2>\n<h3><a name=\"t18\"></a><a name=\"t18\"></a><a id=\"_412\"></a>通用数据归档方法</h3>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">#1. 创建归档表，一般在原表名后面添加_bak。\nCREATE TABLE `ota_order_bak` (\n  `id` bigint(11) NOT NULL AUTO_INCREMENT COMMENT '主键',\n  `order_id` varchar(255) DEFAULT NULL COMMENT '订单id',\n  `ota_id` varchar(255) DEFAULT NULL COMMENT 'ota',\n  `check_in_date` varchar(255) DEFAULT NULL COMMENT '入住日期',\n  `check_out_date` varchar(255) DEFAULT NULL COMMENT '离店日期',\n  `hotel_id` varchar(255) DEFAULT NULL COMMENT '酒店ID',\n  `guest_name` varchar(255) DEFAULT NULL COMMENT '顾客',\n  `purcharse_time` timestamp NULL DEFAULT NULL COMMENT '购买时间',\n  `create_time` datetime DEFAULT NULL,\n  `update_time` datetime DEFAULT NULL,\n  `create_user` varchar(255) DEFAULT NULL,\n  `update_user` varchar(255) DEFAULT NULL,\n  `status` int(4) DEFAULT '1' COMMENT '状态 ： 1 正常 ， 0 删除',\n  `hotel_name` varchar(255) DEFAULT NULL,\n  `price` decimal(10,0) DEFAULT NULL,\n  `remark` longtext,\n  PRIMARY KEY (`id`),\n  KEY `IDX_order_id` (`order_id`) USING BTREE,\n  KEY `hotel_name` (`hotel_name`) USING BTREE,\n  KEY `ota_id` (`ota_id`) USING BTREE,\n  KEY `IDX_purcharse_time` (`purcharse_time`) USING BTREE,\n  KEY `IDX_create_time` (`create_time`) USING BTREE\n) ENGINE=InnoDB DEFAULT CHARSET=utf8\nPARTITION BY RANGE (to_days(create_time)) ( \nPARTITION p201808 VALUES LESS THAN (to_days('2018-09-01')), \nPARTITION p201809 VALUES LESS THAN (to_days('2018-10-01')), \nPARTITION p201810 VALUES LESS THAN (to_days('2018-11-01')), \nPARTITION p201811 VALUES LESS THAN (to_days('2018-12-01')), \nPARTITION p201812 VALUES LESS THAN (to_days('2019-01-01')), \nPARTITION p201901 VALUES LESS THAN (to_days('2019-02-01')), \nPARTITION p201902 VALUES LESS THAN (to_days('2019-03-01')), \nPARTITION p201903 VALUES LESS THAN (to_days('2019-04-01')), \nPARTITION p201904 VALUES LESS THAN (to_days('2019-05-01')), \nPARTITION p201905 VALUES LESS THAN (to_days('2019-06-01')), \nPARTITION p201906 VALUES LESS THAN (to_days('2019-07-01')), \nPARTITION p201907 VALUES LESS THAN (to_days('2019-08-01')), \nPARTITION p201908 VALUES LESS THAN (to_days('2019-09-01')), \nPARTITION p201909 VALUES LESS THAN (to_days('2019-10-01')), \nPARTITION p201910 VALUES LESS THAN (to_days('2019-11-01')), \nPARTITION p201911 VALUES LESS THAN (to_days('2019-12-01')), \nPARTITION p201912 VALUES LESS THAN (to_days('2020-01-01')));\n\n#2. 插入原表中无效的数据（需要跟开发同学确认数据保留范围）\ncreate table tbl_p201808 as select * from ota_order where create_time between '2018-08-01 00:00:00' and '2018-08-31 23:59:59';\n\n#3. 跟归档表分区做分区交换\nalter table ota_order_bak exchange partition p201808 with table tbl_p201808; \n\n#4. 删除原表中已经规范的数据\ndelete from ota_order where create_time between '2018-08-01 00:00:00' and '2018-08-31 23:59:59' limit 3000;\n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n<li>17</li>\n<li>18</li>\n<li>19</li>\n<li>20</li>\n<li>21</li>\n<li>22</li>\n<li>23</li>\n<li>24</li>\n<li>25</li>\n<li>26</li>\n<li>27</li>\n<li>28</li>\n<li>29</li>\n<li>30</li>\n<li>31</li>\n<li>32</li>\n<li>33</li>\n<li>34</li>\n<li>35</li>\n<li>36</li>\n<li>37</li>\n<li>38</li>\n<li>39</li>\n<li>40</li>\n<li>41</li>\n<li>42</li>\n<li>43</li>\n<li>44</li>\n<li>45</li>\n<li>46</li>\n<li>47</li>\n<li>48</li>\n<li>49</li>\n<li>50</li>\n<li>51</li>\n<li>52</li>\n</ul>\n<h3><a name=\"t19\"></a><a name=\"t19\"></a><a id=\"_469\"></a>优化后的归档方式</h3>\n<pre class=\"prettyprint\"><code class=\"prism language-mysql has-numbering\">#1. 创建中间表\nCREATE TABLE `ota_order_2020` (........) ENGINE=InnoDB DEFAULT CHARSET=utf8\nPARTITION BY RANGE (to_days(create_time)) ( \nPARTITION p201808 VALUES LESS THAN (to_days('2018-09-01')), \nPARTITION p201809 VALUES LESS THAN (to_days('2018-10-01')), \nPARTITION p201810 VALUES LESS THAN (to_days('2018-11-01')), \nPARTITION p201811 VALUES LESS THAN (to_days('2018-12-01')), \nPARTITION p201812 VALUES LESS THAN (to_days('2019-01-01')), \nPARTITION p201901 VALUES LESS THAN (to_days('2019-02-01')), \nPARTITION p201902 VALUES LESS THAN (to_days('2019-03-01')), \nPARTITION p201903 VALUES LESS THAN (to_days('2019-04-01')), \nPARTITION p201904 VALUES LESS THAN (to_days('2019-05-01')), \nPARTITION p201905 VALUES LESS THAN (to_days('2019-06-01')), \nPARTITION p201906 VALUES LESS THAN (to_days('2019-07-01')), \nPARTITION p201907 VALUES LESS THAN (to_days('2019-08-01')), \nPARTITION p201908 VALUES LESS THAN (to_days('2019-09-01')), \nPARTITION p201909 VALUES LESS THAN (to_days('2019-10-01')), \nPARTITION p201910 VALUES LESS THAN (to_days('2019-11-01')), \nPARTITION p201911 VALUES LESS THAN (to_days('2019-12-01')), \nPARTITION p201912 VALUES LESS THAN (to_days('2020-01-01')));\n\n#2. 插入原表中有效的数据，如果数据量在100W左右可以在业务低峰期直接插入，如果比较大，建议采用dataX来做，可以控制频率和大小，之前我这边用Go封装了dataX可以实现自动生成json文件，自定义大小去执行。\ninsert into ota_order_2020 select * from ota_order where create_time between '2020-08-01 00:00:00' and '2020-08-31 23:59:59';\n\n#3. 表重命名\nalter table ota_order rename to ota_order_bak;  \nalter table ota_order_2020 rename to ota_order;\n#4. 插入差异数据\ninsert into ota_order select * from ota_order_bak a where not exists (select 1 from ota_order b where a.id = b.id);\n#5. ota_order_bak改造成分区表，如果表比较大不建议直接改造，可以先创建好分区表，通过dataX把导入进去即可。\n\n#6. 后续的归档方法\n#创建中间普遍表\ncreate table ota_order_mid like ota_order;\n#交换原表无效数据分区到普通表\nalter table ota_order exchange partition p201808 with table ota_order_mid; \n##交换普通表数据到归档表的相应分区\nalter table ota_order_bak exchange partition p201808 with table ota_order_mid; \n</code></pre>\n<ul class=\"pre-numbering\">\n<li>1</li>\n<li>2</li>\n<li>3</li>\n<li>4</li>\n<li>5</li>\n<li>6</li>\n<li>7</li>\n<li>8</li>\n<li>9</li>\n<li>10</li>\n<li>11</li>\n<li>12</li>\n<li>13</li>\n<li>14</li>\n<li>15</li>\n<li>16</li>\n<li>17</li>\n<li>18</li>\n<li>19</li>\n<li>20</li>\n<li>21</li>\n<li>22</li>\n<li>23</li>\n<li>24</li>\n<li>25</li>\n<li>26</li>\n<li>27</li>\n<li>28</li>\n<li>29</li>\n<li>30</li>\n<li>31</li>\n<li>32</li>\n<li>33</li>\n<li>34</li>\n<li>35</li>\n<li>36</li>\n<li>37</li>\n<li>38</li>\n</ul>\n<p>这样原表和归档表都是按月的分区表，只需要创建一个中间普通表，在业务低峰期做两次分区交换，既可以删除无效数据，又能回收空，而且没有空间碎片，不会影响表上的索引及SQL的执行计划。</p>\n<h2><a name=\"t20\"></a><a name=\"t20\"></a><a id=\"_514\"></a>总结</h2>\n<p>通过从InnoDB存储空间分布，delete对性能的影响可以看到，delete物理删除既不能释放磁盘空间，而且会产生大量的碎片，导致索引频繁分裂，影响SQL执行计划的稳定性；</p>\n<p>同时在碎片回收时，会耗用大量的CPU，磁盘空间，影响表上正常的DML操作。</p>\n<p>在业务代码层面，应该做逻辑标记删除，避免物理删除；为了实现数据归档需求，可以用采用MySQL分区表特性来实现，都是DDL操作，没有碎片产生。</p>\n<p>另外一个比较好的方案采用Clickhouse，对有生命周期的数据表可以使用Clickhouse存储，利用其TTL特性实现无效数据自动清理。</p>\n<p>&nbsp;</p>","blogGoods":0,"blogId":"1330877080455553024","blogRead":0,"blogRemark":"aaaaa","blogTitle":"面试官不讲武德问我：为什么MySQL不建议使用delete删除数据？","blogType":1,"createdTime":1606111996000,"version":2},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 22:22:52.473 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 22:23:06.808 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlBlogMapper.getById.debug:159 -==>  Preparing: select blog_id, blog_title, blog_content, blog_goods, blog_image, blog_read, blog_collection, blog_type, blog_remark, blog_comment, blog_source, created_time, version from bl_blog where blog_id = ? and deleted = 0 
2020-11-23 22:23:06.809 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlBlogMapper.getById.debug:159 -==> Parameters: 1330877080455553024(String)
2020-11-23 22:23:06.922 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlBlogMapper.getById.debug:159 -<==      Total: 1
2020-11-23 22:23:06.924 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlBlogMapper.update.debug:159 -==>  Preparing: update bl_blog set version = version + 1 ,blog_title = ? ,blog_content = ? ,blog_goods = ? ,blog_read = ? ,blog_collection = ? ,blog_type = ? ,blog_remark = ? ,blog_comment = ? where blog_id = ? and version = ? 
2020-11-23 22:23:06.928 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlBlogMapper.update.debug:159 -==> Parameters: 面试官不讲武德问我：为什么MySQL不建议使用delete删除数据？(String), <h2>前言</h2>
<p>我负责的有几个系统随着业务量的增长，存储在MySQL中的数据日益剧增，我当时就想现在的业务方不讲武德，搞偷袭，趁我没反应过来把很多表，很快，很快啊都打到了亿级别，我大意了，没有闪，这就导致跟其Join的表的SQL变得很慢，对的应用接口的response time也变长了，影响了用户体验。</p>
<p>事后我找到业务方，我批评了他们跟他们说要讲武德，连忙跟我道歉，这个事情才就此作罢，走的时候我对他们说下次不要这样了，耗子尾汁，好好反思。</p>
<p><img src="https://img-blog.csdnimg.cn/img_convert/3c93aececcb9e763f5476362c4e88710.png" alt="" /></p>
<p>骂归骂，事情还是得解决，时候我分析原因发现，发现有些表的数据量增长很快，对应SQL扫描了很多无效数据，导致SQL慢了下来，通过确认之后，这些大表都是一些流水、记录、日志类型数据，只需要保留1到3个月，此时需要对表做数据清理实现瘦身，一般都会想到用insert + delete的方式去清理。</p>
<p>这篇文章我会从InnoDB存储空间分布，delete对性能的影响，以及优化建议方面解释为什么不建议delete删除数据。</p>
<h2><a name="t1"></a><a name="t1"></a><a id="InnoDB_16"></a>InnoDB存储架构</h2>
<p><img src="https://img-blog.csdnimg.cn/img_convert/5c66ffe9749c58e1613d2519f7ea7211.png" alt="" /></p>
<p>从这张图可以看到，InnoDB存储结构主要包括两部分：逻辑存储结构和物理存储结构。</p>
<p>逻辑上是由表空间tablespace &mdash;&gt; 段segment或者inode &mdash;&gt; 区Extent &mdash;&mdash;&gt;数据页Page构成，Innodb逻辑管理单位是segment，空间分配的最小单位是extent，每个segment都会从表空间FREE_PAGE中分配32个page，当这32个page不够用时，会按照以下原则进行扩展：如果当前小于1个extent，则扩展到1个extent；当表空间小于32MB时，每次扩展一个extent；表空间大于32MB，每次扩展4个extent。</p>
<p>物理上主要由系统用户数据文件，日志文件组成，数据文件主要存储MySQL字典数据和用户数据，日志文件记录的是data page的变更记录，用于MySQL Crash时的恢复。</p>
<h2><a name="t2"></a><a name="t2"></a><a id="Innodb_26"></a>Innodb表空间</h2>
<p>InnoDB存储包括三类表空间：系统表空间，用户表空间，Undo表空间。</p>
<p><strong>系统表空间：</strong>&nbsp;主要存储MySQL内部的数据字典数据，如information_schema下的数据。</p>
<p><strong>用户表空间：</strong>&nbsp;当开启innodb_file_per_table=1时，数据表从系统表空间独立出来存储在以table_name.ibd命令的数据文件中，结构信息存储在table_name.frm文件中。</p>
<p><strong>Undo表空间：</strong>&nbsp;存储Undo信息，如快照一致读和flashback都是利用undo信息。</p>
<p>从MySQL 8.0开始允许用户自定义表空间，具体语法如下：</p>
<pre class="prettyprint"><code class="prism language-mysql has-numbering">CREATE TABLESPACE tablespace_name
    ADD DATAFILE 'file_name'               #数据文件名
    USE LOGFILE GROUP logfile_group        #自定义日志文件组，一般每组2个logfile。
    [EXTENT_SIZE [=] extent_size]          #区大小
    [INITIAL_SIZE [=] initial_size]        #初始化大小 
    [AUTOEXTEND_SIZE [=] autoextend_size]  #自动扩宽尺寸
    [MAX_SIZE [=] max_size]                #单个文件最大size，最大是32G。
    [NODEGROUP [=] nodegroup_id]           #节点组
    [WAIT]
    [COMMENT [=] comment_text]
    ENGINE [=] engine_name
</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
<li>9</li>
<li>10</li>
<li>11</li>
</ul>
<p>这样的好处是可以做到数据的冷热分离，分别用HDD和SSD来存储，既能实现数据的高效访问，又能节约成本，比如可以添加两块500G硬盘，经过创建卷组vg，划分逻辑卷lv，创建数据目录并mount相应的lv，假设划分的两个目录分别是/hot_data 和 /cold_data。</p>
<p>这样就可以将核心的业务表如用户表，订单表存储在高性能SSD盘上，一些日志，流水表存储在普通的HDD上，主要的操作步骤如下：</p>
<pre class="prettyprint"><code class="prism language-mysql has-numbering">#创建热数据表空间
create tablespace tbs_data_hot add datafile '/hot_data/tbs_data_hot01.dbf' max_size 20G;
#创建核心业务表存储在热数据表空间
create table booking(id bigint not null primary key auto_increment, &hellip;&hellip; ) tablespace tbs_data_hot;
#创建冷数据表空间
create tablespace tbs_data_cold add datafile '/hot_data/tbs_data_cold01.dbf' max_size 20G;
#创建日志，流水，备份类的表存储在冷数据表空间
create table payment_log(id bigint not null primary key auto_increment, &hellip;&hellip; ) tablespace tbs_data_cold;
#可以移动表到另一个表空间
alter table payment_log tablespace tbs_data_hot;
</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
<li>9</li>
<li>10</li>
</ul>
<h2><a name="t3"></a><a name="t3"></a><a id="Inndob_69"></a>Inndob存储分布</h2>
<h3><a name="t4"></a><a name="t4"></a><a id="_71"></a>创建空表查看空间变化</h3>
<pre class="prettyprint"><code class="prism language-mysql has-numbering">mysql&gt; create table user(id bigint not null primary key auto_increment, 
    -&gt; name varchar(20) not null default '' comment '姓名', 
    -&gt; age tinyint not null default 0 comment 'age', 
    -&gt; gender char(1) not null default 'M'  comment '性别',
    -&gt; phone varchar(16) not null default '' comment '手机号',
    -&gt; create_time datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
    -&gt; update_time datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间'
    -&gt; ) engine = InnoDB DEFAULT CHARSET=utf8mb4 COMMENT '用户信息表';
Query OK, 0 rows affected (0.26 sec)
</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
<li>9</li>
</ul>
<pre class="prettyprint"><code class="prism language-bash has-numbering"><span class="token comment"># ls -lh user1.ibd </span>
-rw-r----- 1 mysql mysql 96K Nov  6 12:48 user.ibd
</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
</ul>
<p>设置参数innodb_file_per_table=1时，创建表时会自动创建一个segment，同时分配一个extent，包含32个data page的来存储数据，这样创建的空表默认大小就是96KB，extent使用完之后会申请64个连接页，这样对于一些小表，或者undo segment，可以在开始时申请较少的空间，节省磁盘容量的开销。</p>
<pre class="prettyprint"><code class="prism language-shell has-numbering"><span class="token comment"># python2 py_innodb_page_info.py -v /data2/mysql/test/user.ibd</span>
page offset 00000000, page <span class="token function">type</span> <span class="token operator">&lt;</span>File Space Header<span class="token operator">&gt;</span>
page offset 00000001, page <span class="token function">type</span> <span class="token operator">&lt;</span>Insert Buffer Bitmap<span class="token operator">&gt;</span>
page offset 00000002, page <span class="token function">type</span> <span class="token operator">&lt;</span>File Segment inode<span class="token operator">&gt;</span>
page offset 00000003, page <span class="token function">type</span> <span class="token operator">&lt;</span>B-tree Node<span class="token operator">&gt;</span>, page level <span class="token operator">&lt;</span>0000<span class="token operator">&gt;</span>
page offset 00000000, page <span class="token function">type</span> <span class="token operator">&lt;</span>Freshly Allocated Page<span class="token operator">&gt;</span>
page offset 00000000, page <span class="token function">type</span> <span class="token operator">&lt;</span>Freshly Allocated Page<span class="token operator">&gt;</span>
Total number of page: 6:      <span class="token comment">#总共分配的页数</span>
Freshly Allocated Page: 2     <span class="token comment">#可用的数据页</span>
Insert Buffer Bitmap: 1       <span class="token comment">#插入缓冲页</span>
File Space Header: 1          <span class="token comment">#文件空间头</span>
B-tree Node: 1                <span class="token comment">#数据页</span>
File Segment inode: 1         <span class="token comment">#文件端inonde，如果是在ibdata1.ibd上会有多个inode。</span>
</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
<li>9</li>
<li>10</li>
<li>11</li>
<li>12</li>
<li>13</li>
</ul>
<h3><a name="t5"></a><a name="t5"></a><a id="_108"></a>插入数据后的空间变化</h3>
<pre class="prettyprint"><code class="prism language-mysql has-numbering">mysql&gt; DELIMITER $$
mysql&gt; CREATE PROCEDURE insert_user_data(num INTEGER) 
    -&gt; BEGIN
    -&gt;     DECLARE v_i int unsigned DEFAULT 0;
    -&gt; set autocommit= 0;
    -&gt; WHILE v_i &lt; num DO
    -&gt;    insert into user(`name`, age, gender, phone) values (CONCAT('lyn',v_i), mod(v_i,120), 'M', CONCAT('152',ROUND(RAND(1)*100000000)));
    -&gt;  SET v_i = v_i+1;
    -&gt; END WHILE;
    -&gt; commit;
    -&gt; END $$
Query OK, 0 rows affected (0.01 sec)
mysql&gt; DELIMITER ;

#插入10w数据
mysql&gt; call insert_user_data(100000);
Query OK, 0 rows affected (6.69 sec)
</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
<li>9</li>
<li>10</li>
<li>11</li>
<li>12</li>
<li>13</li>
<li>14</li>
<li>15</li>
<li>16</li>
<li>17</li>
</ul>
<pre class="prettyprint"><code class="prism language-shell has-numbering"><span class="token comment"># ls -lh user.ibd</span>
-rw-r----- 1 mysql mysql 14M Nov 6 10:58 /data2/mysql/test/user.ibd

<span class="token comment"># python2 py_innodb_page_info.py -v /data2/mysql/test/user.ibd</span>
page offset 00000000, page <span class="token function">type</span> <span class="token operator">&lt;</span>File Space Header<span class="token operator">&gt;</span>
page offset 00000001, page <span class="token function">type</span> <span class="token operator">&lt;</span>Insert Buffer Bitmap<span class="token operator">&gt;</span>
page offset 00000002, page <span class="token function">type</span> <span class="token operator">&lt;</span>File Segment inode<span class="token operator">&gt;</span>
page offset 00000003, page <span class="token function">type</span> <span class="token operator">&lt;</span>B-tree Node<span class="token operator">&gt;</span>, page level <span class="token operator">&lt;</span>0001<span class="token operator">&gt;</span>   <span class="token comment">#增加了一个非叶子节点，树的高度从1变为2.</span>
<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>
page offset 00000000, page <span class="token function">type</span> <span class="token operator">&lt;</span>Freshly Allocated Page<span class="token operator">&gt;</span>
Total number of page: 896:
Freshly Allocated Page: 493
Insert Buffer Bitmap: 1
File Space Header: 1
B-tree Node: 400
File Segment inode: 1
</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
<li>9</li>
<li>10</li>
<li>11</li>
<li>12</li>
<li>13</li>
<li>14</li>
<li>15</li>
<li>16</li>
</ul>
<h3><a name="t6"></a><a name="t6"></a><a id="delete_149"></a>delete数据后的空间变化</h3>
<pre class="prettyprint"><code class="prism language-mysql has-numbering">mysql&gt; select min(id),max(id),count(*) from user;
+---------+---------+----------+
| min(id) | max(id) | count(*) |
+---------+---------+----------+
|       1 |  100000 |   100000 |
+---------+---------+----------+
1 row in set (0.05 sec)
#删除50000条数据，理论上空间应该从14MB变长7MB左右。
mysql&gt; delete from user limit 50000;
Query OK, 50000 rows affected (0.25 sec)

#数据文件大小依然是14MB，没有缩小。
# ls -lh /data2/mysql/test/user1.ibd 
-rw-r----- 1 mysql mysql 14M Nov  6 13:22 /data2/mysql/test/user.ibd

#数据页没有被回收。
# python2 py_innodb_page_info.py -v /data2/mysql/test/user.ibd
page offset 00000000, page type &lt;File Space Header&gt;
page offset 00000001, page type &lt;Insert Buffer Bitmap&gt;
page offset 00000002, page type &lt;File Segment inode&gt;
page offset 00000003, page type &lt;B-tree Node&gt;, page level &lt;0001&gt;
........................................................
page offset 00000000, page type &lt;Freshly Allocated Page&gt;
Total number of page: 896:
Freshly Allocated Page: 493
Insert Buffer Bitmap: 1
File Space Header: 1
B-tree Node: 400
File Segment inode: 1
#在MySQL内部是标记删除，
</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
<li>9</li>
<li>10</li>
<li>11</li>
<li>12</li>
<li>13</li>
<li>14</li>
<li>15</li>
<li>16</li>
<li>17</li>
<li>18</li>
<li>19</li>
<li>20</li>
<li>21</li>
<li>22</li>
<li>23</li>
<li>24</li>
<li>25</li>
<li>26</li>
<li>27</li>
<li>28</li>
<li>29</li>
<li>30</li>
</ul>
<pre class="prettyprint"><code class="prism language-mysql has-numbering">mysql&gt; use information_schema;

Database changed
mysql&gt; SELECT A.SPACE AS TBL_SPACEID, A.TABLE_ID, A.NAME AS TABLE_NAME, FILE_FORMAT, ROW_FORMAT, SPACE_TYPE,  B.INDEX_ID , B.NAME AS INDEX_NAME, PAGE_NO, B.TYPE AS INDEX_TYPE FROM INNODB_SYS_TABLES A LEFT JOIN INNODB_SYS_INDEXES B ON A.TABLE_ID =B.TABLE_ID WHERE A.NAME = 'test/user1';
+-------------+----------+------------+-------------+------------+------------+----------+------------+---------+------------+
| TBL_SPACEID | TABLE_ID | TABLE_NAME | FILE_FORMAT | ROW_FORMAT | SPACE_TYPE | INDEX_ID | INDEX_NAME | PAGE_NO | INDEX_TYPE |
+-------------+----------+------------+-------------+------------+------------+----------+------------+---------+------------+
|        1283 |     1207 | test/user | Barracuda   | Dynamic    | Single     |     2236 | PRIMARY    |       3 |          3 |
+-------------+----------+------------+-------------+------------+------------+----------+------------+---------+------------+
1 row in set (0.01 sec)

PAGE_NO = 3 标识B-tree的root page是3号页，INDEX_TYPE = 3是聚集索引。 INDEX_TYPE取值如下：
0 = nonunique secondary index; 
1 = automatically generated clustered index (GEN_CLUST_INDEX); 
2 = unique nonclustered index; 
3 = clustered index; 
32 = full-text index;
#收缩空间再后进行观察
</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
<li>9</li>
<li>10</li>
<li>11</li>
<li>12</li>
<li>13</li>
<li>14</li>
<li>15</li>
<li>16</li>
<li>17</li>
<li>18</li>
</ul>
<p>MySQL内部不会真正删除空间，而且做标记删除，即将delflag:N修改为delflag:Y，commit之后会会被purge进入删除链表，如果下一次insert更大的记录，delete之后的空间不会被重用，如果插入的记录小于等于delete的记录空会被重用，这块内容可以通过知数堂的innblock工具进行分析。</p>
<h2><a name="t7"></a><a name="t7"></a><a id="Innodb_207"></a>Innodb中的碎片</h2>
<h3><a name="t8"></a><a name="t8"></a><a id="_209"></a>碎片的产生</h3>
<p>我们知道数据存储在文件系统上的，总是不能100%利用分配给它的物理空间，删除数据会在页面上留下一些&rdquo;空洞&rdquo;，或者随机写入（聚集索引非线性增加）会导致页分裂，页分裂导致页面的利用空间少于50%，另外对表进行增删改会引起对应的二级索引值的随机的增删改，也会导致索引结构中的数据页面上留下一些"空洞"，虽然这些空洞有可能会被重复利用，但终究会导致部分物理空间未被使用，也就是碎片。</p>
<p>同时，即便是设置了填充因子为100%，Innodb也会主动留下page页面1/16的空间作为预留使用（An innodb_fill_factor setting of 100 leaves 1/16 of the space in clustered index pages free for future index growth）防止update带来的行溢出。</p>
<pre class="prettyprint"><code class="prism language-mysql has-numbering">mysql&gt; select table_schema,
    -&gt;        table_name,ENGINE,
    -&gt;        round(DATA_LENGTH/1024/1024+ INDEX_LENGTH/1024/1024) total_mb,TABLE_ROWS,
    -&gt;        round(DATA_LENGTH/1024/1024) data_mb, round(INDEX_LENGTH/1024/1024) index_mb, round(DATA_FREE/1024/1024) free_mb, round(DATA_FREE/DATA_LENGTH*100,2) free_ratio
    -&gt; from information_schema.TABLES where  TABLE_SCHEMA= 'test'
    -&gt; and TABLE_NAME= 'user';
+--------------+------------+--------+----------+------------+---------+----------+---------+------------+
| table_schema | table_name | ENGINE | total_mb | TABLE_ROWS | data_mb | index_mb | free_mb | free_ratio |
+--------------+------------+--------+----------+------------+---------+----------+---------+------------+
| test         | user      | InnoDB |        4 |      50000 |       4 |        0 |       6 |     149.42 |
+--------------+------------+--------+----------+------------+---------+----------+---------+------------+
1 row in set (0.00 sec)

</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
<li>9</li>
<li>10</li>
<li>11</li>
<li>12</li>
<li>13</li>
</ul>
<p>其中data_free是分配了未使用的字节数，并不能说明完全是碎片空间。</p>
<h3><a name="t9"></a><a name="t9"></a><a id="_233"></a>碎片的回收</h3>
<p>对于InnoDB的表，可以通过以下命令来回收碎片，释放空间，这个是随机读IO操作，会比较耗时，也会阻塞表上正常的DML运行，同时需要占用额外更多的磁盘空间，对于RDS来说，可能会导致磁盘空间瞬间爆满，实例瞬间被锁定，应用无法做DML操作，所以禁止在线上环境去执行。</p>
<pre class="prettyprint"><code class="prism language-shell has-numbering"><span class="token comment">#执行InnoDB的碎片回收</span>
mysql<span class="token operator">&gt;</span> alter table user engine<span class="token operator">=</span>InnoDB<span class="token punctuation">;</span>
Query OK, 0 rows affected <span class="token punctuation">(</span>9.00 sec<span class="token punctuation">)</span>
Records: 0  Duplicates: 0  Warnings: 0

<span class="token comment">##执行完之后，数据文件大小从14MB降低到10M。</span>
<span class="token comment"># ls -lh /data2/mysql/test/user1.ibd </span>
-rw-r----- 1 mysql mysql 10M Nov 6 16:18 /data2/mysql/test/user.ibd
</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
</ul>
<pre class="prettyprint"><code class="prism language-mysql has-numbering">mysql&gt; select table_schema,        table_name,ENGINE,        round(DATA_LENGTH/1024/1024+ INDEX_LENGTH/1024/1024) total_mb,TABLE_ROWS,        round(DATA_LENGTH/1024/1024) data_mb, round(INDEX_LENGTH/1024/1024) index_mb, round(DATA_FREE/1024/1024) free_mb, round(DATA_FREE/DATA_LENGTH*100,2) free_ratio from information_schema.TABLES where  TABLE_SCHEMA= 'test' and TABLE_NAME= 'user';
+--------------+------------+--------+----------+------------+---------+----------+---------+------------+
| table_schema | table_name | ENGINE | total_mb | TABLE_ROWS | data_mb | index_mb | free_mb | free_ratio |
+--------------+------------+--------+----------+------------+---------+----------+---------+------------+
| test         | user      | InnoDB |        5 |      50000 |       5 |        0 |       2 |      44.29 |
+--------------+------------+--------+----------+------------+---------+----------+---------+------------+
1 row in set (0.00 sec)


</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
<li>9</li>
</ul>
<h2><a name="t10"></a><a name="t10"></a><a id="deleteSQL_260"></a>delete对SQL的影响</h2>
<h3><a name="t11"></a><a name="t11"></a><a id="SQL_262"></a>未删除前的SQL执行情况</h3>
<pre class="prettyprint"><code class="prism language-mysql has-numbering">#插入100W数据
mysql&gt; call insert_user_data(1000000);
Query OK, 0 rows affected (35.99 sec)

#添加相关索引
mysql&gt; alter table user add index idx_name(name), add index idx_phone(phone);
Query OK, 0 rows affected (6.00 sec)
Records: 0  Duplicates: 0  Warnings: 0

#表上索引统计信息
mysql&gt; show index from user;
+-------+------------+-----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
| Table | Non_unique | Key_name  | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment |
+-------+------------+-----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
| user  |          0 | PRIMARY   |            1 | id          | A         |      996757 |     NULL | NULL   |      | BTREE      |         |               |
| user  |          1 | idx_name  |            1 | name        | A         |      996757 |     NULL | NULL   |      | BTREE      |         |               |
| user  |          1 | idx_phone |            1 | phone       | A         |           2 |     NULL | NULL   |      | BTREE      |         |               |
+-------+------------+-----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+
3 rows in set (0.00 sec)

#重置状态变量计数
mysql&gt; flush status;
Query OK, 0 rows affected (0.00 sec)

#执行SQL语句
mysql&gt; select id, age ,phone from user where name like 'lyn12%';
+--------+-----+-------------+
| id     | age | phone       |
+--------+-----+-------------+
|    124 |   3 | 15240540354 |
|   1231 |  30 | 15240540354 |
|  12301 |  60 | 15240540354 |
.............................
| 129998 |  37 | 15240540354 |
| 129999 |  38 | 15240540354 |
| 130000 |  39 | 15240540354 |
+--------+-----+-------------+
11111 rows in set (0.03 sec)

mysql&gt; explain select id, age ,phone from user where name like 'lyn12%';
+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+
| id | select_type | table | type  | possible_keys | key      | key_len | ref  | rows  | Extra                 |
+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+
|  1 | SIMPLE      | user  | range | idx_name      | idx_name | 82      | NULL | 22226 | Using index condition |
+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+
1 row in set (0.00 sec)

#查看相关状态呢变量
mysql&gt; select * from information_schema.session_status where variable_name in('Last_query_cost','Handler_read_next','Innodb_pages_read','Innodb_data_reads','Innodb_pages_read');
+-------------------+----------------+
| VARIABLE_NAME     | VARIABLE_VALUE |
+-------------------+----------------+
| HANDLER_READ_NEXT | 11111          |    #请求读的行数
| INNODB_DATA_READS | 7868409        |    #数据物理读的总数
| INNODB_PAGES_READ | 7855239        |    #逻辑读的总数
| LAST_QUERY_COST   | 10.499000      |    #SQL语句的成本COST，主要包括IO_COST和CPU_COST。
+-------------------+----------------+
4 rows in set (0.00 sec)
</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
<li>9</li>
<li>10</li>
<li>11</li>
<li>12</li>
<li>13</li>
<li>14</li>
<li>15</li>
<li>16</li>
<li>17</li>
<li>18</li>
<li>19</li>
<li>20</li>
<li>21</li>
<li>22</li>
<li>23</li>
<li>24</li>
<li>25</li>
<li>26</li>
<li>27</li>
<li>28</li>
<li>29</li>
<li>30</li>
<li>31</li>
<li>32</li>
<li>33</li>
<li>34</li>
<li>35</li>
<li>36</li>
<li>37</li>
<li>38</li>
<li>39</li>
<li>40</li>
<li>41</li>
<li>42</li>
<li>43</li>
<li>44</li>
<li>45</li>
<li>46</li>
<li>47</li>
<li>48</li>
<li>49</li>
<li>50</li>
<li>51</li>
<li>52</li>
<li>53</li>
<li>54</li>
<li>55</li>
<li>56</li>
<li>57</li>
<li>58</li>
</ul>
<h3><a name="t12"></a><a name="t12"></a><a id="SQL_325"></a>删除后的SQL执行情况</h3>
<pre class="prettyprint"><code class="prism language-mysql has-numbering">#删除50w数据
mysql&gt; delete from user limit 500000;
Query OK, 500000 rows affected (3.70 sec)

#分析表统计信息
mysql&gt; analyze table user;
+-----------+---------+----------+----------+
| Table     | Op      | Msg_type | Msg_text |
+-----------+---------+----------+----------+
| test.user | analyze | status   | OK       |
+-----------+---------+----------+----------+
1 row in set (0.01 sec)

#重置状态变量计数
mysql&gt; flush status;
Query OK, 0 rows affected (0.01 sec)

mysql&gt; select id, age ,phone from user where name like 'lyn12%';
Empty set (0.05 sec)

mysql&gt; explain select id, age ,phone from user where name like 'lyn12%';
+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+
| id | select_type | table | type  | possible_keys | key      | key_len | ref  | rows  | Extra                 |
+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+
|  1 | SIMPLE      | user  | range | idx_name      | idx_name | 82      | NULL | 22226 | Using index condition |
+----+-------------+-------+-------+---------------+----------+---------+------+-------+-----------------------+
1 row in set (0.00 sec)

mysql&gt; select * from information_schema.session_status where variable_name in('Last_query_cost','Handler_read_next','Innodb_pages_read','Innodb_data_reads','Innodb_pages_read');
+-------------------+----------------+
| VARIABLE_NAME     | VARIABLE_VALUE |
+-------------------+----------------+
| HANDLER_READ_NEXT | 0              |
| INNODB_DATA_READS | 7868409        |
| INNODB_PAGES_READ | 7855239        |
| LAST_QUERY_COST   | 10.499000      |
+-------------------+----------------+
4 rows in set (0.00 sec)
</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
<li>9</li>
<li>10</li>
<li>11</li>
<li>12</li>
<li>13</li>
<li>14</li>
<li>15</li>
<li>16</li>
<li>17</li>
<li>18</li>
<li>19</li>
<li>20</li>
<li>21</li>
<li>22</li>
<li>23</li>
<li>24</li>
<li>25</li>
<li>26</li>
<li>27</li>
<li>28</li>
<li>29</li>
<li>30</li>
<li>31</li>
<li>32</li>
<li>33</li>
<li>34</li>
<li>35</li>
<li>36</li>
<li>37</li>
<li>38</li>
</ul>
<h3><a name="t13"></a><a name="t13"></a><a id="_368"></a>结果统计分析</h3>
<div class="table-box">
<table>
<thead>
<tr>
<th>操作</th>
<th>COST</th>
<th>物理读次数</th>
<th>逻辑读次数</th>
<th>扫描行数</th>
<th>返回行数</th>
<th>执行时间</th>
</tr>
</thead>
<tbody>
<tr>
<td>初始化插入100W</td>
<td>10.499000</td>
<td>7868409</td>
<td>7855239</td>
<td>22226</td>
<td>11111</td>
<td>30ms</td>
</tr>
<tr>
<td>100W随机删除50W</td>
<td>10.499000</td>
<td>7868409</td>
<td>7855239</td>
<td>22226</td>
<td>0</td>
<td>50ms</td>
</tr>
</tbody>
</table>
</div>
<p>这也说明对普通的大表，想要通过delete数据来对表进行瘦身是不现实的，所以在任何时候不要用delete去删除数据，应该使用优雅的标记删除。</p>
<h2><a name="t14"></a><a name="t14"></a><a id="delete_377"></a>delete优化建议</h2>
<h3><a name="t15"></a><a name="t15"></a><a id="_379"></a>控制业务账号权限</h3>
<p>对于一个大的系统来说，需要根据业务特点去拆分子系统，每个子系统可以看做是一个service，例如美团APP，上面有很多服务，核心的服务有用户服务user-service，搜索服务search-service，商品product-service，位置服务location-service，价格服务price-service等。每个服务对应一个数据库，为该数据库创建单独账号，同时只授予DML权限且没有delete权限，同时禁止跨库访问。</p>
<pre class="prettyprint"><code class="prism language-mysql has-numbering">#创建用户数据库并授权
create database mt_user charset utf8mb4;
grant USAGE, SELECT, INSERT, UPDATE ON mt_user.*  to 'w_user'@'%' identified by 't$W*g@gaHTGi123456';
flush privileges;
</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
</ul>
<h3><a name="t16"></a><a name="t16"></a><a id="delete_390"></a>delete改为标记删除</h3>
<p>在MySQL数据库建模规范中有4个公共字段，基本上每个表必须有的，同时在create_time列要创建索引，有两方面的好处：</p>
<ol>
<li>一些查询业务场景都会有一个默认的时间段，比如7天或者一个月，都是通过create_time去过滤，走索引扫描更快。</li>
<li>一些核心的业务表需要以T +1的方式抽取数据仓库中，比如每天晚上00:30抽取前一天的数据，都是通过create_time过滤的。</li>
</ol>
<pre class="prettyprint"><code class="prism language-mysql has-numbering">`id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '主键id',
`is_deleted` tinyint(4) NOT NULL DEFAULT '0' COMMENT '是否逻辑删除：0：未删除，1：已删除',
`create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
`update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '修改时间'

#有了删除标记，业务接口的delete操作就可以转换为update
update user set is_deleted = 1 where user_id = 1213;

#查询的时候需要带上is_deleted过滤
select id, age ,phone from user where is_deleted = 0 and name like 'lyn12%';
</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
<li>9</li>
<li>10</li>
</ul>
<h2><a name="t17"></a><a name="t17"></a><a id="_410"></a>数据归档方式</h2>
<h3><a name="t18"></a><a name="t18"></a><a id="_412"></a>通用数据归档方法</h3>
<pre class="prettyprint"><code class="prism language-mysql has-numbering">#1. 创建归档表，一般在原表名后面添加_bak。
CREATE TABLE `ota_order_bak` (
  `id` bigint(11) NOT NULL AUTO_INCREMENT COMMENT '主键',
  `order_id` varchar(255) DEFAULT NULL COMMENT '订单id',
  `ota_id` varchar(255) DEFAULT NULL COMMENT 'ota',
  `check_in_date` varchar(255) DEFAULT NULL COMMENT '入住日期',
  `check_out_date` varchar(255) DEFAULT NULL COMMENT '离店日期',
  `hotel_id` varchar(255) DEFAULT NULL COMMENT '酒店ID',
  `guest_name` varchar(255) DEFAULT NULL COMMENT '顾客',
  `purcharse_time` timestamp NULL DEFAULT NULL COMMENT '购买时间',
  `create_time` datetime DEFAULT NULL,
  `update_time` datetime DEFAULT NULL,
  `create_user` varchar(255) DEFAULT NULL,
  `update_user` varchar(255) DEFAULT NULL,
  `status` int(4) DEFAULT '1' COMMENT '状态 ： 1 正常 ， 0 删除',
  `hotel_name` varchar(255) DEFAULT NULL,
  `price` decimal(10,0) DEFAULT NULL,
  `remark` longtext,
  PRIMARY KEY (`id`),
  KEY `IDX_order_id` (`order_id`) USING BTREE,
  KEY `hotel_name` (`hotel_name`) USING BTREE,
  KEY `ota_id` (`ota_id`) USING BTREE,
  KEY `IDX_purcharse_time` (`purcharse_time`) USING BTREE,
  KEY `IDX_create_time` (`create_time`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8
PARTITION BY RANGE (to_days(create_time)) ( 
PARTITION p201808 VALUES LESS THAN (to_days('2018-09-01')), 
PARTITION p201809 VALUES LESS THAN (to_days('2018-10-01')), 
PARTITION p201810 VALUES LESS THAN (to_days('2018-11-01')), 
PARTITION p201811 VALUES LESS THAN (to_days('2018-12-01')), 
PARTITION p201812 VALUES LESS THAN (to_days('2019-01-01')), 
PARTITION p201901 VALUES LESS THAN (to_days('2019-02-01')), 
PARTITION p201902 VALUES LESS THAN (to_days('2019-03-01')), 
PARTITION p201903 VALUES LESS THAN (to_days('2019-04-01')), 
PARTITION p201904 VALUES LESS THAN (to_days('2019-05-01')), 
PARTITION p201905 VALUES LESS THAN (to_days('2019-06-01')), 
PARTITION p201906 VALUES LESS THAN (to_days('2019-07-01')), 
PARTITION p201907 VALUES LESS THAN (to_days('2019-08-01')), 
PARTITION p201908 VALUES LESS THAN (to_days('2019-09-01')), 
PARTITION p201909 VALUES LESS THAN (to_days('2019-10-01')), 
PARTITION p201910 VALUES LESS THAN (to_days('2019-11-01')), 
PARTITION p201911 VALUES LESS THAN (to_days('2019-12-01')), 
PARTITION p201912 VALUES LESS THAN (to_days('2020-01-01')));

#2. 插入原表中无效的数据（需要跟开发同学确认数据保留范围）
create table tbl_p201808 as select * from ota_order where create_time between '2018-08-01 00:00:00' and '2018-08-31 23:59:59';

#3. 跟归档表分区做分区交换
alter table ota_order_bak exchange partition p201808 with table tbl_p201808; 

#4. 删除原表中已经规范的数据
delete from ota_order where create_time between '2018-08-01 00:00:00' and '2018-08-31 23:59:59' limit 3000;
</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
<li>9</li>
<li>10</li>
<li>11</li>
<li>12</li>
<li>13</li>
<li>14</li>
<li>15</li>
<li>16</li>
<li>17</li>
<li>18</li>
<li>19</li>
<li>20</li>
<li>21</li>
<li>22</li>
<li>23</li>
<li>24</li>
<li>25</li>
<li>26</li>
<li>27</li>
<li>28</li>
<li>29</li>
<li>30</li>
<li>31</li>
<li>32</li>
<li>33</li>
<li>34</li>
<li>35</li>
<li>36</li>
<li>37</li>
<li>38</li>
<li>39</li>
<li>40</li>
<li>41</li>
<li>42</li>
<li>43</li>
<li>44</li>
<li>45</li>
<li>46</li>
<li>47</li>
<li>48</li>
<li>49</li>
<li>50</li>
<li>51</li>
<li>52</li>
</ul>
<h3><a name="t19"></a><a name="t19"></a><a id="_469"></a>优化后的归档方式</h3>
<pre class="prettyprint"><code class="prism language-mysql has-numbering">#1. 创建中间表
CREATE TABLE `ota_order_2020` (........) ENGINE=InnoDB DEFAULT CHARSET=utf8
PARTITION BY RANGE (to_days(create_time)) ( 
PARTITION p201808 VALUES LESS THAN (to_days('2018-09-01')), 
PARTITION p201809 VALUES LESS THAN (to_days('2018-10-01')), 
PARTITION p201810 VALUES LESS THAN (to_days('2018-11-01')), 
PARTITION p201811 VALUES LESS THAN (to_days('2018-12-01')), 
PARTITION p201812 VALUES LESS THAN (to_days('2019-01-01')), 
PARTITION p201901 VALUES LESS THAN (to_days('2019-02-01')), 
PARTITION p201902 VALUES LESS THAN (to_days('2019-03-01')), 
PARTITION p201903 VALUES LESS THAN (to_days('2019-04-01')), 
PARTITION p201904 VALUES LESS THAN (to_days('2019-05-01')), 
PARTITION p201905 VALUES LESS THAN (to_days('2019-06-01')), 
PARTITION p201906 VALUES LESS THAN (to_days('2019-07-01')), 
PARTITION p201907 VALUES LESS THAN (to_days('2019-08-01')), 
PARTITION p201908 VALUES LESS THAN (to_days('2019-09-01')), 
PARTITION p201909 VALUES LESS THAN (to_days('2019-10-01')), 
PARTITION p201910 VALUES LESS THAN (to_days('2019-11-01')), 
PARTITION p201911 VALUES LESS THAN (to_days('2019-12-01')), 
PARTITION p201912 VALUES LESS THAN (to_days('2020-01-01')));

#2. 插入原表中有效的数据，如果数据量在100W左右可以在业务低峰期直接插入，如果比较大，建议采用dataX来做，可以控制频率和大小，之前我这边用Go封装了dataX可以实现自动生成json文件，自定义大小去执行。
insert into ota_order_2020 select * from ota_order where create_time between '2020-08-01 00:00:00' and '2020-08-31 23:59:59';

#3. 表重命名
alter table ota_order rename to ota_order_bak;  
alter table ota_order_2020 rename to ota_order;
#4. 插入差异数据
insert into ota_order select * from ota_order_bak a where not exists (select 1 from ota_order b where a.id = b.id);
#5. ota_order_bak改造成分区表，如果表比较大不建议直接改造，可以先创建好分区表，通过dataX把导入进去即可。

#6. 后续的归档方法
#创建中间普遍表
create table ota_order_mid like ota_order;
#交换原表无效数据分区到普通表
alter table ota_order exchange partition p201808 with table ota_order_mid; 
##交换普通表数据到归档表的相应分区
alter table ota_order_bak exchange partition p201808 with table ota_order_mid; 
</code></pre>
<ul class="pre-numbering">
<li>1</li>
<li>2</li>
<li>3</li>
<li>4</li>
<li>5</li>
<li>6</li>
<li>7</li>
<li>8</li>
<li>9</li>
<li>10</li>
<li>11</li>
<li>12</li>
<li>13</li>
<li>14</li>
<li>15</li>
<li>16</li>
<li>17</li>
<li>18</li>
<li>19</li>
<li>20</li>
<li>21</li>
<li>22</li>
<li>23</li>
<li>24</li>
<li>25</li>
<li>26</li>
<li>27</li>
<li>28</li>
<li>29</li>
<li>30</li>
<li>31</li>
<li>32</li>
<li>33</li>
<li>34</li>
<li>35</li>
<li>36</li>
<li>37</li>
<li>38</li>
</ul>
<p>这样原表和归档表都是按月的分区表，只需要创建一个中间普通表，在业务低峰期做两次分区交换，既可以删除无效数据，又能回收空，而且没有空间碎片，不会影响表上的索引及SQL的执行计划。</p>
<h2><a name="t20"></a><a name="t20"></a><a id="_514"></a>总结</h2>
<p>通过从InnoDB存储空间分布，delete对性能的影响可以看到，delete物理删除既不能释放磁盘空间，而且会产生大量的碎片，导致索引频繁分裂，影响SQL执行计划的稳定性；</p>
<p>同时在碎片回收时，会耗用大量的CPU，磁盘空间，影响表上正常的DML操作。</p>
<p>在业务代码层面，应该做逻辑标记删除，避免物理删除；为了实现数据归档需求，可以用采用MySQL分区表特性来实现，都是DDL操作，没有碎片产生。</p>
<p>另外一个比较好的方案采用Clickhouse，对有生命周期的数据表可以使用Clickhouse存储，利用其TTL特性实现无效数据自动清理。</p>
<p>&nbsp;</p>(String), 0(Integer), 0(Integer), 0(Integer), 1(Integer), MySQL(String), 0(Integer), 1330877080455553024(String), 2(Integer)
2020-11-23 22:23:07.100 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlBlogMapper.update.debug:159 -<==    Updates: 1
2020-11-23 22:23:07.229 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 22:23:07.230 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/update(String), [com.tqk.blog.pojo.BlBlog@47349190](String), 1(Integer), null, PUT(String), 455(Long), {"code":20000,"msg":"更新成功！"}(String), 192.168.101.29(String)
2020-11-23 22:23:07.309 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 22:23:07.576 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image, blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-11-23 22:23:07.577 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-11-23 22:23:07.614 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -<==      Total: 3
2020-11-23 22:23:07.615 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-11-23 22:23:07.616 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-11-23 22:23:07.651 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-11-23 22:23:07.764 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 22:23:07.765 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=1, totalCount=3, list=[BlogVo(blogId=1324038097171820544, blogTitle=BeanUtils.copyProperties的用法, blogImage=Java, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=Java, blogSource=百度, blogRemark=BeanUtils它提供了对java反射和自省API的包装。它里面还有很多工具类，这里我们介绍一下copyProperties。, blogComment=0, blogMonth=null, createdTime=2020-11-04 17:17:33, updateTime=2020-11-22 13:04:15), BlogVo(blogId=1330877080455553024, blogTitle=面试官不讲武德问我：为什么MySQL不建议使用delete删除数据？, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=Java, blogSource=null, blogRemark=aaaaa, blogComment=0, blogMonth=null, createdTime=2020-11-23 14:13:16, updateTime=2020-11-23 14:15:40), BlogVo(blogId=1330879440221315072, blogTitle=Java岗四面字节跳动成功之前，我都刷了那些面试题以及做了那些准备！, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=Java, blogSource=null, blogRemark=面试必备, blogComment=0, blogMonth=null, createdTime=2020-11-23 14:22:39, updateTime=2020-11-23 14:22:39)], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 220(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1324038097171820544","blogImage":"Java","blogRead":0,"blogRemark":"BeanUtils它提供了对java反射和自省API的包装。它里面还有很多工具类，这里我们介绍一下copyProperties。","blogSource":"百度","blogTitle":"BeanUtils.copyProperties的用法","createdTime":"2020-11-04 17:17:33","typeName":"Java","updateTime":"2020-11-22 13:04:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1330877080455553024","blogRead":0,"blogRemark":"MySQL","blogTitle":"面试官不讲武德问我：为什么MySQL不建议使用delete删除数据？","createdTime":"2020-11-23 14:13:16","typeName":"Java","updateTime":"2020-11-23 14:23:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1330879440221315072","blogRead":0,"blogRemark":"面试必备","blogTitle":"Java岗四面字节跳动成功之前，我都刷了那些面试题以及做了那些准备！","createdTime":"2020-11-23 14:22:39","typeName":"Java","updateTime":"2020-11-23 14:22:39"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":3,"totalPage":1},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 22:23:07.858 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 22:23:16.503 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image, blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 and type_id = ? limit ?, ? 
2020-11-23 22:23:16.504 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==> Parameters: 1(Integer), 0(Integer), 10(Integer)
2020-11-23 22:23:16.542 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -<==      Total: 3
2020-11-23 22:23:16.544 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 and type_id = ? 
2020-11-23 22:23:16.544 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==> Parameters: 1(Integer)
2020-11-23 22:23:16.582 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-11-23 22:23:16.693 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 22:23:16.694 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=1, totalCount=3, list=[BlogVo(blogId=1324038097171820544, blogTitle=BeanUtils.copyProperties的用法, blogImage=Java, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=Java, blogSource=百度, blogRemark=BeanUtils它提供了对java反射和自省API的包装。它里面还有很多工具类，这里我们介绍一下copyProperties。, blogComment=0, blogMonth=null, createdTime=2020-11-04 17:17:33, updateTime=2020-11-22 13:04:15), BlogVo(blogId=1330877080455553024, blogTitle=面试官不讲武德问我：为什么MySQL不建议使用delete删除数据？, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=Java, blogSource=null, blogRemark=MySQL, blogComment=0, blogMonth=null, createdTime=2020-11-23 14:13:16, updateTime=2020-11-23 14:23:06), BlogVo(blogId=1330879440221315072, blogTitle=Java岗四面字节跳动成功之前，我都刷了那些面试题以及做了那些准备！, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=Java, blogSource=null, blogRemark=面试必备, blogComment=0, blogMonth=null, createdTime=2020-11-23 14:22:39, updateTime=2020-11-23 14:22:39)], params={typeId=1}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 230(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1324038097171820544","blogImage":"Java","blogRead":0,"blogRemark":"BeanUtils它提供了对java反射和自省API的包装。它里面还有很多工具类，这里我们介绍一下copyProperties。","blogSource":"百度","blogTitle":"BeanUtils.copyProperties的用法","createdTime":"2020-11-04 17:17:33","typeName":"Java","updateTime":"2020-11-22 13:04:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1330877080455553024","blogRead":0,"blogRemark":"MySQL","blogTitle":"面试官不讲武德问我：为什么MySQL不建议使用delete删除数据？","createdTime":"2020-11-23 14:13:16","typeName":"Java","updateTime":"2020-11-23 14:23:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1330879440221315072","blogRead":0,"blogRemark":"面试必备","blogTitle":"Java岗四面字节跳动成功之前，我都刷了那些面试题以及做了那些准备！","createdTime":"2020-11-23 14:22:39","typeName":"Java","updateTime":"2020-11-23 14:22:39"}],"pageSize":10,"params":{"typeId":1},"sortMethod":"asc","totalCount":3,"totalPage":1},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 22:23:16.928 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 22:23:18.070 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image, blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 and type_id = ? limit ?, ? 
2020-11-23 22:23:18.072 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==> Parameters: 1(Integer), 0(Integer), 10(Integer)
2020-11-23 22:23:18.113 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -<==      Total: 3
2020-11-23 22:23:18.116 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 and type_id = ? 
2020-11-23 22:23:18.116 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==> Parameters: 1(Integer)
2020-11-23 22:23:18.152 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-11-23 22:23:18.262 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 22:23:18.264 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=1, totalCount=3, list=[BlogVo(blogId=1324038097171820544, blogTitle=BeanUtils.copyProperties的用法, blogImage=Java, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=Java, blogSource=百度, blogRemark=BeanUtils它提供了对java反射和自省API的包装。它里面还有很多工具类，这里我们介绍一下copyProperties。, blogComment=0, blogMonth=null, createdTime=2020-11-04 17:17:33, updateTime=2020-11-22 13:04:15), BlogVo(blogId=1330877080455553024, blogTitle=面试官不讲武德问我：为什么MySQL不建议使用delete删除数据？, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=Java, blogSource=null, blogRemark=MySQL, blogComment=0, blogMonth=null, createdTime=2020-11-23 14:13:16, updateTime=2020-11-23 14:23:06), BlogVo(blogId=1330879440221315072, blogTitle=Java岗四面字节跳动成功之前，我都刷了那些面试题以及做了那些准备！, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=Java, blogSource=null, blogRemark=面试必备, blogComment=0, blogMonth=null, createdTime=2020-11-23 14:22:39, updateTime=2020-11-23 14:22:39)], params={typeId=1}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 235(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1324038097171820544","blogImage":"Java","blogRead":0,"blogRemark":"BeanUtils它提供了对java反射和自省API的包装。它里面还有很多工具类，这里我们介绍一下copyProperties。","blogSource":"百度","blogTitle":"BeanUtils.copyProperties的用法","createdTime":"2020-11-04 17:17:33","typeName":"Java","updateTime":"2020-11-22 13:04:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1330877080455553024","blogRead":0,"blogRemark":"MySQL","blogTitle":"面试官不讲武德问我：为什么MySQL不建议使用delete删除数据？","createdTime":"2020-11-23 14:13:16","typeName":"Java","updateTime":"2020-11-23 14:23:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1330879440221315072","blogRead":0,"blogRemark":"面试必备","blogTitle":"Java岗四面字节跳动成功之前，我都刷了那些面试题以及做了那些准备！","createdTime":"2020-11-23 14:22:39","typeName":"Java","updateTime":"2020-11-23 14:22:39"}],"pageSize":10,"params":{"typeId":1},"sortMethod":"asc","totalCount":3,"totalPage":1},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 22:23:18.343 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 22:23:21.533 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image, blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 and type_id = ? limit ?, ? 
2020-11-23 22:23:21.535 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==> Parameters: 3(Integer), 0(Integer), 10(Integer)
2020-11-23 22:23:21.571 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -<==      Total: 0
2020-11-23 22:23:21.573 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 and type_id = ? 
2020-11-23 22:23:21.574 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==> Parameters: 3(Integer)
2020-11-23 22:23:21.612 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-11-23 22:23:21.722 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 22:23:21.723 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=1, totalCount=3, list=[BlogVo(blogId=1324038097171820544, blogTitle=BeanUtils.copyProperties的用法, blogImage=Java, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=Java, blogSource=百度, blogRemark=BeanUtils它提供了对java反射和自省API的包装。它里面还有很多工具类，这里我们介绍一下copyProperties。, blogComment=0, blogMonth=null, createdTime=2020-11-04 17:17:33, updateTime=2020-11-22 13:04:15), BlogVo(blogId=1330877080455553024, blogTitle=面试官不讲武德问我：为什么MySQL不建议使用delete删除数据？, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=Java, blogSource=null, blogRemark=MySQL, blogComment=0, blogMonth=null, createdTime=2020-11-23 14:13:16, updateTime=2020-11-23 14:23:06), BlogVo(blogId=1330879440221315072, blogTitle=Java岗四面字节跳动成功之前，我都刷了那些面试题以及做了那些准备！, blogImage=null, blogContent=null, blogGoods=0, blogRead=0, blogCollection=0, typeName=Java, blogSource=null, blogRemark=面试必备, blogComment=0, blogMonth=null, createdTime=2020-11-23 14:22:39, updateTime=2020-11-23 14:22:39)], params={typeId=3}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 229(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[],"pageSize":10,"params":{"typeId":3},"sortMethod":"asc","totalCount":0,"totalPage":0},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 22:23:21.804 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 22:23:25.281 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image, blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 and type_id = ? limit ?, ? 
2020-11-23 22:23:25.283 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==> Parameters: 7(Integer), 0(Integer), 10(Integer)
2020-11-23 22:23:25.320 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -<==      Total: 0
2020-11-23 22:23:25.322 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 and type_id = ? 
2020-11-23 22:23:25.324 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==> Parameters: 7(Integer)
2020-11-23 22:23:25.364 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-11-23 22:23:25.486 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 22:23:25.487 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={typeId=7}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 252(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[],"pageSize":10,"params":{"typeId":7},"sortMethod":"asc","totalCount":0,"totalPage":0},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 22:23:25.580 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 22:23:28.181 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image, blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-11-23 22:23:28.182 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-11-23 22:23:28.226 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -<==      Total: 3
2020-11-23 22:23:28.228 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-11-23 22:23:28.229 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-11-23 22:23:28.277 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-11-23 22:23:28.409 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 22:23:28.411 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={typeId=}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 262(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1324038097171820544","blogImage":"Java","blogRead":0,"blogRemark":"BeanUtils它提供了对java反射和自省API的包装。它里面还有很多工具类，这里我们介绍一下copyProperties。","blogSource":"百度","blogTitle":"BeanUtils.copyProperties的用法","createdTime":"2020-11-04 17:17:33","typeName":"Java","updateTime":"2020-11-22 13:04:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1330877080455553024","blogRead":0,"blogRemark":"MySQL","blogTitle":"面试官不讲武德问我：为什么MySQL不建议使用delete删除数据？","createdTime":"2020-11-23 14:13:16","typeName":"Java","updateTime":"2020-11-23 14:23:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1330879440221315072","blogRead":0,"blogRemark":"面试必备","blogTitle":"Java岗四面字节跳动成功之前，我都刷了那些面试题以及做了那些准备！","createdTime":"2020-11-23 14:22:39","typeName":"Java","updateTime":"2020-11-23 14:22:39"}],"pageSize":10,"params":{"typeId":""},"sortMethod":"asc","totalCount":3,"totalPage":1},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 22:23:28.519 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 22:23:42.177 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlBlogMapper.getById.debug:159 -==>  Preparing: select blog_id, blog_title, blog_content, blog_goods, blog_image, blog_read, blog_collection, blog_type, blog_remark, blog_comment, blog_source, created_time, version from bl_blog where blog_id = ? and deleted = 0 
2020-11-23 22:23:42.178 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlBlogMapper.getById.debug:159 -==> Parameters: 1324038097171820544(String)
2020-11-23 22:23:42.218 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlBlogMapper.getById.debug:159 -<==      Total: 1
2020-11-23 22:23:42.262 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 22:23:42.264 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/get/1324038097171820544(String), [1324038097171820544](String), 1(Integer), 	at com.tqk.blog.controller.AdminController.getLoginInfo(AdminController.java:67)
	at com.tqk.blog.controller.AdminController$$FastClassBySpringCGLIB$$5e004558.invoke(<generated>)
	at com.tqk.blog.aspect.RequestAspect.doAround(RequestAspect.java:65)
	at com.tqk.blog.controller.AdminController$$EnhancerBySpringCGLIB$$8053c02.getLoginInfo(<generated>)
(String), GET(String), 83(Long), {"code":20000,"data":{"blogCollection":0,"blogComment":0,"blogContent":"BeanUtils.copyProperties(a, b);b中的存在的属性，a中一定要有，但是a中可以有多余的属性；a中与b中相同的属性都会被替换，不管是否有值；a、 b中的属性要名字相同，才能被赋值，不然的话需要手动赋值；Spring的BeanUtils的CopyProperties方法需要对应的属性有getter和setter方法；如果存在属性完全相同的内部类，但是不是同一个内部类，即分别属于各自的内部类，则spring会认为属性不同，不会copy；spring和apache的copy属性的方法源和目的参数的位置正好相反，所以导包和调用的时候都要注意一下。","blogGoods":0,"blogId":"1324038097171820544","blogImage":"Java","blogRead":0,"blogRemark":"BeanUtils它提供了对java反射和自省API的包装。它里面还有很多工具类，这里我们介绍一下copyProperties。","blogSource":"百度","blogTitle":"BeanUtils.copyProperties的用法","blogType":1,"createdTime":1604481453000,"version":2},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 22:23:42.344 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 22:23:48.277 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlBlogMapper.getById.debug:159 -==>  Preparing: select blog_id, blog_title, blog_content, blog_goods, blog_image, blog_read, blog_collection, blog_type, blog_remark, blog_comment, blog_source, created_time, version from bl_blog where blog_id = ? and deleted = 0 
2020-11-23 22:23:48.279 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlBlogMapper.getById.debug:159 -==> Parameters: 1324038097171820544(String)
2020-11-23 22:23:48.321 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlBlogMapper.getById.debug:159 -<==      Total: 1
2020-11-23 22:23:48.365 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 22:23:48.367 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/get/1324038097171820544(String), [1324038097171820544](String), 1(Integer), null, GET(String), 96(Long), {"code":20000,"data":{"blogCollection":0,"blogComment":0,"blogContent":"BeanUtils.copyProperties(a, b);b中的存在的属性，a中一定要有，但是a中可以有多余的属性；a中与b中相同的属性都会被替换，不管是否有值；a、 b中的属性要名字相同，才能被赋值，不然的话需要手动赋值；Spring的BeanUtils的CopyProperties方法需要对应的属性有getter和setter方法；如果存在属性完全相同的内部类，但是不是同一个内部类，即分别属于各自的内部类，则spring会认为属性不同，不会copy；spring和apache的copy属性的方法源和目的参数的位置正好相反，所以导包和调用的时候都要注意一下。","blogGoods":0,"blogId":"1324038097171820544","blogImage":"Java","blogRead":0,"blogRemark":"BeanUtils它提供了对java反射和自省API的包装。它里面还有很多工具类，这里我们介绍一下copyProperties。","blogSource":"百度","blogTitle":"BeanUtils.copyProperties的用法","blogType":1,"createdTime":1604481453000,"version":2},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 22:23:48.447 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 22:42:27.193 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 22:42:27.195 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /BlAdmin/info(String), [](String), 1(Integer), null, GET(String), 2(Long), {"code":20000,"data":{"name":"田起凯","password":"","signature":"hold on","username":"admin"},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 22:42:27.282 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 22:42:27.481 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -==>  Preparing: SELECT type_id,type_name,type_blog_count,enable,deleted FROM bl_type WHERE ( enable = ? and deleted = ? ) 
2020-11-23 22:42:27.482 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -==> Parameters: 1(Integer), 0(Integer)
2020-11-23 22:42:27.519 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -<==      Total: 4
2020-11-23 22:42:27.558 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 22:42:27.559 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 80(Long), {"code":20000,"data":[{"deleted":0,"enable":1,"typeBlogCount":105,"typeId":1,"typeName":"Java"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"Python"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"going"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"Spring"}],"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 22:42:27.650 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 22:42:30.071 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image, blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-11-23 22:42:30.072 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-11-23 22:42:30.109 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -<==      Total: 3
2020-11-23 22:42:30.110 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-11-23 22:42:30.110 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-11-23 22:42:30.147 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-11-23 22:42:30.260 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 22:42:30.261 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 225(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1324038097171820544","blogImage":"Java","blogRead":0,"blogRemark":"BeanUtils它提供了对java反射和自省API的包装。它里面还有很多工具类，这里我们介绍一下copyProperties。","blogSource":"百度","blogTitle":"BeanUtils.copyProperties的用法","createdTime":"2020-11-04 17:17:33","typeName":"Java","updateTime":"2020-11-22 13:04:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1330877080455553024","blogRead":0,"blogRemark":"MySQL","blogTitle":"面试官不讲武德问我：为什么MySQL不建议使用delete删除数据？","createdTime":"2020-11-23 14:13:16","typeName":"Java","updateTime":"2020-11-23 14:23:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1330879440221315072","blogRead":0,"blogRemark":"面试必备","blogTitle":"Java岗四面字节跳动成功之前，我都刷了那些面试题以及做了那些准备！","createdTime":"2020-11-23 14:22:39","typeName":"Java","updateTime":"2020-11-23 14:22:39"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":3,"totalPage":1},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 22:42:30.348 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 22:42:38.979 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlBlogMapper.getById.debug:159 -==>  Preparing: select blog_id, blog_title, blog_content, blog_goods, blog_image, blog_read, blog_collection, blog_type, blog_remark, blog_comment, blog_source, created_time, version from bl_blog where blog_id = ? and deleted = 0 
2020-11-23 22:42:38.981 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlBlogMapper.getById.debug:159 -==> Parameters: 1324038097171820544(String)
2020-11-23 22:42:39.018 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlBlogMapper.getById.debug:159 -<==      Total: 1
2020-11-23 22:42:39.062 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 22:42:39.063 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/get/1324038097171820544(String), [1324038097171820544](String), 1(Integer), null, GET(String), 84(Long), {"code":20000,"data":{"blogCollection":0,"blogComment":0,"blogContent":"BeanUtils.copyProperties(a, b);b中的存在的属性，a中一定要有，但是a中可以有多余的属性；a中与b中相同的属性都会被替换，不管是否有值；a、 b中的属性要名字相同，才能被赋值，不然的话需要手动赋值；Spring的BeanUtils的CopyProperties方法需要对应的属性有getter和setter方法；如果存在属性完全相同的内部类，但是不是同一个内部类，即分别属于各自的内部类，则spring会认为属性不同，不会copy；spring和apache的copy属性的方法源和目的参数的位置正好相反，所以导包和调用的时候都要注意一下。","blogGoods":0,"blogId":"1324038097171820544","blogImage":"Java","blogRead":0,"blogRemark":"BeanUtils它提供了对java反射和自省API的包装。它里面还有很多工具类，这里我们介绍一下copyProperties。","blogSource":"百度","blogTitle":"BeanUtils.copyProperties的用法","blogType":1,"createdTime":1604481453000,"version":2},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 22:42:39.144 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 22:42:45.049 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlBlogMapper.getById.debug:159 -==>  Preparing: select blog_id, blog_title, blog_content, blog_goods, blog_image, blog_read, blog_collection, blog_type, blog_remark, blog_comment, blog_source, created_time, version from bl_blog where blog_id = ? and deleted = 0 
2020-11-23 22:42:45.050 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlBlogMapper.getById.debug:159 -==> Parameters: 1324038097171820544(String)
2020-11-23 22:42:45.088 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlBlogMapper.getById.debug:159 -<==      Total: 1
2020-11-23 22:42:45.130 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 22:42:45.132 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/get/1324038097171820544(String), [1324038097171820544](String), 1(Integer), null, GET(String), 82(Long), {"code":20000,"data":{"blogCollection":0,"blogComment":0,"blogContent":"BeanUtils.copyProperties(a, b);b中的存在的属性，a中一定要有，但是a中可以有多余的属性；a中与b中相同的属性都会被替换，不管是否有值；a、 b中的属性要名字相同，才能被赋值，不然的话需要手动赋值；Spring的BeanUtils的CopyProperties方法需要对应的属性有getter和setter方法；如果存在属性完全相同的内部类，但是不是同一个内部类，即分别属于各自的内部类，则spring会认为属性不同，不会copy；spring和apache的copy属性的方法源和目的参数的位置正好相反，所以导包和调用的时候都要注意一下。","blogGoods":0,"blogId":"1324038097171820544","blogImage":"Java","blogRead":0,"blogRemark":"BeanUtils它提供了对java反射和自省API的包装。它里面还有很多工具类，这里我们介绍一下copyProperties。","blogSource":"百度","blogTitle":"BeanUtils.copyProperties的用法","blogType":1,"createdTime":1604481453000,"version":2},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 22:42:45.213 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 22:52:49.079 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlTypeMapper.selectAll.debug:159 -==>  Preparing: SELECT type_id,type_name,type_blog_count,enable,deleted FROM bl_type 
2020-11-23 22:52:49.080 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlTypeMapper.selectAll.debug:159 -==> Parameters: 
2020-11-23 22:52:49.118 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlTypeMapper.selectAll.debug:159 -<==      Total: 4
2020-11-23 22:52:49.158 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 22:52:49.160 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 112(Long), {"code":20000,"data":[{"deleted":0,"enable":1,"typeBlogCount":105,"typeId":1,"typeName":"Java"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"Python"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"going"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"Spring"}],"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 22:52:49.241 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 22:52:57.174 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image, blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-11-23 22:52:57.175 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 10(Integer)
2020-11-23 22:52:57.214 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -<==      Total: 3
2020-11-23 22:52:57.215 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-11-23 22:52:57.216 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-11-23 22:52:57.280 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-11-23 22:52:57.418 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 22:52:57.418 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=10, totalPage=0, totalCount=0, list=[], params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), null, POST(String), 293(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1324038097171820544","blogImage":"Java","blogRead":0,"blogRemark":"BeanUtils它提供了对java反射和自省API的包装。它里面还有很多工具类，这里我们介绍一下copyProperties。","blogSource":"百度","blogTitle":"BeanUtils.copyProperties的用法","createdTime":"2020-11-04 17:17:33","typeName":"Java","updateTime":"2020-11-22 13:04:15"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1330877080455553024","blogRead":0,"blogRemark":"MySQL","blogTitle":"面试官不讲武德问我：为什么MySQL不建议使用delete删除数据？","createdTime":"2020-11-23 14:13:16","typeName":"Java","updateTime":"2020-11-23 14:23:06"},{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1330879440221315072","blogRead":0,"blogRemark":"面试必备","blogTitle":"Java岗四面字节跳动成功之前，我都刷了那些面试题以及做了那些准备！","createdTime":"2020-11-23 14:22:39","typeName":"Java","updateTime":"2020-11-23 14:22:39"}],"pageSize":10,"params":{},"sortMethod":"asc","totalCount":3,"totalPage":1},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 22:52:57.515 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 22:53:02.909 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlTypeMapper.selectAll.debug:159 -==>  Preparing: SELECT type_id,type_name,type_blog_count,enable,deleted FROM bl_type 
2020-11-23 22:53:02.909 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlTypeMapper.selectAll.debug:159 -==> Parameters: 
2020-11-23 22:53:02.947 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlTypeMapper.selectAll.debug:159 -<==      Total: 4
2020-11-23 22:53:02.991 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 22:53:02.992 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 91(Long), {"code":20000,"data":[{"deleted":0,"enable":1,"typeBlogCount":105,"typeId":1,"typeName":"Java"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"Python"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"going"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"Spring"}],"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 22:53:03.080 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 22:54:46.848 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 22:54:46.849 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /BlAdmin/info(String), [](String), 1(Integer), 	at com.tqk.blog.controller.AdminController.getLoginInfo(AdminController.java:67)
	at com.tqk.blog.controller.AdminController$$FastClassBySpringCGLIB$$5e004558.invoke(<generated>)
	at com.tqk.blog.aspect.RequestAspect.doAround(RequestAspect.java:65)
	at com.tqk.blog.controller.AdminController$$EnhancerBySpringCGLIB$$8053c02.getLoginInfo(<generated>)
(String), GET(String), 2(Long), {"code":20000,"data":{"name":"田起凯","password":"","signature":"hold on","username":"admin"},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 22:54:46.928 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 22:54:47.122 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlTypeMapper.selectAll.debug:159 -==>  Preparing: SELECT type_id,type_name,type_blog_count,enable,deleted FROM bl_type 
2020-11-23 22:54:47.123 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlTypeMapper.selectAll.debug:159 -==> Parameters: 
2020-11-23 22:54:47.123 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -==>  Preparing: SELECT type_id,type_name,type_blog_count,enable,deleted FROM bl_type WHERE ( enable = ? and deleted = ? ) 
2020-11-23 22:54:47.124 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -==> Parameters: 1(Integer), 0(Integer)
2020-11-23 22:54:47.161 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlTypeMapper.selectAll.debug:159 -<==      Total: 4
2020-11-23 22:54:47.162 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -<==      Total: 4
2020-11-23 22:54:47.201 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 22:54:47.202 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 84(Long), {"code":20000,"data":[{"deleted":0,"enable":1,"typeBlogCount":105,"typeId":1,"typeName":"Java"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"Python"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"going"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"Spring"}],"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 22:54:47.203 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 22:54:47.203 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 85(Long), {"code":20000,"data":[{"deleted":0,"enable":1,"typeBlogCount":105,"typeId":1,"typeName":"Java"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"Python"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"going"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"Spring"}],"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 22:54:47.283 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 22:54:47.288 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 22:54:52.054 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlTypeMapper.selectOne.debug:159 -==>  Preparing: SELECT type_id,type_name,type_blog_count,enable,deleted FROM bl_type 
2020-11-23 22:54:52.055 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlTypeMapper.selectOne.debug:159 -==> Parameters: 
2020-11-23 22:54:52.094 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlTypeMapper.selectOne.debug:159 -<==      Total: 4
2020-11-23 22:54:52.139 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 22:54:52.140 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /type/save(String), [com.tqk.blog.pojo.BlType@7140af1f](String), 0(Integer), org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.TooManyResultsException: Expected one result (or null) to be returned by selectOne(), but found: 4
	at com.tqk.blog.service.impl.TypeServiceImpl.save(TypeServiceImpl.java:34)
	at com.tqk.blog.controller.TypeController.save(TypeController.java:30)
	at com.tqk.blog.controller.TypeController$$FastClassBySpringCGLIB$$81241fc9.invoke(<generated>)
	at com.tqk.blog.aspect.RequestAspect.doAround(RequestAspect.java:65)
	at com.tqk.blog.controller.TypeController$$EnhancerBySpringCGLIB$$195059f5.save(<generated>)
Caused by: org.apache.ibatis.exceptions.TooManyResultsException: Expected one result (or null) to be returned by selectOne(), but found: 4
(String), POST(String), 0(Long), {"code":20000,"data":[{"deleted":0,"enable":1,"typeBlogCount":105,"typeId":1,"typeName":"Java"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"Python"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"going"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"Spring"}],"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 22:54:52.226 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 22:54:58.766 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlTypeMapper.selectByPrimaryKey.debug:159 -==>  Preparing: SELECT type_id,type_name,type_blog_count,enable,deleted FROM bl_type WHERE type_id = ? 
2020-11-23 22:54:58.767 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlTypeMapper.selectByPrimaryKey.debug:159 -==> Parameters: 1(Integer)
2020-11-23 22:54:58.806 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlTypeMapper.selectByPrimaryKey.debug:159 -<==      Total: 1
2020-11-23 22:54:58.849 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 22:54:58.851 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /type/get/1(String), [1](String), 1(Integer), null, GET(String), 86(Long), {"code":20000,"data":{"deleted":0,"enable":1,"typeBlogCount":105,"typeId":1,"typeName":"Java"},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 22:54:58.942 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 22:57:14.841 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 22:57:14.842 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /BlAdmin/info(String), [](String), 1(Integer), null, GET(String), 3(Long), {"code":20000,"data":{"name":"田起凯","password":"","signature":"hold on","username":"admin"},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 22:57:14.925 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 22:57:15.132 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlTypeMapper.selectAll.debug:159 -==>  Preparing: SELECT type_id,type_name,type_blog_count,enable,deleted FROM bl_type 
2020-11-23 22:57:15.132 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlTypeMapper.selectAll.debug:159 -==> Parameters: 
2020-11-23 22:57:15.133 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -==>  Preparing: SELECT type_id,type_name,type_blog_count,enable,deleted FROM bl_type WHERE ( enable = ? and deleted = ? ) 
2020-11-23 22:57:15.134 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -==> Parameters: 1(Integer), 0(Integer)
2020-11-23 22:57:15.170 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlTypeMapper.selectAll.debug:159 -<==      Total: 4
2020-11-23 22:57:15.171 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -<==      Total: 4
2020-11-23 22:57:15.209 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 22:57:15.209 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 81(Long), {"code":20000,"data":[{"deleted":0,"enable":1,"typeBlogCount":105,"typeId":1,"typeName":"Java"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"Python"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"going"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"Spring"}],"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 22:57:15.211 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 22:57:15.211 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 81(Long), {"code":20000,"data":[{"deleted":0,"enable":1,"typeBlogCount":105,"typeId":1,"typeName":"Java"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"Python"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"going"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"Spring"}],"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 22:57:15.288 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 22:57:15.295 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 23:03:04.124 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 23:03:04.125 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /BlAdmin/info(String), [](String), 1(Integer), null, GET(String), 2(Long), {"code":20000,"data":{"name":"田起凯","password":"","signature":"hold on","username":"admin"},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 23:03:04.212 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 23:03:04.386 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -==>  Preparing: SELECT type_id,type_name,type_blog_count,enable,deleted FROM bl_type WHERE ( enable = ? and deleted = ? ) 
2020-11-23 23:03:04.387 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -==> Parameters: 1(Integer), 0(Integer)
2020-11-23 23:03:04.425 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -<==      Total: 4
2020-11-23 23:03:04.465 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 23:03:04.467 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 81(Long), {"code":20000,"data":[{"deleted":0,"enable":1,"typeBlogCount":105,"typeId":1,"typeName":"Java"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"Python"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"going"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"Spring"}],"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 23:03:04.550 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 23:03:06.754 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlTypeMapper.selectAll.debug:159 -==>  Preparing: SELECT type_id,type_name,type_blog_count,enable,deleted FROM bl_type 
2020-11-23 23:03:06.755 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlTypeMapper.selectAll.debug:159 -==> Parameters: 
2020-11-23 23:03:06.793 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlTypeMapper.selectAll.debug:159 -<==      Total: 4
2020-11-23 23:03:06.840 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 23:03:06.841 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), 	at com.tqk.blog.controller.AdminController.getLoginInfo(AdminController.java:67)
	at com.tqk.blog.controller.AdminController$$FastClassBySpringCGLIB$$5e004558.invoke(<generated>)
	at com.tqk.blog.aspect.RequestAspect.doAround(RequestAspect.java:65)
	at com.tqk.blog.controller.AdminController$$EnhancerBySpringCGLIB$$8053c02.getLoginInfo(<generated>)
(String), GET(String), 83(Long), {"code":20000,"data":[{"deleted":0,"enable":1,"typeBlogCount":105,"typeId":1,"typeName":"Java"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"Python"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"going"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"Spring"}],"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 23:03:06.925 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 23:03:37.738 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 23:03:37.738 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /BlAdmin/info(String), [](String), 1(Integer), null, GET(String), 2(Long), {"code":20000,"data":{"name":"田起凯","password":"","signature":"hold on","username":"admin"},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 23:03:37.821 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 23:03:38.039 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -==>  Preparing: SELECT type_id,type_name,type_blog_count,enable,deleted FROM bl_type WHERE ( enable = ? and deleted = ? ) 
2020-11-23 23:03:38.039 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -==> Parameters: 1(Integer), 0(Integer)
2020-11-23 23:03:38.078 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -<==      Total: 4
2020-11-23 23:03:38.119 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 23:03:38.121 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 87(Long), {"code":20000,"data":[{"deleted":0,"enable":1,"typeBlogCount":105,"typeId":1,"typeName":"Java"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"Python"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"going"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"Spring"}],"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 23:03:38.205 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 23:03:39.967 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlTypeMapper.selectAll.debug:159 -==>  Preparing: SELECT type_id,type_name,type_blog_count,enable,deleted FROM bl_type 
2020-11-23 23:03:39.968 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlTypeMapper.selectAll.debug:159 -==> Parameters: 
2020-11-23 23:03:40.006 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlTypeMapper.selectAll.debug:159 -<==      Total: 4
2020-11-23 23:03:40.048 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 23:03:40.049 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.TooManyResultsException: Expected one result (or null) to be returned by selectOne(), but found: 4
	at com.tqk.blog.service.impl.TypeServiceImpl.save(TypeServiceImpl.java:34)
	at com.tqk.blog.controller.TypeController.save(TypeController.java:30)
	at com.tqk.blog.controller.TypeController$$FastClassBySpringCGLIB$$81241fc9.invoke(<generated>)
	at com.tqk.blog.aspect.RequestAspect.doAround(RequestAspect.java:65)
	at com.tqk.blog.controller.TypeController$$EnhancerBySpringCGLIB$$195059f5.save(<generated>)
Caused by: org.apache.ibatis.exceptions.TooManyResultsException: Expected one result (or null) to be returned by selectOne(), but found: 4
(String), GET(String), 80(Long), {"code":20000,"data":[{"deleted":0,"enable":1,"typeBlogCount":105,"typeId":1,"typeName":"Java"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"Python"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"going"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"Spring"}],"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 23:03:40.133 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 23:04:05.585 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlTypeMapper.selectAll.debug:159 -==>  Preparing: SELECT type_id,type_name,type_blog_count,enable,deleted FROM bl_type 
2020-11-23 23:04:05.586 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlTypeMapper.selectAll.debug:159 -==> Parameters: 
2020-11-23 23:04:05.623 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlTypeMapper.selectAll.debug:159 -<==      Total: 4
2020-11-23 23:04:05.663 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 23:04:05.664 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 79(Long), {"code":20000,"data":[{"deleted":0,"enable":1,"typeBlogCount":105,"typeId":1,"typeName":"Java"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"Python"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"going"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"Spring"}],"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 23:04:05.752 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 23:04:07.355 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 23:04:07.356 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /BlAdmin/info(String), [](String), 1(Integer), null, GET(String), 1(Long), {"code":20000,"data":{"name":"田起凯","password":"","signature":"hold on","username":"admin"},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 23:04:07.444 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 23:04:07.617 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -==>  Preparing: SELECT type_id,type_name,type_blog_count,enable,deleted FROM bl_type WHERE ( enable = ? and deleted = ? ) 
2020-11-23 23:04:07.618 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -==> Parameters: 1(Integer), 0(Integer)
2020-11-23 23:04:07.655 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -<==      Total: 4
2020-11-23 23:04:07.696 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 23:04:07.697 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 81(Long), {"code":20000,"data":[{"deleted":0,"enable":1,"typeBlogCount":105,"typeId":1,"typeName":"Java"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"Python"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"going"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"Spring"}],"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 23:04:07.781 DEBUG [http-nio-8899-exec-4]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 23:04:09.765 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlTypeMapper.selectAll.debug:159 -==>  Preparing: SELECT type_id,type_name,type_blog_count,enable,deleted FROM bl_type 
2020-11-23 23:04:09.765 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlTypeMapper.selectAll.debug:159 -==> Parameters: 
2020-11-23 23:04:09.803 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlTypeMapper.selectAll.debug:159 -<==      Total: 4
2020-11-23 23:04:09.843 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 23:04:09.844 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 83(Long), {"code":20000,"data":[{"deleted":0,"enable":1,"typeBlogCount":105,"typeId":1,"typeName":"Java"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"Python"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"going"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"Spring"}],"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 23:04:09.930 DEBUG [http-nio-8899-exec-3]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 23:04:36.298 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlTypeMapper.selectAll.debug:159 -==>  Preparing: SELECT type_id,type_name,type_blog_count,enable,deleted FROM bl_type 
2020-11-23 23:04:36.298 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlTypeMapper.selectAll.debug:159 -==> Parameters: 
2020-11-23 23:04:36.338 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlTypeMapper.selectAll.debug:159 -<==      Total: 4
2020-11-23 23:04:36.377 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 23:04:36.378 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 83(Long), {"code":20000,"data":[{"deleted":0,"enable":1,"typeBlogCount":105,"typeId":1,"typeName":"Java"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"Python"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"going"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"Spring"}],"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 23:04:36.464 DEBUG [http-nio-8899-exec-5]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 23:04:45.467 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 23:04:45.468 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /BlAdmin/info(String), [](String), 1(Integer), null, GET(String), 2(Long), {"code":20000,"data":{"name":"田起凯","password":"","signature":"hold on","username":"admin"},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 23:04:45.557 DEBUG [http-nio-8899-exec-6]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 23:04:45.729 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -==>  Preparing: SELECT type_id,type_name,type_blog_count,enable,deleted FROM bl_type WHERE ( enable = ? and deleted = ? ) 
2020-11-23 23:04:45.730 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -==> Parameters: 1(Integer), 0(Integer)
2020-11-23 23:04:45.771 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -<==      Total: 4
2020-11-23 23:04:45.812 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 23:04:45.814 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), 	at com.tqk.blog.controller.AdminController.getLoginInfo(AdminController.java:67)
	at com.tqk.blog.controller.AdminController$$FastClassBySpringCGLIB$$5e004558.invoke(<generated>)
	at com.tqk.blog.aspect.RequestAspect.doAround(RequestAspect.java:65)
	at com.tqk.blog.controller.AdminController$$EnhancerBySpringCGLIB$$8053c02.getLoginInfo(<generated>)
(String), GET(String), 85(Long), {"code":20000,"data":[{"deleted":0,"enable":1,"typeBlogCount":105,"typeId":1,"typeName":"Java"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"Python"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"going"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"Spring"}],"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 23:04:45.898 DEBUG [http-nio-8899-exec-7]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 23:04:47.996 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlTypeMapper.selectAll.debug:159 -==>  Preparing: SELECT type_id,type_name,type_blog_count,enable,deleted FROM bl_type 
2020-11-23 23:04:47.996 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlTypeMapper.selectAll.debug:159 -==> Parameters: 
2020-11-23 23:04:48.033 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlTypeMapper.selectAll.debug:159 -<==      Total: 4
2020-11-23 23:04:48.074 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 23:04:48.075 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 78(Long), {"code":20000,"data":[{"deleted":0,"enable":1,"typeBlogCount":105,"typeId":1,"typeName":"Java"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"Python"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"going"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"Spring"}],"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 23:04:48.168 DEBUG [http-nio-8899-exec-9]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 23:05:39.012 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlTypeMapper.selectAll.debug:159 -==>  Preparing: SELECT type_id,type_name,type_blog_count,enable,deleted FROM bl_type 
2020-11-23 23:05:39.012 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlTypeMapper.selectAll.debug:159 -==> Parameters: 
2020-11-23 23:05:39.050 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlTypeMapper.selectAll.debug:159 -<==      Total: 4
2020-11-23 23:05:39.092 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 23:05:39.094 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 80(Long), {"code":20000,"data":[{"deleted":0,"enable":1,"typeBlogCount":105,"typeId":1,"typeName":"Java"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"Python"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"going"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"Spring"}],"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 23:05:39.177 DEBUG [http-nio-8899-exec-8]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 23:05:42.578 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 23:05:42.579 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /BlAdmin/info(String), [](String), 1(Integer), org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.TooManyResultsException: Expected one result (or null) to be returned by selectOne(), but found: 4
	at com.tqk.blog.service.impl.TypeServiceImpl.save(TypeServiceImpl.java:34)
	at com.tqk.blog.controller.TypeController.save(TypeController.java:30)
	at com.tqk.blog.controller.TypeController$$FastClassBySpringCGLIB$$81241fc9.invoke(<generated>)
	at com.tqk.blog.aspect.RequestAspect.doAround(RequestAspect.java:65)
	at com.tqk.blog.controller.TypeController$$EnhancerBySpringCGLIB$$195059f5.save(<generated>)
Caused by: org.apache.ibatis.exceptions.TooManyResultsException: Expected one result (or null) to be returned by selectOne(), but found: 4
(String), GET(String), 2(Long), {"code":20000,"data":{"name":"田起凯","password":"","signature":"hold on","username":"admin"},"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 23:05:42.664 DEBUG [http-nio-8899-exec-10]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 23:05:42.848 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -==>  Preparing: SELECT type_id,type_name,type_blog_count,enable,deleted FROM bl_type WHERE ( enable = ? and deleted = ? ) 
2020-11-23 23:05:42.849 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -==> Parameters: 1(Integer), 0(Integer)
2020-11-23 23:05:42.886 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlTypeMapper.selectByExample.debug:159 -<==      Total: 4
2020-11-23 23:05:42.926 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 23:05:42.928 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /type/getList(String), [](String), 1(Integer), null, GET(String), 80(Long), {"code":20000,"data":[{"deleted":0,"enable":1,"typeBlogCount":105,"typeId":1,"typeName":"Java"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"Python"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"going"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"Spring"}],"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 23:05:43.013 DEBUG [http-nio-8899-exec-2]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-23 23:05:44.739 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlTypeMapper.selectAll.debug:159 -==>  Preparing: SELECT type_id,type_name,type_blog_count,enable,deleted FROM bl_type 
2020-11-23 23:05:44.739 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlTypeMapper.selectAll.debug:159 -==> Parameters: 
2020-11-23 23:05:44.777 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlTypeMapper.selectAll.debug:159 -<==      Total: 4
2020-11-23 23:05:44.820 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-23 23:05:44.821 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /type/listBack(String), [](String), 1(Integer), null, GET(String), 81(Long), {"code":20000,"data":[{"deleted":0,"enable":1,"typeBlogCount":105,"typeId":1,"typeName":"Java"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":3,"typeName":"Python"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":6,"typeName":"going"},{"deleted":0,"enable":1,"typeBlogCount":0,"typeId":7,"typeName":"Spring"}],"msg":"操作成功！"}(String), 192.168.101.29(String)
2020-11-23 23:05:44.904 DEBUG [http-nio-8899-exec-1]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
