2020-11-05 00:40:19.051 DEBUG [main]com.tqk.blog.BlogApplication.logStarting:56 -Running with Spring Boot v2.2.2.RELEASE, Spring v5.2.2.RELEASE
2020-11-05 00:54:05.788 DEBUG [http-nio-8080-exec-2]com.tqk.blog.mapper.BlAdminMapper.getByUsername.debug:159 -==>  Preparing: select name, header, signature, username, password from bl_admin where username = ? 
2020-11-05 00:54:05.832 DEBUG [http-nio-8080-exec-2]com.tqk.blog.mapper.BlAdminMapper.getByUsername.debug:159 -==> Parameters: admin(String)
2020-11-05 00:54:05.937 DEBUG [http-nio-8080-exec-2]com.tqk.blog.mapper.BlAdminMapper.getByUsername.debug:159 -<==      Total: 1
2020-11-05 00:54:06.085 DEBUG [http-nio-8080-exec-2]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-05 00:54:06.088 DEBUG [http-nio-8080-exec-2]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /BlAdmin/login(String), [com.tqk.blog.pojo.BlAdmin@6fbe7958](String), 1(Integer), null, POST(String), 264(Long), {"code":20000,"data":{"token":"1BC313B3659F717C60D97A6DB33A4348"},"msg":"操作成功！"}(String), 0:0:0:0:0:0:0:1(String)
2020-11-05 00:54:06.171 DEBUG [http-nio-8080-exec-2]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-05 00:54:45.702 DEBUG [http-nio-8080-exec-5]com.tqk.blog.mapper.BlBlogMapper.save.debug:159 -==>  Preparing: insert into bl_blog( blog_id, blog_title,blog_image, blog_content, blog_type, blog_remark, blog_source ) values ( ?, ?, ?, ?, ?, ?, ? ) 
2020-11-05 00:54:45.705 DEBUG [http-nio-8080-exec-5]com.tqk.blog.mapper.BlBlogMapper.save.debug:159 -==> Parameters: 1324032347775086592(String), null, Java(String), 在项目中，@Transactional(rollbackFor=Exception.class)，如果类加了这个注解，那么这个类里面的方法抛出异常，就会回滚，数据库里面的数据也会回滚。在@Transactional注解中如果不配置rollbackFor属性,那么事物只会在遇到RuntimeException的时候才会回滚,加上rollbackFor=Exception.class,可以让事物在遇到非运行时异常时也回滚(String), 1(Integer), Spring中的@Transactional(rollbackFor = Exception.class)属性详解(String), 百度(String)
2020-11-05 00:54:46.346 DEBUG [http-nio-8080-exec-5]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-05 00:54:46.350 DEBUG [http-nio-8080-exec-5]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/save(String), [com.tqk.blog.pojo.BlBlog@12ec4c11](String), 0(Integer), org.springframework.dao.DataIntegrityViolationException: 
### Error updating database.  Cause: java.sql.SQLIntegrityConstraintViolationException: Column 'blog_title' cannot be null
### The error may involve com.tqk.blog.mapper.BlBlogMapper.save-Inline
### Cause: java.sql.SQLIntegrityConstraintViolationException: Column 'blog_title' cannot be null
; Column 'blog_title' cannot be null; nested exception is java.sql.SQLIntegrityConstraintViolationException: Column 'blog_title' cannot be null
	at com.tqk.blog.service.impl.BlogServiceImpl.save(BlogServiceImpl.java:55)
	at com.tqk.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$c89e2edd.invoke(<generated>)
	at com.tqk.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$95064f5.save(<generated>)
	at com.tqk.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$c89e2edd.invoke(<generated>)
	at com.tqk.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$a1776771.save(<generated>)
	at com.tqk.blog.controller.BlogController.save(BlogController.java:39)
	at com.tqk.blog.controller.BlogController$$FastClassBySpringCGLIB$$a4fc5e31.invoke(<generated>)
	at com.tqk.blog.aspect.RequestAspect.doAround(RequestAspect.java:65)
	at com.tqk.blog.controller.BlogController$$EnhancerBySpringCGLIB$$8801d724.save(<generated>)
Caused by: java.sql.SQLIntegrityConstraintViolationException: Column 'blog_title' cannot be null
(String), POST(String), 0(Long), null, 0:0:0:0:0:0:0:1(String)
2020-11-05 00:54:46.471 DEBUG [http-nio-8080-exec-5]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-05 00:54:55.434 DEBUG [http-nio-8080-exec-7]com.tqk.blog.mapper.BlBlogMapper.save.debug:159 -==>  Preparing: insert into bl_blog( blog_id, blog_title,blog_image, blog_content, blog_type, blog_remark, blog_source ) values ( ?, ?, ?, ?, ?, ?, ? ) 
2020-11-05 00:54:55.436 DEBUG [http-nio-8080-exec-7]com.tqk.blog.mapper.BlBlogMapper.save.debug:159 -==> Parameters: 1324032388606636032(String), null, Java(String), 在项目中，@Transactional(rollbackFor=Exception.class)，如果类加了这个注解，那么这个类里面的方法抛出异常，就会回滚，数据库里面的数据也会回滚。在@Transactional注解中如果不配置rollbackFor属性,那么事物只会在遇到RuntimeException的时候才会回滚,加上rollbackFor=Exception.class,可以让事物在遇到非运行时异常时也回滚(String), 1(Integer), Spring中的@Transactional(rollbackFor = Exception.class)属性详解(String), 百度(String)
2020-11-05 00:54:55.694 DEBUG [http-nio-8080-exec-7]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-05 00:54:55.696 DEBUG [http-nio-8080-exec-7]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/save(String), [com.tqk.blog.pojo.BlBlog@dd52d76](String), 0(Integer), org.springframework.dao.DataIntegrityViolationException: 
### Error updating database.  Cause: java.sql.SQLIntegrityConstraintViolationException: Column 'blog_title' cannot be null
### The error may involve com.tqk.blog.mapper.BlBlogMapper.save-Inline
### Cause: java.sql.SQLIntegrityConstraintViolationException: Column 'blog_title' cannot be null
; Column 'blog_title' cannot be null; nested exception is java.sql.SQLIntegrityConstraintViolationException: Column 'blog_title' cannot be null
	at com.tqk.blog.service.impl.BlogServiceImpl.save(BlogServiceImpl.java:55)
	at com.tqk.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$c89e2edd.invoke(<generated>)
	at com.tqk.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$95064f5.save(<generated>)
	at com.tqk.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$c89e2edd.invoke(<generated>)
	at com.tqk.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$a1776771.save(<generated>)
	at com.tqk.blog.controller.BlogController.save(BlogController.java:39)
	at com.tqk.blog.controller.BlogController$$FastClassBySpringCGLIB$$a4fc5e31.invoke(<generated>)
	at com.tqk.blog.aspect.RequestAspect.doAround(RequestAspect.java:65)
	at com.tqk.blog.controller.BlogController$$EnhancerBySpringCGLIB$$8801d724.save(<generated>)
Caused by: java.sql.SQLIntegrityConstraintViolationException: Column 'blog_title' cannot be null
(String), POST(String), 0(Long), null, 0:0:0:0:0:0:0:1(String)
2020-11-05 00:54:55.793 DEBUG [http-nio-8080-exec-7]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-05 00:55:27.075 DEBUG [http-nio-8080-exec-9]com.tqk.blog.mapper.BlBlogMapper.save.debug:159 -==>  Preparing: insert into bl_blog( blog_id, blog_title,blog_image, blog_content, blog_type, blog_remark, blog_source ) values ( ?, ?, ?, ?, ?, ?, ? ) 
2020-11-05 00:55:27.078 DEBUG [http-nio-8080-exec-9]com.tqk.blog.mapper.BlBlogMapper.save.debug:159 -==> Parameters: 1324032521322803200(String), Spring中的@Transactional(rollbackFor = Exception.class)属性详解(String), Java(String), 在项目中，@Transactional(rollbackFor=Exception.class)，如果类加了这个注解，那么这个类里面的方法抛出异常，就会回滚，数据库里面的数据也会回滚。在@Transactional注解中如果不配置rollbackFor属性,那么事物只会在遇到RuntimeException的时候才会回滚,加上rollbackFor=Exception.class,可以让事物在遇到非运行时异常时也回滚(String), 1(Integer), Spring中的@Transactional(rollbackFor = Exception.class)属性详解(String), 百度(String)
2020-11-05 00:55:27.218 DEBUG [http-nio-8080-exec-9]com.tqk.blog.mapper.BlBlogMapper.save.debug:159 -<==    Updates: 1
2020-11-05 00:55:27.221 DEBUG [http-nio-8080-exec-9]com.tqk.blog.mapper.BlTypeMapper.selectByPrimaryKey.debug:159 -==>  Preparing: SELECT type_id,type_name,type_blog_count,enable,deleted FROM bl_type WHERE type_id = ? 
2020-11-05 00:55:27.223 DEBUG [http-nio-8080-exec-9]com.tqk.blog.mapper.BlTypeMapper.selectByPrimaryKey.debug:159 -==> Parameters: 1(Integer)
2020-11-05 00:55:27.271 DEBUG [http-nio-8080-exec-9]com.tqk.blog.mapper.BlTypeMapper.selectByPrimaryKey.debug:159 -<==      Total: 1
2020-11-05 00:55:27.274 DEBUG [http-nio-8080-exec-9]com.tqk.blog.mapper.BlTypeMapper.updateByPrimaryKey.debug:159 -==>  Preparing: UPDATE bl_type SET type_name = ?,type_blog_count = ?,enable = ?,deleted = ? WHERE type_id = ? 
2020-11-05 00:55:27.277 DEBUG [http-nio-8080-exec-9]com.tqk.blog.mapper.BlTypeMapper.updateByPrimaryKey.debug:159 -==> Parameters: Java(String), 101(Integer), 1(Integer), 0(Integer), 1(Integer)
2020-11-05 00:55:27.373 DEBUG [http-nio-8080-exec-9]com.tqk.blog.mapper.BlTypeMapper.updateByPrimaryKey.debug:159 -<==    Updates: 1
2020-11-05 00:55:27.573 DEBUG [http-nio-8080-exec-9]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-05 00:55:27.575 DEBUG [http-nio-8080-exec-9]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/save(String), [com.tqk.blog.pojo.BlBlog@46a08be4](String), 1(Integer), null, POST(String), 596(Long), {"code":20000,"msg":"添加成功！"}(String), 0:0:0:0:0:0:0:1(String)
2020-11-05 00:55:27.664 DEBUG [http-nio-8080-exec-9]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-05 01:01:03.083 DEBUG [http-nio-8080-exec-2]com.tqk.blog.mapper.BlBlogMapper.getById.debug:159 -==>  Preparing: select blog_id, blog_title, blog_content, blog_goods, blog_image, blog_read, blog_collection, blog_type, blog_remark, blog_comment, blog_source, created_time, version from bl_blog where blog_id = ? and deleted = 0 
2020-11-05 01:01:03.085 DEBUG [http-nio-8080-exec-2]com.tqk.blog.mapper.BlBlogMapper.getById.debug:159 -==> Parameters: 1324032521322803200(String)
2020-11-05 01:01:03.179 DEBUG [http-nio-8080-exec-2]com.tqk.blog.mapper.BlBlogMapper.getById.debug:159 -<==      Total: 1
2020-11-05 01:01:03.289 DEBUG [http-nio-8080-exec-2]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-05 01:01:03.291 DEBUG [http-nio-8080-exec-2]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/get/1324032521322803200(String), [1324032521322803200](String), 1(Integer), null, GET(String), 148(Long), {"code":20000,"data":{"blogCollection":0,"blogComment":0,"blogContent":"在项目中，@Transactional(rollbackFor=Exception.class)，如果类加了这个注解，那么这个类里面的方法抛出异常，就会回滚，数据库里面的数据也会回滚。在@Transactional注解中如果不配置rollbackFor属性,那么事物只会在遇到RuntimeException的时候才会回滚,加上rollbackFor=Exception.class,可以让事物在遇到非运行时异常时也回滚","blogGoods":0,"blogId":"1324032521322803200","blogImage":"Java","blogRead":0,"blogRemark":"Spring中的@Transactional(rollbackFor = Exception.class)属性详解","blogSource":"百度","blogTitle":"Spring中的@Transactional(rollbackFor = Exception.class)属性详解","blogType":1,"createdTime":1604480124000,"version":1},"msg":"操作成功！"}(String), 0:0:0:0:0:0:0:1(String)
2020-11-05 01:01:03.409 DEBUG [http-nio-8080-exec-2]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-05 01:04:43.106 DEBUG [http-nio-8080-exec-7]com.tqk.blog.mapper.BlBlogMapper.getById.debug:159 -==>  Preparing: select blog_id, blog_title, blog_content, blog_goods, blog_image, blog_read, blog_collection, blog_type, blog_remark, blog_comment, blog_source, created_time, version from bl_blog where blog_id = ? and deleted = 0 
2020-11-05 01:04:43.107 DEBUG [http-nio-8080-exec-7]com.tqk.blog.mapper.BlBlogMapper.getById.debug:159 -==> Parameters: null
2020-11-05 01:04:43.191 DEBUG [http-nio-8080-exec-7]com.tqk.blog.mapper.BlBlogMapper.getById.debug:159 -<==      Total: 0
2020-11-05 01:04:43.230 DEBUG [http-nio-8080-exec-7]com.tqk.blog.mapper.BlBlogMapper.update.debug:159 -==>  Preparing: update bl_blog set version = version + 1 ,blog_title = ? ,blog_image = ? ,blog_content = ? ,blog_type = ? ,blog_remark = ? ,blog_source = ? where blog_id = ? and version = ? 
2020-11-05 01:04:43.231 DEBUG [http-nio-8080-exec-7]com.tqk.blog.mapper.BlBlogMapper.update.debug:159 -==> Parameters: Spring中的@Transactional(rollbackFor = Exception.class)属性详解(String), Java(String), 在项目中，@Transactional(rollbackFor=Exception.class)，如果类加了这个注解，那么这个类里面的方法抛出异常，就会回滚，数据库里面的数据也会回滚。在@Transactional注解中如果不配置rollbackFor属性,那么事物只会在遇到RuntimeException的时候才会回滚,加上rollbackFor=Exception.class,可以让事物在遇到非运行时异常时也回滚(String), 1(Integer), valu可选的限定描述符，指定使用的事务管理器(String), 百度(String), null, null
2020-11-05 01:04:43.313 DEBUG [http-nio-8080-exec-7]com.tqk.blog.mapper.BlBlogMapper.update.debug:159 -<==    Updates: 0
2020-11-05 01:04:43.461 DEBUG [http-nio-8080-exec-7]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-05 01:04:43.462 DEBUG [http-nio-8080-exec-7]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/update(String), [com.tqk.blog.pojo.BlBlog@73a75a61](String), 0(Integer), 	at com.tqk.blog.service.impl.BlogServiceImpl.update(BlogServiceImpl.java:75)
	at com.tqk.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$c89e2edd.invoke(<generated>)
	at com.tqk.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$95064f5.update(<generated>)
	at com.tqk.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$c89e2edd.invoke(<generated>)
	at com.tqk.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$a1776771.update(<generated>)
	at com.tqk.blog.controller.BlogController.update(BlogController.java:60)
	at com.tqk.blog.controller.BlogController$$FastClassBySpringCGLIB$$a4fc5e31.invoke(<generated>)
	at com.tqk.blog.aspect.RequestAspect.doAround(RequestAspect.java:65)
	at com.tqk.blog.controller.BlogController$$EnhancerBySpringCGLIB$$8801d724.update(<generated>)
(String), PUT(String), 0(Long), null, 0:0:0:0:0:0:0:1(String)
2020-11-05 01:04:43.564 DEBUG [http-nio-8080-exec-7]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-05 01:05:24.689 DEBUG [http-nio-8080-exec-9]com.tqk.blog.mapper.BlBlogMapper.getById.debug:159 -==>  Preparing: select blog_id, blog_title, blog_content, blog_goods, blog_image, blog_read, blog_collection, blog_type, blog_remark, blog_comment, blog_source, created_time, version from bl_blog where blog_id = ? and deleted = 0 
2020-11-05 01:05:24.692 DEBUG [http-nio-8080-exec-9]com.tqk.blog.mapper.BlBlogMapper.getById.debug:159 -==> Parameters: 1324032521322803200(String)
2020-11-05 01:05:24.743 DEBUG [http-nio-8080-exec-9]com.tqk.blog.mapper.BlBlogMapper.getById.debug:159 -<==      Total: 1
2020-11-05 01:05:24.746 DEBUG [http-nio-8080-exec-9]com.tqk.blog.mapper.BlBlogMapper.update.debug:159 -==>  Preparing: update bl_blog set version = version + 1 ,blog_title = ? ,blog_image = ? ,blog_content = ? ,blog_type = ? ,blog_remark = ? ,blog_source = ? where blog_id = ? and version = ? 
2020-11-05 01:05:24.749 DEBUG [http-nio-8080-exec-9]com.tqk.blog.mapper.BlBlogMapper.update.debug:159 -==> Parameters: Spring中的@Transactional(rollbackFor = Exception.class)属性详解(String), Java(String), 在项目中，@Transactional(rollbackFor=Exception.class)，如果类加了这个注解，那么这个类里面的方法抛出异常，就会回滚，数据库里面的数据也会回滚。在@Transactional注解中如果不配置rollbackFor属性,那么事物只会在遇到RuntimeException的时候才会回滚,加上rollbackFor=Exception.class,可以让事物在遇到非运行时异常时也回滚(String), 1(Integer), valu可选的限定描述符，指定使用的事务管理器(String), 百度(String), 1324032521322803200(String), null
2020-11-05 01:05:24.854 DEBUG [http-nio-8080-exec-9]com.tqk.blog.mapper.BlBlogMapper.update.debug:159 -<==    Updates: 0
2020-11-05 01:05:24.998 DEBUG [http-nio-8080-exec-9]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-05 01:05:25.001 DEBUG [http-nio-8080-exec-9]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/update(String), [com.tqk.blog.pojo.BlBlog@69414344](String), 1(Integer), null, PUT(String), 336(Long), {"code":20000,"msg":"更新成功！"}(String), 0:0:0:0:0:0:0:1(String)
2020-11-05 01:05:25.123 DEBUG [http-nio-8080-exec-9]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-05 01:15:29.447 DEBUG [http-nio-8080-exec-2]com.tqk.blog.mapper.BlBlogMapper.getById.debug:159 -==>  Preparing: select blog_id, blog_title, blog_content, blog_goods, blog_image, blog_read, blog_collection, blog_type, blog_remark, blog_comment, blog_source, created_time, version from bl_blog where blog_id = ? and deleted = 0 
2020-11-05 01:15:29.449 DEBUG [http-nio-8080-exec-2]com.tqk.blog.mapper.BlBlogMapper.getById.debug:159 -==> Parameters: 1324032521322803200(String)
2020-11-05 01:15:29.487 DEBUG [http-nio-8080-exec-2]com.tqk.blog.mapper.BlBlogMapper.getById.debug:159 -<==      Total: 1
2020-11-05 01:15:29.489 DEBUG [http-nio-8080-exec-2]com.tqk.blog.mapper.BlBlogMapper.update.debug:159 -==>  Preparing: update bl_blog set version = version + 1 ,blog_title = ? ,blog_image = ? ,blog_content = ? ,blog_goods = ? ,blog_read = ? ,blog_collection = ? ,blog_type = ? ,blog_remark = ? ,blog_comment = ? ,blog_source = ? where blog_id = ? and version = ? 
2020-11-05 01:15:29.490 DEBUG [http-nio-8080-exec-2]com.tqk.blog.mapper.BlBlogMapper.update.debug:159 -==> Parameters: Spring中的@Transactional(rollbackFor = Exception.class)属性详解(String), Java(String), 在项目中，@Transactional(rollbackFor=Exception.class)，如果类加了这个注解，那么这个类里面的方法抛出异常，就会回滚，数据库里面的数据也会回滚。在@Transactional注解中如果不配置rollbackFor属性,那么事物只会在遇到RuntimeException的时候才会回滚,加上rollbackFor=Exception.class,可以让事物在遇到非运行时异常时也回滚(String), 0(Integer), 1(Integer), 0(Integer), 1(Integer), Spring中的@Transactional(rollbackFor = Exception.class)属性详解(String), 0(Integer), 百度(String), 1324032521322803200(String), 1(Integer)
2020-11-05 01:15:29.563 DEBUG [http-nio-8080-exec-2]com.tqk.blog.mapper.BlBlogMapper.update.debug:159 -<==    Updates: 1
2020-11-05 01:15:29.573 DEBUG [http-nio-8080-exec-2]com.tqk.blog.mapper.BlTypeMapper.selectByPrimaryKey.debug:159 -==>  Preparing: SELECT type_id,type_name,type_blog_count,enable,deleted FROM bl_type WHERE type_id = ? 
2020-11-05 01:15:29.574 DEBUG [http-nio-8080-exec-2]com.tqk.blog.mapper.BlTypeMapper.selectByPrimaryKey.debug:159 -==> Parameters: 1(Integer)
2020-11-05 01:15:29.611 DEBUG [http-nio-8080-exec-2]com.tqk.blog.mapper.BlTypeMapper.selectByPrimaryKey.debug:159 -<==      Total: 1
2020-11-05 01:15:29.762 DEBUG [http-nio-8080-exec-2]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-05 01:15:29.763 DEBUG [http-nio-8080-exec-2]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/read/1324032521322803200(String), [1324032521322803200](String), 1(Integer), null, GET(String), 333(Long), {"code":20000,"data":{"blogCollection":0,"blogComment":0,"blogContent":"在项目中，@Transactional(rollbackFor=Exception.class)，如果类加了这个注解，那么这个类里面的方法抛出异常，就会回滚，数据库里面的数据也会回滚。在@Transactional注解中如果不配置rollbackFor属性,那么事物只会在遇到RuntimeException的时候才会回滚,加上rollbackFor=Exception.class,可以让事物在遇到非运行时异常时也回滚","blogGoods":0,"blogId":"1324032521322803200","blogImage":"Java","blogRead":1,"blogRemark":"Spring中的@Transactional(rollbackFor = Exception.class)属性详解","blogSource":"百度","blogTitle":"Spring中的@Transactional(rollbackFor = Exception.class)属性详解","typeName":"Java"},"msg":"操作成功！"}(String), 0:0:0:0:0:0:0:1(String)
2020-11-05 01:15:29.848 DEBUG [http-nio-8080-exec-2]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-05 01:16:21.658 DEBUG [http-nio-8080-exec-3]com.tqk.blog.mapper.BlBlogMapper.deleteById.debug:159 -==>  Preparing: update bl_blog set deleted = 1 where blog_id = ? 
2020-11-05 01:16:21.659 DEBUG [http-nio-8080-exec-3]com.tqk.blog.mapper.BlBlogMapper.deleteById.debug:159 -==> Parameters: 1324032521322803200(String)
2020-11-05 01:16:22.061 DEBUG [http-nio-8080-exec-3]com.tqk.blog.mapper.BlBlogMapper.deleteById.debug:159 -<==    Updates: 1
2020-11-05 01:16:22.109 DEBUG [http-nio-8080-exec-3]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-05 01:16:22.111 DEBUG [http-nio-8080-exec-3]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/delete/1324032521322803200(String), [1324032521322803200](String), 1(Integer), null, DELETE(String), 454(Long), {"code":20000,"msg":"删除成功！"}(String), 0:0:0:0:0:0:0:1(String)
2020-11-05 01:16:22.204 DEBUG [http-nio-8080-exec-3]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-05 01:17:36.462 DEBUG [http-nio-8080-exec-6]com.tqk.blog.mapper.BlBlogMapper.save.debug:159 -==>  Preparing: insert into bl_blog( blog_id, blog_title,blog_image, blog_content, blog_type, blog_remark, blog_source ) values ( ?, ?, ?, ?, ?, ?, ? ) 
2020-11-05 01:17:36.464 DEBUG [http-nio-8080-exec-6]com.tqk.blog.mapper.BlBlogMapper.save.debug:159 -==> Parameters: 1324038097171820544(String), BeanUtils.copyProperties的用法(String), Java(String), BeanUtils.copyProperties(a, b);b中的存在的属性，a中一定要有，但是a中可以有多余的属性；a中与b中相同的属性都会被替换，不管是否有值；a、 b中的属性要名字相同，才能被赋值，不然的话需要手动赋值；Spring的BeanUtils的CopyProperties方法需要对应的属性有getter和setter方法；如果存在属性完全相同的内部类，但是不是同一个内部类，即分别属于各自的内部类，则spring会认为属性不同，不会copy；spring和apache的copy属性的方法源和目的参数的位置正好相反，所以导包和调用的时候都要注意一下。(String), 1(Integer), BeanUtils它提供了对java反射和自省API的包装。它里面还有很多工具类，这里我们介绍一下copyProperties。(String), 百度(String)
2020-11-05 01:17:36.536 DEBUG [http-nio-8080-exec-6]com.tqk.blog.mapper.BlBlogMapper.save.debug:159 -<==    Updates: 1
2020-11-05 01:17:36.537 DEBUG [http-nio-8080-exec-6]com.tqk.blog.mapper.BlTypeMapper.selectByPrimaryKey.debug:159 -==>  Preparing: SELECT type_id,type_name,type_blog_count,enable,deleted FROM bl_type WHERE type_id = ? 
2020-11-05 01:17:36.538 DEBUG [http-nio-8080-exec-6]com.tqk.blog.mapper.BlTypeMapper.selectByPrimaryKey.debug:159 -==> Parameters: 1(Integer)
2020-11-05 01:17:36.575 DEBUG [http-nio-8080-exec-6]com.tqk.blog.mapper.BlTypeMapper.selectByPrimaryKey.debug:159 -<==      Total: 1
2020-11-05 01:17:36.578 DEBUG [http-nio-8080-exec-6]com.tqk.blog.mapper.BlTypeMapper.updateByPrimaryKey.debug:159 -==>  Preparing: UPDATE bl_type SET type_name = ?,type_blog_count = ?,enable = ?,deleted = ? WHERE type_id = ? 
2020-11-05 01:17:36.579 DEBUG [http-nio-8080-exec-6]com.tqk.blog.mapper.BlTypeMapper.updateByPrimaryKey.debug:159 -==> Parameters: Java(String), 102(Integer), 1(Integer), 0(Integer), 1(Integer)
2020-11-05 01:17:36.655 DEBUG [http-nio-8080-exec-6]com.tqk.blog.mapper.BlTypeMapper.updateByPrimaryKey.debug:159 -<==    Updates: 1
2020-11-05 01:17:36.782 DEBUG [http-nio-8080-exec-6]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-05 01:17:36.784 DEBUG [http-nio-8080-exec-6]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/save(String), [com.tqk.blog.pojo.BlBlog@795e0a3b](String), 1(Integer), null, POST(String), 359(Long), {"code":20000,"msg":"添加成功！"}(String), 0:0:0:0:0:0:0:1(String)
2020-11-05 01:17:36.878 DEBUG [http-nio-8080-exec-6]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-05 01:18:28.915 DEBUG [http-nio-8080-exec-7]com.tqk.blog.mapper.BlBlogMapper.getTimeLine.debug:159 -==>  Preparing: select blog_id, blog_title, created_time, date_format(created_time, '%Y-%m') as blog_month from bl_blog order by created_time desc 
2020-11-05 01:18:28.917 DEBUG [http-nio-8080-exec-7]com.tqk.blog.mapper.BlBlogMapper.getTimeLine.debug:159 -==> Parameters: 
2020-11-05 01:18:28.957 DEBUG [http-nio-8080-exec-7]com.tqk.blog.mapper.BlBlogMapper.getTimeLine.debug:159 -<==      Total: 2
2020-11-05 01:18:29.003 DEBUG [http-nio-8080-exec-7]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-05 01:18:29.004 DEBUG [http-nio-8080-exec-7]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/getTimeLine(String), [](String), 1(Integer), 	at com.tqk.blog.service.impl.BlogServiceImpl.update(BlogServiceImpl.java:75)
	at com.tqk.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$c89e2edd.invoke(<generated>)
	at com.tqk.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$95064f5.update(<generated>)
	at com.tqk.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$c89e2edd.invoke(<generated>)
	at com.tqk.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$a1776771.update(<generated>)
	at com.tqk.blog.controller.BlogController.update(BlogController.java:60)
	at com.tqk.blog.controller.BlogController$$FastClassBySpringCGLIB$$a4fc5e31.invoke(<generated>)
	at com.tqk.blog.aspect.RequestAspect.doAround(RequestAspect.java:65)
	at com.tqk.blog.controller.BlogController$$EnhancerBySpringCGLIB$$8801d724.update(<generated>)
(String), GET(String), 87(Long), {"code":20000,"data":[{"list":[{"blogId":"1324038097171820544","blogMonth":"2020-11","blogTitle":"BeanUtils.copyProperties的用法","createdTime":"2020-11-04 17:17:33"},{"blogId":"1324032521322803200","blogMonth":"2020-11","blogTitle":"Spring中的@Transactional(rollbackFor = Exception.class)属性详解","createdTime":"2020-11-04 16:55:24"}],"month":"2020-11"}],"msg":"操作成功！"}(String), 0:0:0:0:0:0:0:1(String)
2020-11-05 01:18:29.099 DEBUG [http-nio-8080-exec-7]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-05 01:20:14.484 DEBUG [http-nio-8080-exec-1]com.tqk.blog.mapper.BlBlogMapper.recomRead.debug:159 -==>  Preparing: select blog_id, blog_title, blog_goods, blog_read, blog_collection, blog_comment, created_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 order by (blog_read + blog_goods) desc limit 5 
2020-11-05 01:20:14.486 DEBUG [http-nio-8080-exec-1]com.tqk.blog.mapper.BlBlogMapper.recomRead.debug:159 -==> Parameters: 
2020-11-05 01:20:14.560 DEBUG [http-nio-8080-exec-1]com.tqk.blog.mapper.BlBlogMapper.recomRead.debug:159 -<==      Total: 1
2020-11-05 01:20:14.615 DEBUG [http-nio-8080-exec-1]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-05 01:20:14.617 DEBUG [http-nio-8080-exec-1]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/recomRead(String), [](String), 1(Integer), null, GET(String), 147(Long), {"code":20000,"data":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1324038097171820544","blogRead":0,"blogTitle":"BeanUtils.copyProperties的用法","createdTime":"2020-11-04 17:17:33","typeName":"Java"}],"msg":"操作成功！"}(String), 0:0:0:0:0:0:0:1(String)
2020-11-05 01:20:14.713 DEBUG [http-nio-8080-exec-1]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
2020-11-05 01:24:05.552 DEBUG [http-nio-8080-exec-7]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==>  Preparing: select blog_id, blog_title, blog_image, blog_goods, blog_read, blog_collection, blog_remark, blog_comment, blog_source, created_time, update_time,type_name from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 limit ?, ? 
2020-11-05 01:24:05.553 DEBUG [http-nio-8080-exec-7]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -==> Parameters: 0(Integer), 20(Integer)
2020-11-05 01:24:05.593 DEBUG [http-nio-8080-exec-7]com.tqk.blog.mapper.BlBlogMapper.getByPage.debug:159 -<==      Total: 1
2020-11-05 01:24:05.595 DEBUG [http-nio-8080-exec-7]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==>  Preparing: select count(*) from bl_blog as b inner join bl_type as t on type_id = blog_type where t.deleted = 0 and b.deleted = 0 
2020-11-05 01:24:05.597 DEBUG [http-nio-8080-exec-7]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -==> Parameters: 
2020-11-05 01:24:05.634 DEBUG [http-nio-8080-exec-7]com.tqk.blog.mapper.BlBlogMapper.getCountByPage.debug:159 -<==      Total: 1
2020-11-05 01:24:05.760 DEBUG [http-nio-8080-exec-7]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==>  Preparing: insert into bl_log( log_url, log_params, log_status, log_message, log_method, log_time, log_result, log_ip ) values ( ?, ?, ?, ?, ?, ?, ?, ? ) 
2020-11-05 01:24:05.761 DEBUG [http-nio-8080-exec-7]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -==> Parameters: /blog/getByPage(String), [Page(currentPage=1, pageSize=20, totalPage=0, totalCount=0, list=null, params={}, sortColumn=null, sortMethod=asc)](String), 1(Integer), 	at com.tqk.blog.service.impl.BlogServiceImpl.update(BlogServiceImpl.java:75)
	at com.tqk.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$c89e2edd.invoke(<generated>)
	at com.tqk.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$95064f5.update(<generated>)
	at com.tqk.blog.service.impl.BlogServiceImpl$$FastClassBySpringCGLIB$$c89e2edd.invoke(<generated>)
	at com.tqk.blog.service.impl.BlogServiceImpl$$EnhancerBySpringCGLIB$$a1776771.update(<generated>)
	at com.tqk.blog.controller.BlogController.update(BlogController.java:60)
	at com.tqk.blog.controller.BlogController$$FastClassBySpringCGLIB$$a4fc5e31.invoke(<generated>)
	at com.tqk.blog.aspect.RequestAspect.doAround(RequestAspect.java:65)
	at com.tqk.blog.controller.BlogController$$EnhancerBySpringCGLIB$$8801d724.update(<generated>)
(String), POST(String), 246(Long), {"code":20000,"data":{"currentPage":1,"index":0,"list":[{"blogCollection":0,"blogComment":0,"blogGoods":0,"blogId":"1324038097171820544","blogImage":"Java","blogRead":0,"blogRemark":"BeanUtils它提供了对java反射和自省API的包装。它里面还有很多工具类，这里我们介绍一下copyProperties。","blogSource":"百度","blogTitle":"BeanUtils.copyProperties的用法","createdTime":"2020-11-04 17:17:33","typeName":"Java","updateTime":"2020-11-04 17:17:33"}],"pageSize":20,"params":{},"sortMethod":"asc","totalCount":1,"totalPage":1},"msg":"操作成功！"}(String), 0:0:0:0:0:0:0:1(String)
2020-11-05 01:24:05.843 DEBUG [http-nio-8080-exec-7]com.tqk.blog.mapper.BlLogMapper.save.debug:159 -<==    Updates: 1
